{"version":3,"file":"server.js","sources":["webpack:///webpack/bootstrap","webpack:///(webpack)/hot/log-apply-result.js","webpack:///(webpack)/hot/log.js","webpack:///(webpack)/hot/poll.js","webpack:///src/actions/actions/actions.js","webpack:///src/actions/breadcrumbs/breadcrumbs.js","webpack:///src/actions/clipboard/clipboard.js","webpack:///src/actions/comments/comments.js","webpack:///src/actions/content/content.js","webpack:///src/actions/controlpanels/controlpanels.js","webpack:///src/actions/diff/diff.js","webpack:///src/actions/emailNotification/emailNotification.js","webpack:///src/actions/groups/groups.js","webpack:///src/actions/history/history.js","webpack:///src/actions/index.js","webpack:///src/actions/messages/messages.js","webpack:///src/actions/navigation/navigation.js","webpack:///src/actions/roles/roles.js","webpack:///src/actions/schema/schema.js","webpack:///src/actions/search/search.js","webpack:///src/actions/sharing/sharing.js","webpack:///src/actions/tiles/tiles.js","webpack:///src/actions/types/types.js","webpack:///src/actions/userSession/userSession.js","webpack:///src/actions/users/users.js","webpack:///src/actions/vocabularies/vocabularies.js","webpack:///src/actions/workflow/workflow.js","webpack:///src/components/index.js","webpack:///src/components/manage/Actions/Actions.jsx","webpack:///src/components/manage/Add/Add.jsx","webpack:///src/components/manage/AnchorPlugin/components/Link/index.jsx","webpack:///src/components/manage/AnchorPlugin/components/LinkButton/AddLinkForm.jsx","webpack:///src/components/manage/AnchorPlugin/components/LinkButton/index.jsx","webpack:///src/components/manage/AnchorPlugin/index.jsx","webpack:///src/components/manage/AnchorPlugin/linkStrategy.js","webpack:///./src/components/manage/AnchorPlugin/linkStyles.module.css","webpack:///src/components/manage/AnchorPlugin/utils/URLUtils.js","webpack:///src/components/manage/AnchorPlugin/utils/mailRegex.js","webpack:///src/components/manage/AnchorPlugin/utils/urlRegex.js","webpack:///src/components/manage/Contents/Contents.jsx","webpack:///src/components/manage/Contents/ContentsIndexHeader.jsx","webpack:///src/components/manage/Contents/ContentsItem.jsx","webpack:///src/components/manage/Contents/ContentsPropertiesModal.jsx","webpack:///src/components/manage/Contents/ContentsRenameModal.jsx","webpack:///src/components/manage/Contents/ContentsTagsModal.jsx","webpack:///src/components/manage/Contents/ContentsUploadModal.jsx","webpack:///src/components/manage/Contents/ContentsWorkflowModal.jsx","webpack:///src/components/manage/Controlpanels/Controlpanel.jsx","webpack:///src/components/manage/Controlpanels/Controlpanels.jsx","webpack:///src/components/manage/Controlpanels/ModerateComments.jsx","webpack:///src/components/manage/Controlpanels/UsersControlpanel.jsx","webpack:///src/components/manage/Delete/Delete.jsx","webpack:///src/components/manage/Diff/Diff.jsx","webpack:///src/components/manage/Diff/DiffField.jsx","webpack:///src/components/manage/Display/Display.jsx","webpack:///src/components/manage/Edit/Edit.jsx","webpack:///src/components/manage/Form/Field.jsx","webpack:///src/components/manage/Form/Form.jsx","webpack:///src/components/manage/Form/ModalForm.jsx","webpack:///src/components/manage/History/History.jsx","webpack:///src/components/manage/Messages/Messages.jsx","webpack:///src/components/manage/Preferences/ChangePassword.jsx","webpack:///src/components/manage/Preferences/PersonalInformation.jsx","webpack:///src/components/manage/Preferences/PersonalPreferences.jsx","webpack:///src/components/manage/Sharing/Sharing.jsx","webpack:///src/components/manage/Tiles/Description/Edit.jsx","webpack:///src/components/manage/Tiles/Description/View.jsx","webpack:///src/components/manage/Tiles/Image/Edit.jsx","webpack:///src/components/manage/Tiles/Image/View.jsx","webpack:///src/components/manage/Tiles/Text/Edit.jsx","webpack:///src/components/manage/Tiles/Text/View.jsx","webpack:///src/components/manage/Tiles/Tile/Edit.jsx","webpack:///src/components/manage/Tiles/Title/Edit.jsx","webpack:///src/components/manage/Tiles/Title/View.jsx","webpack:///src/components/manage/Tiles/Video/Edit.jsx","webpack:///src/components/manage/Tiles/Video/View.jsx","webpack:///src/components/manage/Toolbar/Toolbar.jsx","webpack:///./src/components/manage/Toolbar/pastanaga.svg","webpack:///src/components/manage/Types/Types.jsx","webpack:///src/components/manage/Widgets/ArrayWidget.jsx","webpack:///src/components/manage/Widgets/CheckboxWidget.jsx","webpack:///src/components/manage/Widgets/DatetimeWidget.jsx","webpack:///src/components/manage/Widgets/FileWidget.jsx","webpack:///src/components/manage/Widgets/PasswordWidget.jsx","webpack:///src/components/manage/Widgets/SchemaWidget.jsx","webpack:///src/components/manage/Widgets/SchemaWidgetFieldset.jsx","webpack:///src/components/manage/Widgets/SelectWidget.jsx","webpack:///src/components/manage/Widgets/TextWidget.jsx","webpack:///src/components/manage/Widgets/TextareaWidget.jsx","webpack:///src/components/manage/Widgets/WysiwygWidget.jsx","webpack:///src/components/manage/Workflow/Workflow.jsx","webpack:///src/components/mosaic/Column/Column.jsx","webpack:///src/components/mosaic/Column/ColumnResize.jsx","webpack:///src/components/mosaic/Column/ColumnResizeHelper.jsx","webpack:///src/components/mosaic/Editbar/Editbar.jsx","webpack:///src/components/mosaic/Grid/Grid.jsx","webpack:///src/components/mosaic/Layout/Layout.jsx","webpack:///src/components/mosaic/Row/Row.jsx","webpack:///src/components/mosaic/Tile/Tile.jsx","webpack:///src/components/theme/Anontools/Anontools.jsx","webpack:///src/components/theme/App/App.jsx","webpack:///src/components/theme/Breadcrumbs/Breadcrumbs.jsx","webpack:///src/components/theme/Comments/CommentEditModal.jsx","webpack:///src/components/theme/Comments/Comments.jsx","webpack:///src/components/theme/Footer/Footer.jsx","webpack:///src/components/theme/Header/Header.jsx","webpack:///src/components/theme/Icon/Icon.jsx","webpack:///src/components/theme/Login/Login.jsx","webpack:///src/components/theme/Logo/Logo.jsx","webpack:///./src/components/theme/Logo/Logo.svg","webpack:///src/components/theme/Logout/Logout.jsx","webpack:///src/components/theme/Navigation/Navigation.jsx","webpack:///src/components/theme/NotFound/NotFound.jsx","webpack:///src/components/theme/Pagination/Pagination.jsx","webpack:///src/components/theme/PasswordReset/PasswordReset.jsx","webpack:///src/components/theme/PasswordReset/RequestPasswordReset.jsx","webpack:///src/components/theme/Register/Register.jsx","webpack:///src/components/theme/Search/Search.jsx","webpack:///src/components/theme/Search/SearchTags.jsx","webpack:///src/components/theme/SearchWidget/SearchWidget.jsx","webpack:///src/components/theme/SocialSharing/SocialSharing.jsx","webpack:///src/components/theme/Tags/Tags.jsx","webpack:///src/components/theme/Title/Title.jsx","webpack:///src/components/theme/View/DocumentView.jsx","webpack:///src/components/theme/View/FileView.jsx","webpack:///src/components/theme/View/ImageView.jsx","webpack:///src/components/theme/View/ListingView.jsx","webpack:///src/components/theme/View/NewsItemView.jsx","webpack:///src/components/theme/View/SummaryView.jsx","webpack:///src/components/theme/View/TabularView.jsx","webpack:///src/components/theme/View/View.jsx","webpack:///src/config/NonContentRoutes.jsx","webpack:///src/config/RichTextEditor/Blocks.jsx","webpack:///src/config/RichTextEditor/FromHTML.jsx","webpack:///src/config/RichTextEditor/Plugins.jsx","webpack:///src/config/RichTextEditor/Styles.jsx","webpack:///src/config/RichTextEditor/ToHTML.jsx","webpack:///src/config/Tiles.jsx","webpack:///src/config/Views.jsx","webpack:///src/config/Widgets.jsx","webpack:///src/config/index.js","webpack:///src/constants/ActionTypes.js","webpack:///src/constants/ControlpanelIcons.js","webpack:///src/constants/Indexes.js","webpack:///src/constants/Languages.js","webpack:///src/constants/Layouts.js","webpack:///src/error.jsx","webpack:///src/helpers/Api/Api.js","webpack:///src/helpers/AuthToken/AuthToken.js","webpack:///src/helpers/BodyClass/BodyClass.jsx","webpack:///src/helpers/Content/Content.js","webpack:///src/helpers/Html/Html.jsx","webpack:///src/helpers/Sitemap/Sitemap.js","webpack:///src/helpers/Tiles/Tiles.js","webpack:///src/helpers/Url/Url.js","webpack:///src/helpers/index.js","webpack:///./src/icons/bold.svg","webpack:///./src/icons/camera.svg","webpack:///./src/icons/circle-plus.svg","webpack:///./src/icons/clear.svg","webpack:///./src/icons/delete.svg","webpack:///./src/icons/drag.svg","webpack:///./src/icons/folder.svg","webpack:///./src/icons/image-fit.svg","webpack:///./src/icons/image-full.svg","webpack:///./src/icons/image-left.svg","webpack:///./src/icons/image-right.svg","webpack:///./src/icons/image.svg","webpack:///./src/icons/italic.svg","webpack:///./src/icons/link.svg","webpack:///./src/icons/list-bullet.svg","webpack:///./src/icons/list-numbered.svg","webpack:///./src/icons/megaphone.svg","webpack:///./src/icons/quote.svg","webpack:///./src/icons/subtext.svg","webpack:///./src/icons/text.svg","webpack:///./src/icons/theme.svg","webpack:///./src/icons/unlink.svg","webpack:///./src/icons/videocamera.svg","webpack:///src/index.js","webpack:///src/middleware/api.js","webpack:///src/middleware/crashReporter.js","webpack:///src/middleware/index.js","webpack:///src/reducers/actions/actions.js","webpack:///src/reducers/breadcrumbs/breadcrumbs.js","webpack:///src/reducers/clipboard/clipboard.js","webpack:///src/reducers/comments/comments.js","webpack:///src/reducers/content/content.js","webpack:///src/reducers/controlpanels/controlpanels.js","webpack:///src/reducers/diff/diff.js","webpack:///src/reducers/emailNotification/emailNotification.js","webpack:///src/reducers/form/form.js","webpack:///src/reducers/groups/groups.js","webpack:///src/reducers/history/history.js","webpack:///src/reducers/index.js","webpack:///src/reducers/messages/messages.js","webpack:///src/reducers/navigation/navigation.js","webpack:///src/reducers/roles/roles.js","webpack:///src/reducers/schema/schema.js","webpack:///src/reducers/search/search.js","webpack:///src/reducers/sharing/sharing.js","webpack:///src/reducers/tiles/tiles.js","webpack:///src/reducers/types/types.js","webpack:///src/reducers/userSession/userSession.js","webpack:///src/reducers/users/users.js","webpack:///src/reducers/vocabularies/vocabularies.js","webpack:///src/reducers/workflow/workflow.js","webpack:///src/routes.jsx","webpack:///src/server.jsx","webpack:///src/start-server.js","webpack:///src/store.js","webpack:///external \"babel-runtime/core-js/json/stringify\"","webpack:///external \"babel-runtime/core-js/object/assign\"","webpack:///external \"babel-runtime/core-js/object/get-prototype-of\"","webpack:///external \"babel-runtime/core-js/promise\"","webpack:///external \"babel-runtime/helpers/classCallCheck\"","webpack:///external \"babel-runtime/helpers/createClass\"","webpack:///external \"babel-runtime/helpers/defineProperty\"","webpack:///external \"babel-runtime/helpers/extends\"","webpack:///external \"babel-runtime/helpers/inherits\"","webpack:///external \"babel-runtime/helpers/objectWithoutProperties\"","webpack:///external \"babel-runtime/helpers/possibleConstructorReturn\"","webpack:///external \"babel-runtime/helpers/slicedToArray\"","webpack:///external \"babel-runtime/helpers/toConsumableArray\"","webpack:///external \"connected-react-router\"","webpack:///external \"decorate-component-with-props\"","webpack:///external \"diff\"","webpack:///external \"draft-js\"","webpack:///external \"draft-js-block-breakout-plugin\"","webpack:///external \"draft-js-buttons/lib/utils/createBlockStyleButton\"","webpack:///external \"draft-js-buttons/lib/utils/createInlineStyleButton\"","webpack:///external \"draft-js-import-html\"","webpack:///external \"draft-js-inline-toolbar-plugin\"","webpack:///external \"draft-js-plugins-editor\"","webpack:///external \"draft-js-plugins-utils\"","webpack:///external \"express\"","webpack:///external \"filesize\"","webpack:///external \"history\"","webpack:///external \"http\"","webpack:///external \"immutable\"","webpack:///external \"jwt-decode\"","webpack:///external \"locale\"","webpack:///external \"lodash\"","webpack:///external \"lodash-move\"","webpack:///external \"moment\"","webpack:///external \"prepend-http\"","webpack:///external \"promise-file-reader\"","webpack:///external \"prop-types\"","webpack:///external \"query-string\"","webpack:///external \"raven\"","webpack:///external \"raven-js\"","webpack:///external \"razzle-dev-utils/prettyNodeErrors\"","webpack:///external \"react\"","webpack:///external \"react-cookie\"","webpack:///external \"react-dnd\"","webpack:///external \"react-dnd-html5-backend\"","webpack:///external \"react-dom\"","webpack:///external \"react-dom/server\"","webpack:///external \"react-dropzone\"","webpack:///external \"react-helmet\"","webpack:///external \"react-intl\"","webpack:///external \"react-intl-redux\"","webpack:///external \"react-portal\"","webpack:///external \"react-redux\"","webpack:///external \"react-router-config/renderRoutes\"","webpack:///external \"react-router-dom\"","webpack:///external \"react-share\"","webpack:///external \"react-side-effect\"","webpack:///external \"redraft\"","webpack:///external \"redux\"","webpack:///external \"redux-connect\"","webpack:///external \"redux-devtools-extension/developmentOnly\"","webpack:///external \"redux-thunk\"","webpack:///external \"semantic-ui-react\"","webpack:///external \"semantic-ui-react/dist/commonjs/lib\"","webpack:///external \"serialize-javascript\"","webpack:///external \"superagent\"","webpack:///external \"tlds\"","webpack:///external \"union-class-names\"","webpack:///external \"url\"","webpack:///external \"uuid\"","webpack:///external \"zlib\""],"sourcesContent":[" \t// eslint-disable-next-line no-unused-vars\n \tfunction hotDownloadUpdateChunk(chunkId) {\n \t\tvar chunk = require(\"./\" + \"\" + chunkId + \".\" + hotCurrentHash + \".hot-update.js\");\n \t\thotAddUpdateChunk(chunk.id, chunk.modules);\n \t}\n\n \t// eslint-disable-next-line no-unused-vars\n \tfunction hotDownloadManifest() {\n \t\ttry {\n \t\t\tvar update = require(\"./\" + \"\" + hotCurrentHash + \".hot-update.json\");\n \t\t} catch (e) {\n \t\t\treturn Promise.resolve();\n \t\t}\n \t\treturn Promise.resolve(update);\n \t}\n\n \t//eslint-disable-next-line no-unused-vars\n \tfunction hotDisposeChunk(chunkId) {\n \t\tdelete installedChunks[chunkId];\n \t}\n\n \tvar hotApplyOnUpdate = true;\n \t// eslint-disable-next-line no-unused-vars\n \tvar hotCurrentHash = \"2570e7c9ba5362155d31\";\n \tvar hotRequestTimeout = 10000;\n \tvar hotCurrentModuleData = {};\n \tvar hotCurrentChildModule;\n \t// eslint-disable-next-line no-unused-vars\n \tvar hotCurrentParents = [];\n \t// eslint-disable-next-line no-unused-vars\n \tvar hotCurrentParentsTemp = [];\n\n \t// eslint-disable-next-line no-unused-vars\n \tfunction hotCreateRequire(moduleId) {\n \t\tvar me = installedModules[moduleId];\n \t\tif (!me) return __webpack_require__;\n \t\tvar fn = function(request) {\n \t\t\tif (me.hot.active) {\n \t\t\t\tif (installedModules[request]) {\n \t\t\t\t\tif (installedModules[request].parents.indexOf(moduleId) === -1) {\n \t\t\t\t\t\tinstalledModules[request].parents.push(moduleId);\n \t\t\t\t\t}\n \t\t\t\t} else {\n \t\t\t\t\thotCurrentParents = [moduleId];\n \t\t\t\t\thotCurrentChildModule = request;\n \t\t\t\t}\n \t\t\t\tif (me.children.indexOf(request) === -1) {\n \t\t\t\t\tme.children.push(request);\n \t\t\t\t}\n \t\t\t} else {\n \t\t\t\tconsole.warn(\n \t\t\t\t\t\"[HMR] unexpected require(\" +\n \t\t\t\t\t\trequest +\n \t\t\t\t\t\t\") from disposed module \" +\n \t\t\t\t\t\tmoduleId\n \t\t\t\t);\n \t\t\t\thotCurrentParents = [];\n \t\t\t}\n \t\t\treturn __webpack_require__(request);\n \t\t};\n \t\tvar ObjectFactory = function ObjectFactory(name) {\n \t\t\treturn {\n \t\t\t\tconfigurable: true,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: function() {\n \t\t\t\t\treturn __webpack_require__[name];\n \t\t\t\t},\n \t\t\t\tset: function(value) {\n \t\t\t\t\t__webpack_require__[name] = value;\n \t\t\t\t}\n \t\t\t};\n \t\t};\n \t\tfor (var name in __webpack_require__) {\n \t\t\tif (\n \t\t\t\tObject.prototype.hasOwnProperty.call(__webpack_require__, name) &&\n \t\t\t\tname !== \"e\" &&\n \t\t\t\tname !== \"t\"\n \t\t\t) {\n \t\t\t\tObject.defineProperty(fn, name, ObjectFactory(name));\n \t\t\t}\n \t\t}\n \t\tfn.e = function(chunkId) {\n \t\t\tif (hotStatus === \"ready\") hotSetStatus(\"prepare\");\n \t\t\thotChunksLoading++;\n \t\t\treturn __webpack_require__.e(chunkId).then(finishChunkLoading, function(err) {\n \t\t\t\tfinishChunkLoading();\n \t\t\t\tthrow err;\n \t\t\t});\n\n \t\t\tfunction finishChunkLoading() {\n \t\t\t\thotChunksLoading--;\n \t\t\t\tif (hotStatus === \"prepare\") {\n \t\t\t\t\tif (!hotWaitingFilesMap[chunkId]) {\n \t\t\t\t\t\thotEnsureUpdateChunk(chunkId);\n \t\t\t\t\t}\n \t\t\t\t\tif (hotChunksLoading === 0 && hotWaitingFiles === 0) {\n \t\t\t\t\t\thotUpdateDownloaded();\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t};\n \t\tfn.t = function(value, mode) {\n \t\t\tif (mode & 1) value = fn(value);\n \t\t\treturn __webpack_require__.t(value, mode & ~1);\n \t\t};\n \t\treturn fn;\n \t}\n\n \t// eslint-disable-next-line no-unused-vars\n \tfunction hotCreateModule(moduleId) {\n \t\tvar hot = {\n \t\t\t// private stuff\n \t\t\t_acceptedDependencies: {},\n \t\t\t_declinedDependencies: {},\n \t\t\t_selfAccepted: false,\n \t\t\t_selfDeclined: false,\n \t\t\t_disposeHandlers: [],\n \t\t\t_main: hotCurrentChildModule !== moduleId,\n\n \t\t\t// Module API\n \t\t\tactive: true,\n \t\t\taccept: function(dep, callback) {\n \t\t\t\tif (dep === undefined) hot._selfAccepted = true;\n \t\t\t\telse if (typeof dep === \"function\") hot._selfAccepted = dep;\n \t\t\t\telse if (typeof dep === \"object\")\n \t\t\t\t\tfor (var i = 0; i < dep.length; i++)\n \t\t\t\t\t\thot._acceptedDependencies[dep[i]] = callback || function() {};\n \t\t\t\telse hot._acceptedDependencies[dep] = callback || function() {};\n \t\t\t},\n \t\t\tdecline: function(dep) {\n \t\t\t\tif (dep === undefined) hot._selfDeclined = true;\n \t\t\t\telse if (typeof dep === \"object\")\n \t\t\t\t\tfor (var i = 0; i < dep.length; i++)\n \t\t\t\t\t\thot._declinedDependencies[dep[i]] = true;\n \t\t\t\telse hot._declinedDependencies[dep] = true;\n \t\t\t},\n \t\t\tdispose: function(callback) {\n \t\t\t\thot._disposeHandlers.push(callback);\n \t\t\t},\n \t\t\taddDisposeHandler: function(callback) {\n \t\t\t\thot._disposeHandlers.push(callback);\n \t\t\t},\n \t\t\tremoveDisposeHandler: function(callback) {\n \t\t\t\tvar idx = hot._disposeHandlers.indexOf(callback);\n \t\t\t\tif (idx >= 0) hot._disposeHandlers.splice(idx, 1);\n \t\t\t},\n\n \t\t\t// Management API\n \t\t\tcheck: hotCheck,\n \t\t\tapply: hotApply,\n \t\t\tstatus: function(l) {\n \t\t\t\tif (!l) return hotStatus;\n \t\t\t\thotStatusHandlers.push(l);\n \t\t\t},\n \t\t\taddStatusHandler: function(l) {\n \t\t\t\thotStatusHandlers.push(l);\n \t\t\t},\n \t\t\tremoveStatusHandler: function(l) {\n \t\t\t\tvar idx = hotStatusHandlers.indexOf(l);\n \t\t\t\tif (idx >= 0) hotStatusHandlers.splice(idx, 1);\n \t\t\t},\n\n \t\t\t//inherit from previous dispose call\n \t\t\tdata: hotCurrentModuleData[moduleId]\n \t\t};\n \t\thotCurrentChildModule = undefined;\n \t\treturn hot;\n \t}\n\n \tvar hotStatusHandlers = [];\n \tvar hotStatus = \"idle\";\n\n \tfunction hotSetStatus(newStatus) {\n \t\thotStatus = newStatus;\n \t\tfor (var i = 0; i < hotStatusHandlers.length; i++)\n \t\t\thotStatusHandlers[i].call(null, newStatus);\n \t}\n\n \t// while downloading\n \tvar hotWaitingFiles = 0;\n \tvar hotChunksLoading = 0;\n \tvar hotWaitingFilesMap = {};\n \tvar hotRequestedFilesMap = {};\n \tvar hotAvailableFilesMap = {};\n \tvar hotDeferred;\n\n \t// The update info\n \tvar hotUpdate, hotUpdateNewHash;\n\n \tfunction toModuleId(id) {\n \t\tvar isNumber = +id + \"\" === id;\n \t\treturn isNumber ? +id : id;\n \t}\n\n \tfunction hotCheck(apply) {\n \t\tif (hotStatus !== \"idle\") {\n \t\t\tthrow new Error(\"check() is only allowed in idle status\");\n \t\t}\n \t\thotApplyOnUpdate = apply;\n \t\thotSetStatus(\"check\");\n \t\treturn hotDownloadManifest(hotRequestTimeout).then(function(update) {\n \t\t\tif (!update) {\n \t\t\t\thotSetStatus(\"idle\");\n \t\t\t\treturn null;\n \t\t\t}\n \t\t\thotRequestedFilesMap = {};\n \t\t\thotWaitingFilesMap = {};\n \t\t\thotAvailableFilesMap = update.c;\n \t\t\thotUpdateNewHash = update.h;\n\n \t\t\thotSetStatus(\"prepare\");\n \t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\thotDeferred = {\n \t\t\t\t\tresolve: resolve,\n \t\t\t\t\treject: reject\n \t\t\t\t};\n \t\t\t});\n \t\t\thotUpdate = {};\n \t\t\tvar chunkId = \"main\";\n \t\t\t// eslint-disable-next-line no-lone-blocks\n \t\t\t{\n \t\t\t\t/*globals chunkId */\n \t\t\t\thotEnsureUpdateChunk(chunkId);\n \t\t\t}\n \t\t\tif (\n \t\t\t\thotStatus === \"prepare\" &&\n \t\t\t\thotChunksLoading === 0 &&\n \t\t\t\thotWaitingFiles === 0\n \t\t\t) {\n \t\t\t\thotUpdateDownloaded();\n \t\t\t}\n \t\t\treturn promise;\n \t\t});\n \t}\n\n \t// eslint-disable-next-line no-unused-vars\n \tfunction hotAddUpdateChunk(chunkId, moreModules) {\n \t\tif (!hotAvailableFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])\n \t\t\treturn;\n \t\thotRequestedFilesMap[chunkId] = false;\n \t\tfor (var moduleId in moreModules) {\n \t\t\tif (Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\thotUpdate[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif (--hotWaitingFiles === 0 && hotChunksLoading === 0) {\n \t\t\thotUpdateDownloaded();\n \t\t}\n \t}\n\n \tfunction hotEnsureUpdateChunk(chunkId) {\n \t\tif (!hotAvailableFilesMap[chunkId]) {\n \t\t\thotWaitingFilesMap[chunkId] = true;\n \t\t} else {\n \t\t\thotRequestedFilesMap[chunkId] = true;\n \t\t\thotWaitingFiles++;\n \t\t\thotDownloadUpdateChunk(chunkId);\n \t\t}\n \t}\n\n \tfunction hotUpdateDownloaded() {\n \t\thotSetStatus(\"ready\");\n \t\tvar deferred = hotDeferred;\n \t\thotDeferred = null;\n \t\tif (!deferred) return;\n \t\tif (hotApplyOnUpdate) {\n \t\t\t// Wrap deferred object in Promise to mark it as a well-handled Promise to\n \t\t\t// avoid triggering uncaught exception warning in Chrome.\n \t\t\t// See https://bugs.chromium.org/p/chromium/issues/detail?id=465666\n \t\t\tPromise.resolve()\n \t\t\t\t.then(function() {\n \t\t\t\t\treturn hotApply(hotApplyOnUpdate);\n \t\t\t\t})\n \t\t\t\t.then(\n \t\t\t\t\tfunction(result) {\n \t\t\t\t\t\tdeferred.resolve(result);\n \t\t\t\t\t},\n \t\t\t\t\tfunction(err) {\n \t\t\t\t\t\tdeferred.reject(err);\n \t\t\t\t\t}\n \t\t\t\t);\n \t\t} else {\n \t\t\tvar outdatedModules = [];\n \t\t\tfor (var id in hotUpdate) {\n \t\t\t\tif (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {\n \t\t\t\t\toutdatedModules.push(toModuleId(id));\n \t\t\t\t}\n \t\t\t}\n \t\t\tdeferred.resolve(outdatedModules);\n \t\t}\n \t}\n\n \tfunction hotApply(options) {\n \t\tif (hotStatus !== \"ready\")\n \t\t\tthrow new Error(\"apply() is only allowed in ready status\");\n \t\toptions = options || {};\n\n \t\tvar cb;\n \t\tvar i;\n \t\tvar j;\n \t\tvar module;\n \t\tvar moduleId;\n\n \t\tfunction getAffectedStuff(updateModuleId) {\n \t\t\tvar outdatedModules = [updateModuleId];\n \t\t\tvar outdatedDependencies = {};\n\n \t\t\tvar queue = outdatedModules.slice().map(function(id) {\n \t\t\t\treturn {\n \t\t\t\t\tchain: [id],\n \t\t\t\t\tid: id\n \t\t\t\t};\n \t\t\t});\n \t\t\twhile (queue.length > 0) {\n \t\t\t\tvar queueItem = queue.pop();\n \t\t\t\tvar moduleId = queueItem.id;\n \t\t\t\tvar chain = queueItem.chain;\n \t\t\t\tmodule = installedModules[moduleId];\n \t\t\t\tif (!module || module.hot._selfAccepted) continue;\n \t\t\t\tif (module.hot._selfDeclined) {\n \t\t\t\t\treturn {\n \t\t\t\t\t\ttype: \"self-declined\",\n \t\t\t\t\t\tchain: chain,\n \t\t\t\t\t\tmoduleId: moduleId\n \t\t\t\t\t};\n \t\t\t\t}\n \t\t\t\tif (module.hot._main) {\n \t\t\t\t\treturn {\n \t\t\t\t\t\ttype: \"unaccepted\",\n \t\t\t\t\t\tchain: chain,\n \t\t\t\t\t\tmoduleId: moduleId\n \t\t\t\t\t};\n \t\t\t\t}\n \t\t\t\tfor (var i = 0; i < module.parents.length; i++) {\n \t\t\t\t\tvar parentId = module.parents[i];\n \t\t\t\t\tvar parent = installedModules[parentId];\n \t\t\t\t\tif (!parent) continue;\n \t\t\t\t\tif (parent.hot._declinedDependencies[moduleId]) {\n \t\t\t\t\t\treturn {\n \t\t\t\t\t\t\ttype: \"declined\",\n \t\t\t\t\t\t\tchain: chain.concat([parentId]),\n \t\t\t\t\t\t\tmoduleId: moduleId,\n \t\t\t\t\t\t\tparentId: parentId\n \t\t\t\t\t\t};\n \t\t\t\t\t}\n \t\t\t\t\tif (outdatedModules.indexOf(parentId) !== -1) continue;\n \t\t\t\t\tif (parent.hot._acceptedDependencies[moduleId]) {\n \t\t\t\t\t\tif (!outdatedDependencies[parentId])\n \t\t\t\t\t\t\toutdatedDependencies[parentId] = [];\n \t\t\t\t\t\taddAllToSet(outdatedDependencies[parentId], [moduleId]);\n \t\t\t\t\t\tcontinue;\n \t\t\t\t\t}\n \t\t\t\t\tdelete outdatedDependencies[parentId];\n \t\t\t\t\toutdatedModules.push(parentId);\n \t\t\t\t\tqueue.push({\n \t\t\t\t\t\tchain: chain.concat([parentId]),\n \t\t\t\t\t\tid: parentId\n \t\t\t\t\t});\n \t\t\t\t}\n \t\t\t}\n\n \t\t\treturn {\n \t\t\t\ttype: \"accepted\",\n \t\t\t\tmoduleId: updateModuleId,\n \t\t\t\toutdatedModules: outdatedModules,\n \t\t\t\toutdatedDependencies: outdatedDependencies\n \t\t\t};\n \t\t}\n\n \t\tfunction addAllToSet(a, b) {\n \t\t\tfor (var i = 0; i < b.length; i++) {\n \t\t\t\tvar item = b[i];\n \t\t\t\tif (a.indexOf(item) === -1) a.push(item);\n \t\t\t}\n \t\t}\n\n \t\t// at begin all updates modules are outdated\n \t\t// the \"outdated\" status can propagate to parents if they don't accept the children\n \t\tvar outdatedDependencies = {};\n \t\tvar outdatedModules = [];\n \t\tvar appliedUpdate = {};\n\n \t\tvar warnUnexpectedRequire = function warnUnexpectedRequire() {\n \t\t\tconsole.warn(\n \t\t\t\t\"[HMR] unexpected require(\" + result.moduleId + \") to disposed module\"\n \t\t\t);\n \t\t};\n\n \t\tfor (var id in hotUpdate) {\n \t\t\tif (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {\n \t\t\t\tmoduleId = toModuleId(id);\n \t\t\t\t/** @type {TODO} */\n \t\t\t\tvar result;\n \t\t\t\tif (hotUpdate[id]) {\n \t\t\t\t\tresult = getAffectedStuff(moduleId);\n \t\t\t\t} else {\n \t\t\t\t\tresult = {\n \t\t\t\t\t\ttype: \"disposed\",\n \t\t\t\t\t\tmoduleId: id\n \t\t\t\t\t};\n \t\t\t\t}\n \t\t\t\t/** @type {Error|false} */\n \t\t\t\tvar abortError = false;\n \t\t\t\tvar doApply = false;\n \t\t\t\tvar doDispose = false;\n \t\t\t\tvar chainInfo = \"\";\n \t\t\t\tif (result.chain) {\n \t\t\t\t\tchainInfo = \"\\nUpdate propagation: \" + result.chain.join(\" -> \");\n \t\t\t\t}\n \t\t\t\tswitch (result.type) {\n \t\t\t\t\tcase \"self-declined\":\n \t\t\t\t\t\tif (options.onDeclined) options.onDeclined(result);\n \t\t\t\t\t\tif (!options.ignoreDeclined)\n \t\t\t\t\t\t\tabortError = new Error(\n \t\t\t\t\t\t\t\t\"Aborted because of self decline: \" +\n \t\t\t\t\t\t\t\t\tresult.moduleId +\n \t\t\t\t\t\t\t\t\tchainInfo\n \t\t\t\t\t\t\t);\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase \"declined\":\n \t\t\t\t\t\tif (options.onDeclined) options.onDeclined(result);\n \t\t\t\t\t\tif (!options.ignoreDeclined)\n \t\t\t\t\t\t\tabortError = new Error(\n \t\t\t\t\t\t\t\t\"Aborted because of declined dependency: \" +\n \t\t\t\t\t\t\t\t\tresult.moduleId +\n \t\t\t\t\t\t\t\t\t\" in \" +\n \t\t\t\t\t\t\t\t\tresult.parentId +\n \t\t\t\t\t\t\t\t\tchainInfo\n \t\t\t\t\t\t\t);\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase \"unaccepted\":\n \t\t\t\t\t\tif (options.onUnaccepted) options.onUnaccepted(result);\n \t\t\t\t\t\tif (!options.ignoreUnaccepted)\n \t\t\t\t\t\t\tabortError = new Error(\n \t\t\t\t\t\t\t\t\"Aborted because \" + moduleId + \" is not accepted\" + chainInfo\n \t\t\t\t\t\t\t);\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase \"accepted\":\n \t\t\t\t\t\tif (options.onAccepted) options.onAccepted(result);\n \t\t\t\t\t\tdoApply = true;\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase \"disposed\":\n \t\t\t\t\t\tif (options.onDisposed) options.onDisposed(result);\n \t\t\t\t\t\tdoDispose = true;\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tdefault:\n \t\t\t\t\t\tthrow new Error(\"Unexception type \" + result.type);\n \t\t\t\t}\n \t\t\t\tif (abortError) {\n \t\t\t\t\thotSetStatus(\"abort\");\n \t\t\t\t\treturn Promise.reject(abortError);\n \t\t\t\t}\n \t\t\t\tif (doApply) {\n \t\t\t\t\tappliedUpdate[moduleId] = hotUpdate[moduleId];\n \t\t\t\t\taddAllToSet(outdatedModules, result.outdatedModules);\n \t\t\t\t\tfor (moduleId in result.outdatedDependencies) {\n \t\t\t\t\t\tif (\n \t\t\t\t\t\t\tObject.prototype.hasOwnProperty.call(\n \t\t\t\t\t\t\t\tresult.outdatedDependencies,\n \t\t\t\t\t\t\t\tmoduleId\n \t\t\t\t\t\t\t)\n \t\t\t\t\t\t) {\n \t\t\t\t\t\t\tif (!outdatedDependencies[moduleId])\n \t\t\t\t\t\t\t\toutdatedDependencies[moduleId] = [];\n \t\t\t\t\t\t\taddAllToSet(\n \t\t\t\t\t\t\t\toutdatedDependencies[moduleId],\n \t\t\t\t\t\t\t\tresult.outdatedDependencies[moduleId]\n \t\t\t\t\t\t\t);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tif (doDispose) {\n \t\t\t\t\taddAllToSet(outdatedModules, [result.moduleId]);\n \t\t\t\t\tappliedUpdate[moduleId] = warnUnexpectedRequire;\n \t\t\t\t}\n \t\t\t}\n \t\t}\n\n \t\t// Store self accepted outdated modules to require them later by the module system\n \t\tvar outdatedSelfAcceptedModules = [];\n \t\tfor (i = 0; i < outdatedModules.length; i++) {\n \t\t\tmoduleId = outdatedModules[i];\n \t\t\tif (\n \t\t\t\tinstalledModules[moduleId] &&\n \t\t\t\tinstalledModules[moduleId].hot._selfAccepted\n \t\t\t)\n \t\t\t\toutdatedSelfAcceptedModules.push({\n \t\t\t\t\tmodule: moduleId,\n \t\t\t\t\terrorHandler: installedModules[moduleId].hot._selfAccepted\n \t\t\t\t});\n \t\t}\n\n \t\t// Now in \"dispose\" phase\n \t\thotSetStatus(\"dispose\");\n \t\tObject.keys(hotAvailableFilesMap).forEach(function(chunkId) {\n \t\t\tif (hotAvailableFilesMap[chunkId] === false) {\n \t\t\t\thotDisposeChunk(chunkId);\n \t\t\t}\n \t\t});\n\n \t\tvar idx;\n \t\tvar queue = outdatedModules.slice();\n \t\twhile (queue.length > 0) {\n \t\t\tmoduleId = queue.pop();\n \t\t\tmodule = installedModules[moduleId];\n \t\t\tif (!module) continue;\n\n \t\t\tvar data = {};\n\n \t\t\t// Call dispose handlers\n \t\t\tvar disposeHandlers = module.hot._disposeHandlers;\n \t\t\tfor (j = 0; j < disposeHandlers.length; j++) {\n \t\t\t\tcb = disposeHandlers[j];\n \t\t\t\tcb(data);\n \t\t\t}\n \t\t\thotCurrentModuleData[moduleId] = data;\n\n \t\t\t// disable module (this disables requires from this module)\n \t\t\tmodule.hot.active = false;\n\n \t\t\t// remove module from cache\n \t\t\tdelete installedModules[moduleId];\n\n \t\t\t// when disposing there is no need to call dispose handler\n \t\t\tdelete outdatedDependencies[moduleId];\n\n \t\t\t// remove \"parents\" references from all children\n \t\t\tfor (j = 0; j < module.children.length; j++) {\n \t\t\t\tvar child = installedModules[module.children[j]];\n \t\t\t\tif (!child) continue;\n \t\t\t\tidx = child.parents.indexOf(moduleId);\n \t\t\t\tif (idx >= 0) {\n \t\t\t\t\tchild.parents.splice(idx, 1);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n\n \t\t// remove outdated dependency from module children\n \t\tvar dependency;\n \t\tvar moduleOutdatedDependencies;\n \t\tfor (moduleId in outdatedDependencies) {\n \t\t\tif (\n \t\t\t\tObject.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)\n \t\t\t) {\n \t\t\t\tmodule = installedModules[moduleId];\n \t\t\t\tif (module) {\n \t\t\t\t\tmoduleOutdatedDependencies = outdatedDependencies[moduleId];\n \t\t\t\t\tfor (j = 0; j < moduleOutdatedDependencies.length; j++) {\n \t\t\t\t\t\tdependency = moduleOutdatedDependencies[j];\n \t\t\t\t\t\tidx = module.children.indexOf(dependency);\n \t\t\t\t\t\tif (idx >= 0) module.children.splice(idx, 1);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}\n\n \t\t// Not in \"apply\" phase\n \t\thotSetStatus(\"apply\");\n\n \t\thotCurrentHash = hotUpdateNewHash;\n\n \t\t// insert new code\n \t\tfor (moduleId in appliedUpdate) {\n \t\t\tif (Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {\n \t\t\t\tmodules[moduleId] = appliedUpdate[moduleId];\n \t\t\t}\n \t\t}\n\n \t\t// call accept handlers\n \t\tvar error = null;\n \t\tfor (moduleId in outdatedDependencies) {\n \t\t\tif (\n \t\t\t\tObject.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)\n \t\t\t) {\n \t\t\t\tmodule = installedModules[moduleId];\n \t\t\t\tif (module) {\n \t\t\t\t\tmoduleOutdatedDependencies = outdatedDependencies[moduleId];\n \t\t\t\t\tvar callbacks = [];\n \t\t\t\t\tfor (i = 0; i < moduleOutdatedDependencies.length; i++) {\n \t\t\t\t\t\tdependency = moduleOutdatedDependencies[i];\n \t\t\t\t\t\tcb = module.hot._acceptedDependencies[dependency];\n \t\t\t\t\t\tif (cb) {\n \t\t\t\t\t\t\tif (callbacks.indexOf(cb) !== -1) continue;\n \t\t\t\t\t\t\tcallbacks.push(cb);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t\tfor (i = 0; i < callbacks.length; i++) {\n \t\t\t\t\t\tcb = callbacks[i];\n \t\t\t\t\t\ttry {\n \t\t\t\t\t\t\tcb(moduleOutdatedDependencies);\n \t\t\t\t\t\t} catch (err) {\n \t\t\t\t\t\t\tif (options.onErrored) {\n \t\t\t\t\t\t\t\toptions.onErrored({\n \t\t\t\t\t\t\t\t\ttype: \"accept-errored\",\n \t\t\t\t\t\t\t\t\tmoduleId: moduleId,\n \t\t\t\t\t\t\t\t\tdependencyId: moduleOutdatedDependencies[i],\n \t\t\t\t\t\t\t\t\terror: err\n \t\t\t\t\t\t\t\t});\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t\tif (!options.ignoreErrored) {\n \t\t\t\t\t\t\t\tif (!error) error = err;\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}\n\n \t\t// Load self accepted modules\n \t\tfor (i = 0; i < outdatedSelfAcceptedModules.length; i++) {\n \t\t\tvar item = outdatedSelfAcceptedModules[i];\n \t\t\tmoduleId = item.module;\n \t\t\thotCurrentParents = [moduleId];\n \t\t\ttry {\n \t\t\t\t__webpack_require__(moduleId);\n \t\t\t} catch (err) {\n \t\t\t\tif (typeof item.errorHandler === \"function\") {\n \t\t\t\t\ttry {\n \t\t\t\t\t\titem.errorHandler(err);\n \t\t\t\t\t} catch (err2) {\n \t\t\t\t\t\tif (options.onErrored) {\n \t\t\t\t\t\t\toptions.onErrored({\n \t\t\t\t\t\t\t\ttype: \"self-accept-error-handler-errored\",\n \t\t\t\t\t\t\t\tmoduleId: moduleId,\n \t\t\t\t\t\t\t\terror: err2,\n \t\t\t\t\t\t\t\toriginalError: err\n \t\t\t\t\t\t\t});\n \t\t\t\t\t\t}\n \t\t\t\t\t\tif (!options.ignoreErrored) {\n \t\t\t\t\t\t\tif (!error) error = err2;\n \t\t\t\t\t\t}\n \t\t\t\t\t\tif (!error) error = err;\n \t\t\t\t\t}\n \t\t\t\t} else {\n \t\t\t\t\tif (options.onErrored) {\n \t\t\t\t\t\toptions.onErrored({\n \t\t\t\t\t\t\ttype: \"self-accept-errored\",\n \t\t\t\t\t\t\tmoduleId: moduleId,\n \t\t\t\t\t\t\terror: err\n \t\t\t\t\t\t});\n \t\t\t\t\t}\n \t\t\t\t\tif (!options.ignoreErrored) {\n \t\t\t\t\t\tif (!error) error = err;\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}\n\n \t\t// handle errors in accept handlers and self accepted module load\n \t\tif (error) {\n \t\t\thotSetStatus(\"fail\");\n \t\t\treturn Promise.reject(error);\n \t\t}\n\n \t\thotSetStatus(\"idle\");\n \t\treturn new Promise(function(resolve) {\n \t\t\tresolve(outdatedModules);\n \t\t});\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {},\n \t\t\thot: hotCreateModule(moduleId),\n \t\t\tparents: (hotCurrentParentsTemp = hotCurrentParents, hotCurrentParents = [], hotCurrentParentsTemp),\n \t\t\tchildren: []\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"http://localhost:3001/\";\n\n \t// __webpack_hash__\n \t__webpack_require__.h = function() { return hotCurrentHash; };\n\n\n \t// Load entry module and return exports\n \treturn hotCreateRequire(0)(__webpack_require__.s = 0);\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\nmodule.exports = function(updatedModules, renewedModules) {\n\tvar unacceptedModules = updatedModules.filter(function(moduleId) {\n\t\treturn renewedModules && renewedModules.indexOf(moduleId) < 0;\n\t});\n\tvar log = require(\"./log\");\n\n\tif (unacceptedModules.length > 0) {\n\t\tlog(\n\t\t\t\"warning\",\n\t\t\t\"[HMR] The following modules couldn't be hot updated: (They would need a full reload!)\"\n\t\t);\n\t\tunacceptedModules.forEach(function(moduleId) {\n\t\t\tlog(\"warning\", \"[HMR]  - \" + moduleId);\n\t\t});\n\t}\n\n\tif (!renewedModules || renewedModules.length === 0) {\n\t\tlog(\"info\", \"[HMR] Nothing hot updated.\");\n\t} else {\n\t\tlog(\"info\", \"[HMR] Updated modules:\");\n\t\trenewedModules.forEach(function(moduleId) {\n\t\t\tif (typeof moduleId === \"string\" && moduleId.indexOf(\"!\") !== -1) {\n\t\t\t\tvar parts = moduleId.split(\"!\");\n\t\t\t\tlog.groupCollapsed(\"info\", \"[HMR]  - \" + parts.pop());\n\t\t\t\tlog(\"info\", \"[HMR]  - \" + moduleId);\n\t\t\t\tlog.groupEnd(\"info\");\n\t\t\t} else {\n\t\t\t\tlog(\"info\", \"[HMR]  - \" + moduleId);\n\t\t\t}\n\t\t});\n\t\tvar numberIds = renewedModules.every(function(moduleId) {\n\t\t\treturn typeof moduleId === \"number\";\n\t\t});\n\t\tif (numberIds)\n\t\t\tlog(\n\t\t\t\t\"info\",\n\t\t\t\t\"[HMR] Consider using the NamedModulesPlugin for module names.\"\n\t\t\t);\n\t}\n};\n","var logLevel = \"info\";\n\nfunction dummy() {}\n\nfunction shouldLog(level) {\n\tvar shouldLog =\n\t\t(logLevel === \"info\" && level === \"info\") ||\n\t\t([\"info\", \"warning\"].indexOf(logLevel) >= 0 && level === \"warning\") ||\n\t\t([\"info\", \"warning\", \"error\"].indexOf(logLevel) >= 0 && level === \"error\");\n\treturn shouldLog;\n}\n\nfunction logGroup(logFn) {\n\treturn function(level, msg) {\n\t\tif (shouldLog(level)) {\n\t\t\tlogFn(msg);\n\t\t}\n\t};\n}\n\nmodule.exports = function(level, msg) {\n\tif (shouldLog(level)) {\n\t\tif (level === \"info\") {\n\t\t\tconsole.log(msg);\n\t\t} else if (level === \"warning\") {\n\t\t\tconsole.warn(msg);\n\t\t} else if (level === \"error\") {\n\t\t\tconsole.error(msg);\n\t\t}\n\t}\n};\n\n/* eslint-disable node/no-unsupported-features/node-builtins */\nvar group = console.group || dummy;\nvar groupCollapsed = console.groupCollapsed || dummy;\nvar groupEnd = console.groupEnd || dummy;\n/* eslint-enable node/no-unsupported-features/node-builtins */\n\nmodule.exports.group = logGroup(group);\n\nmodule.exports.groupCollapsed = logGroup(groupCollapsed);\n\nmodule.exports.groupEnd = logGroup(groupEnd);\n\nmodule.exports.setLogLevel = function(level) {\n\tlogLevel = level;\n};\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n/*globals __resourceQuery */\nif (module.hot) {\n\tvar hotPollInterval = +__resourceQuery.substr(1) || 10 * 60 * 1000;\n\tvar log = require(\"./log\");\n\n\tvar checkForUpdate = function checkForUpdate(fromUpdate) {\n\t\tif (module.hot.status() === \"idle\") {\n\t\t\tmodule.hot\n\t\t\t\t.check(true)\n\t\t\t\t.then(function(updatedModules) {\n\t\t\t\t\tif (!updatedModules) {\n\t\t\t\t\t\tif (fromUpdate) log(\"info\", \"[HMR] Update applied.\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\trequire(\"./log-apply-result\")(updatedModules, updatedModules);\n\t\t\t\t\tcheckForUpdate(true);\n\t\t\t\t})\n\t\t\t\t.catch(function(err) {\n\t\t\t\t\tvar status = module.hot.status();\n\t\t\t\t\tif ([\"abort\", \"fail\"].indexOf(status) >= 0) {\n\t\t\t\t\t\tlog(\"warning\", \"[HMR] Cannot apply update.\");\n\t\t\t\t\t\tlog(\"warning\", \"[HMR] \" + (err.stack || err.message));\n\t\t\t\t\t\tlog(\"warning\", \"[HMR] You need to restart the application!\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlog(\n\t\t\t\t\t\t\t\"warning\",\n\t\t\t\t\t\t\t\"[HMR] Update failed: \" + (err.stack || err.message)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\t};\n\tsetInterval(checkForUpdate, hotPollInterval);\n} else {\n\tthrow new Error(\"[HMR] Hot Module Replacement is disabled.\");\n}\n","/**\n * Actions actions.\n * @module actions/actions/actions\n */\n\nimport { LIST_ACTIONS } from '../../constants/ActionTypes';\n\n/**\n * List actions.\n * @function listActions\n * @param {string} url Content url.\n * @returns {Object} List actions action.\n */\nexport function listActions(url) {\n  return {\n    type: LIST_ACTIONS,\n    request: {\n      op: 'get',\n      path: `${url}/@actions`,\n    },\n  };\n}\n","/**\n * Breadcrumbs actions.\n * @module actions/breadcrumbs/breadcrumbs\n */\n\nimport { GET_BREADCRUMBS } from '../../constants/ActionTypes';\n\n/**\n * Get breadcrumbs.\n * @function getBreadcrumbs\n * @param {string} url Content url.\n * @returns {Object} Get breadcrumbs action.\n */\nexport function getBreadcrumbs(url) {\n  return {\n    type: GET_BREADCRUMBS,\n    request: {\n      op: 'get',\n      path: `${url}/@breadcrumbs`,\n    },\n  };\n}\n","/**\n * Clipboard actions.\n * @module actions/clipboard/clipboard\n */\n\nimport {\n  COPY_CONTENT,\n  MOVE_CONTENT,\n  COPY,\n  CUT,\n} from '../../constants/ActionTypes';\n\n/**\n * Copy content function.\n * @function copyContent\n * @param {array} source Source urls.\n * @param {string} target Target url.\n * @returns {Object} Copy content action.\n */\nexport function copyContent(source, target) {\n  return {\n    type: COPY_CONTENT,\n    request: {\n      op: 'post',\n      path: `${target}/@copy`,\n      data: { source },\n    },\n  };\n}\n\n/**\n * Move content function.\n * @function moveContent\n * @param {array} source Source urls.\n * @param {string} target Target url.\n * @returns {Object} Move content action.\n */\nexport function moveContent(source, target) {\n  return {\n    type: MOVE_CONTENT,\n    request: {\n      op: 'post',\n      path: `${target}/@move`,\n      data: { source },\n    },\n  };\n}\n\n/**\n * Copy function.\n * @function copy\n * @param {array} urls Source urls.\n * @returns {Object} Copy action.\n */\nexport function copy(urls) {\n  return {\n    type: COPY,\n    source: urls,\n  };\n}\n\n/**\n * Cut function.\n * @function cut\n * @param {array} urls Source urls.\n * @returns {Object} Cut action.\n */\nexport function cut(urls) {\n  return {\n    type: CUT,\n    source: urls,\n  };\n}\n","/**\n * Comments actions.\n * @module actions/comments/comments\n */\n\nimport {\n  ADD_COMMENT,\n  DELETE_COMMENT,\n  UPDATE_COMMENT,\n  LIST_COMMENTS,\n} from '../../constants/ActionTypes';\n\n/**\n * Add comment function.\n * @function addComment\n * @param {string} url Content url.\n * @param {string} text Body of the comment.\n * @returns {Object} Add comment action.\n */\nexport function addComment(url, text) {\n  return {\n    type: ADD_COMMENT,\n    request: {\n      op: 'post',\n      path: `${url}/@comments`,\n      data: { text },\n    },\n  };\n}\n\n/**\n * List comments function\n * @function listComments\n * @param {string} url Content url\n * @returns {Object} List comment action\n */\nexport function listComments(url) {\n  return {\n    type: LIST_COMMENTS,\n    request: {\n      op: 'get',\n      path: `${url}/@comments`,\n    },\n  };\n}\n\n/**\n * Delete comment function.\n * @function deleteComment\n * @param {string} url Content url.\n * @returns {Object} Delete comment action.\n */\nexport function deleteComment(url) {\n  return {\n    type: DELETE_COMMENT,\n    request: {\n      op: 'del',\n      path: url,\n    },\n  };\n}\n\n/**\n * Update comment function.\n * @function updateComment\n * @param {string} url Content url(s).\n * @param {string} text Body of the comment.\n * @returns {Object} Update content action.\n */\nexport function updateComment(url, text) {\n  return {\n    type: UPDATE_COMMENT,\n    request: {\n      op: 'patch',\n      path: url,\n      data: { text },\n    },\n  };\n}\n","/**\n * Content actions.\n * @module actions/content/content\n */\n\nimport {\n  CREATE_CONTENT,\n  DELETE_CONTENT,\n  UPDATE_CONTENT,\n  GET_CONTENT,\n  ORDER_CONTENT,\n} from '../../constants/ActionTypes';\nimport { nestContent } from '../../helpers';\n\n/**\n * Create content function.\n * @function createContent\n * @param {string} url Parent url.\n * @param {Object|Array} content Content data.\n * @returns {Object} Create content action.\n */\nexport function createContent(url, content) {\n  return {\n    type: CREATE_CONTENT,\n    request: Array.isArray(content)\n      ? content.map(item => ({ op: 'post', path: url, data: item }))\n      : { op: 'post', path: url, data: nestContent(content) },\n  };\n}\n\n/**\n * Delete content function.\n * @function deleteContent\n * @param {string|Array} urls Content url(s).\n * @returns {Object} Delete content action.\n */\nexport function deleteContent(urls) {\n  return {\n    type: DELETE_CONTENT,\n    request:\n      typeof urls === 'string'\n        ? { op: 'del', path: urls }\n        : urls.map(url => ({ op: 'del', path: url })),\n  };\n}\n\n/**\n * Update content function.\n * @function updateContent\n * @param {string|Array} urls Content url(s).\n * @param {Object|Array} content Content data.\n * @returns {Object} Update content action.\n */\nexport function updateContent(urls, content) {\n  return {\n    type: UPDATE_CONTENT,\n    request:\n      typeof urls === 'string'\n        ? { op: 'patch', path: urls, data: nestContent(content) }\n        : urls.map((url, index) => ({\n            op: 'patch',\n            path: url,\n            data: nestContent(content[index]),\n          })),\n  };\n}\n\n/**\n * Order content function\n * @function orderContent\n * @param {string} parent Parent url\n * @param {string} url Content url\n * @param {string|number} delta Order delta\n * @param {Array} subset Subset ids\n * @returns {Object} Order content action\n */\nexport function orderContent(parent, url, delta, subset) {\n  return {\n    type: ORDER_CONTENT,\n    request: {\n      op: 'patch',\n      path: parent,\n      data: { ordering: { obj_id: url, delta, subset_ids: subset } },\n    },\n  };\n}\n\n/**\n * Sort content function\n * @function sortContent\n * @param {string} url Content url\n * @param {string} on Sort on index\n * @param {string} order Sort order\n * @returns {Object} Sort content action\n */\nexport function sortContent(url, on, order) {\n  return {\n    type: UPDATE_CONTENT,\n    request: {\n      op: 'patch',\n      path: url,\n      data: { sort: { on, order } },\n    },\n  };\n}\n\n/**\n * Get content function\n * @function getContent\n * @param {string} url Content url\n * @param {string} version Version id\n * @returns {Object} Get content action\n */\nexport function getContent(url, version) {\n  return {\n    type: GET_CONTENT,\n    request: {\n      op: 'get',\n      path: `${url}${version ? `/@history/${version}` : ''}?fullobjects`,\n    },\n  };\n}\n","/**\n * Controlpanels actions.\n * @module actions/controlpanels/controlpanels\n */\n\nimport {\n  GET_CONTROLPANEL,\n  LIST_CONTROLPANELS,\n  UPDATE_CONTROLPANEL,\n} from '../../constants/ActionTypes';\n\n/**\n * Get controlpanel function.\n * @function getControlpanel\n * @param {id} id Controlpanel id.\n * @returns {Object} Get controlpanel action.\n */\nexport function getControlpanel(id) {\n  return {\n    type: GET_CONTROLPANEL,\n    request: {\n      op: 'get',\n      path: `/@controlpanels/${id}`,\n    },\n  };\n}\n\n/**\n * List controlpanels function.\n * @function listControlpanels\n * @returns {Object} List controlpanels action.\n */\nexport function listControlpanels() {\n  return {\n    type: LIST_CONTROLPANELS,\n    request: {\n      op: 'get',\n      path: '/@controlpanels',\n    },\n  };\n}\n\n/**\n * Update controlpanel function.\n * @function updateControlpanel\n * @param {string} url Controlpanel url.\n * @param {Object} data Controlpanel data.\n * @returns {Object} Update controlpanel action.\n */\nexport function updateControlpanel(url, data) {\n  return {\n    type: UPDATE_CONTROLPANEL,\n    request: {\n      op: 'patch',\n      path: url,\n      data,\n    },\n  };\n}\n","/**\n * Diff actions.\n * @module actions/diff/diff\n */\n\nimport { GET_DIFF } from '../../constants/ActionTypes';\n\n/**\n * Get diff.\n * @function getDiff\n * @param {string} url Content url.\n * @param {string} one First version id\n * @param {string} two Second version id\n * @returns {Object} Get diff action.\n */\nexport function getDiff(url, one, two) {\n  return {\n    type: GET_DIFF,\n    request: [\n      {\n        op: 'get',\n        path: `${url}/@history/${one}`,\n      },\n      {\n        op: 'get',\n        path: `${url}/@history/${two}`,\n      },\n    ],\n  };\n}\n","/**\n * emailNotification actions.\n * @module actions/emailNotification/emailNotification\n */\n\nimport { EMAIL_NOTIFICATION } from '../../constants/ActionTypes';\n\n/**\n * Email notification function\n * @function emailNotification\n * @param {string} from User id\n * @param {string} message Old password.\n * @param {string} name New password.\n * @param {string} subject New password.\n * @returns {Object} Edit password action.\n */\nexport function emailNotification(from, message, name, subject) {\n  return {\n    type: EMAIL_NOTIFICATION,\n    request: {\n      op: 'post',\n      path: '/@email-notification',\n      data: {\n        from,\n        message,\n        name,\n        subject,\n      },\n    },\n  };\n}\n","/**\n * Groups actions.\n * @module actions/groups/groups\n */\n\nimport {\n  CREATE_GROUP,\n  DELETE_GROUP,\n  GET_GROUP,\n  LIST_GROUPS,\n  UPDATE_GROUP,\n} from '../../constants/ActionTypes';\n\n/**\n * Create group function.\n * @function createGroup\n * @param {Object} data Group data.\n * @returns {Object} Create group action.\n */\nexport function createGroup(data) {\n  return {\n    type: CREATE_GROUP,\n    request: {\n      op: 'post',\n      path: '/@groups',\n      data,\n    },\n  };\n}\n\n/**\n * Delete group function.\n * @function deleteGroup\n * @param {string} id Group id\n * @returns {Object} Delete group action.\n */\nexport function deleteGroup(id) {\n  return {\n    type: DELETE_GROUP,\n    request: {\n      op: 'del',\n      path: `/@groups/${id}`,\n    },\n  };\n}\n\n/**\n * Get group function\n * @function getGroup\n * @param {string} id Group id\n * @returns {Object} Get group action\n */\nexport function getGroup(id) {\n  return {\n    type: GET_GROUP,\n    request: {\n      op: 'get',\n      path: `/@groups/${id}`,\n    },\n  };\n}\n\n/**\n * List groups function\n * @function listGroups\n * @returns {Object} List groups action\n */\nexport function listGroups() {\n  return {\n    type: LIST_GROUPS,\n    request: {\n      op: 'get',\n      path: '/@groups',\n    },\n  };\n}\n\n/**\n * Update group function.\n * @function updateGroup\n * @param {string} id Group id\n * @param {Object} data Group data.\n * @returns {Object} Update group action.\n */\nexport function updateGroup(id, data) {\n  return {\n    type: UPDATE_GROUP,\n    request: {\n      op: 'patch',\n      path: `/@groups/${id}`,\n      data,\n    },\n  };\n}\n","/**\n * History actions.\n * @module actions/history/history\n */\n\nimport { GET_HISTORY, REVERT_HISTORY } from '../../constants/ActionTypes';\n\n/**\n * Get history function.\n * @function getHistory\n * @param {string} url Content url.\n * @returns {Object} Get history action.\n */\nexport function getHistory(url) {\n  return {\n    type: GET_HISTORY,\n    request: {\n      op: 'get',\n      path: `${url}/@history`,\n    },\n  };\n}\n\n/**\n * Revert history function.\n * @function revertHistory\n * @param {string} url Content url.\n * @param {number} version Revert version.\n * @returns {Object} Revet history action.\n */\nexport function revertHistory(url, version) {\n  return {\n    type: REVERT_HISTORY,\n    request: {\n      op: 'patch',\n      path: `${url}/@history`,\n      data: { version },\n    },\n  };\n}\n","/**\n * Point of contact for action modules.\n * @module actions\n * @example import { getSchema } from 'actions';\n */\n\nexport { listActions } from './actions/actions';\nexport { getBreadcrumbs } from './breadcrumbs/breadcrumbs';\nexport { copy, cut, copyContent, moveContent } from './clipboard/clipboard';\nexport {\n  addComment,\n  deleteComment,\n  listComments,\n  updateComment,\n} from './comments/comments';\nexport {\n  createContent,\n  deleteContent,\n  updateContent,\n  getContent,\n  orderContent,\n  sortContent,\n} from './content/content';\nexport {\n  getControlpanel,\n  listControlpanels,\n  updateControlpanel,\n} from './controlpanels/controlpanels';\nexport { getDiff } from './diff/diff';\nexport { emailNotification } from './emailNotification/emailNotification';\nexport {\n  createGroup,\n  deleteGroup,\n  getGroup,\n  listGroups,\n  updateGroup,\n} from './groups/groups';\nexport { getHistory, revertHistory } from './history/history';\nexport { addMessage, removeMessage, purgeMessages } from './messages/messages';\nexport { getNavigation } from './navigation/navigation';\nexport { listRoles } from './roles/roles';\nexport { getSchema } from './schema/schema';\nexport { resetSearchContent, searchContent } from './search/search';\nexport { updateSharing, getSharing } from './sharing/sharing';\nexport { getTiles } from './tiles/tiles';\nexport { getTypes } from './types/types';\nexport {\n  createUser,\n  deleteUser,\n  getUser,\n  listUsers,\n  setInitialPassword,\n  resetPassword,\n  updatePassword,\n  updateUser,\n} from './users/users';\nexport { login, loginRenew, logout } from './userSession/userSession';\nexport { getVocabulary } from './vocabularies/vocabularies';\nexport { getWorkflow, transitionWorkflow } from './workflow/workflow';\n","/**\n * Message actions.\n * @module actions/message/message\n */\nimport { v4 as uuid } from 'uuid';\n\nimport {\n  ADD_MESSAGE,\n  REMOVE_MESSAGE,\n  PURGE_MESSAGES,\n} from '../../constants/ActionTypes';\n\n/**\n * Add message function\n * @function addMessage\n * @param {string} title Message header\n * @param {string} body Message body.\n * @param {string} level Message level.\n * @returns {Object} Add message action.\n */\nexport function addMessage(title, body, level) {\n  return {\n    type: ADD_MESSAGE,\n    id: uuid(),\n    title,\n    body,\n    level,\n    show: true,\n  };\n}\n\n/**\n * Remove message function\n * @function removeMessage\n * @param {number} index Message index\n * @returns {Object} Add message action.\n */\nexport function removeMessage(index) {\n  return {\n    type: REMOVE_MESSAGE,\n    index,\n  };\n}\n\n/**\n * Purge all messages function\n * @function purgeMessages\n * @returns {Object} Add message action.\n */\nexport function purgeMessages() {\n  return {\n    type: PURGE_MESSAGES,\n  };\n}\n","/**\n * Navigation actions.\n * @module actions/navigation/navigation\n */\n\nimport { GET_NAVIGATION } from '../../constants/ActionTypes';\n\n/**\n * Get navigation.\n * @function getNavigation\n * @param {string} url Content url.\n * @returns {Object} Get navigation action.\n */\nexport function getNavigation(url) {\n  return {\n    type: GET_NAVIGATION,\n    request: {\n      op: 'get',\n      path: `${url}/@navigation`,\n    },\n  };\n}\n","/**\n * Roles actions.\n * @module actions/roles/roles\n */\n\nimport { LIST_ROLES } from '../../constants/ActionTypes';\n\n/**\n * List roles.\n * @function listRoles\n * @returns {Object} List roles action.\n */\nexport function listRoles() {\n  return {\n    type: LIST_ROLES,\n    request: {\n      op: 'get',\n      path: '/@roles',\n    },\n  };\n}\n","/**\n * Schema actions.\n * @module actions/schema/schema\n */\n\nimport { GET_SCHEMA } from '../../constants/ActionTypes';\n\n/**\n * Get schema function.\n * @function getSchema\n * @param {string} type Content type.\n * @returns {Object} Get schema action.\n */\nexport function getSchema(type) {\n  return {\n    type: GET_SCHEMA,\n    request: {\n      op: 'get',\n      path: `/@types/${type}`,\n    },\n  };\n}\n","/**\n * Search actions.\n * @module actions/search/search\n */\n\nimport { join, map, toPairs, pickBy } from 'lodash';\n\nimport {\n  RESET_SEARCH_CONTENT,\n  SEARCH_CONTENT,\n} from '../../constants/ActionTypes';\n\n/**\n * Search content function.\n * @function searchContent\n * @param {string} url Url to use as base.\n * @param {Object} options Search options.\n * @returns {Object} Search content action.\n */\nexport function searchContent(url, options) {\n  const querystring = options\n    ? join(map(toPairs(pickBy(options)), item => join(item, '=')), '&')\n    : '';\n  return {\n    type: SEARCH_CONTENT,\n    request: {\n      op: 'get',\n      path: `${url}/@search${querystring ? `?${querystring}` : ''}`,\n    },\n  };\n}\n\n/**\n * Reset search content function.\n * @function resetSearchContent\n * @returns {Object} Search content action.\n */\nexport function resetSearchContent() {\n  return {\n    type: RESET_SEARCH_CONTENT,\n  };\n}\n","/**\n * Sharing actions.\n * @module actions/sharing/sharing\n */\n\nimport { UPDATE_SHARING, GET_SHARING } from '../../constants/ActionTypes';\n\n/**\n * Update sharing function.\n * @function updateSharing\n * @param {string} url Content url.\n * @param {Object} sharing Sharing data.\n * @returns {Object} Update sharing action.\n */\nexport function updateSharing(url, sharing) {\n  return {\n    type: UPDATE_SHARING,\n    request: {\n      op: 'post',\n      path: `${url}/@sharing`,\n      data: sharing,\n    },\n  };\n}\n\n/**\n * Get sharing function.\n * @function getSharing\n * @param {string} url Content url.\n * @param {string} search Search value.\n * @returns {Object} Get sharing action.\n */\nexport function getSharing(url, search = '') {\n  return {\n    type: GET_SHARING,\n    request: {\n      op: 'get',\n      path: `${url}/@sharing${search !== '' ? `?search=${search}` : ''}`,\n    },\n  };\n}\n","/**\n * Tiles actions.\n * @module actions/tiles/tiles\n */\n\nimport { GET_TILES } from '../../constants/ActionTypes';\n\n/**\n * Get tiles.\n * @function getTiles\n * @returns {Object} Get tiles action.\n */\nexport function getTiles() {\n  return {\n    type: GET_TILES,\n    request: {\n      op: 'get',\n      path: '/@tiles',\n    },\n  };\n}\n","/**\n * Types actions.\n * @module actions/types/types\n */\n\nimport { GET_TYPES } from '../../constants/ActionTypes';\n\n/**\n * Get types function.\n * @function getTypes\n * @param {string} url Content url.\n * @returns {Object} Get types action.\n */\nexport function getTypes(url) {\n  return {\n    type: GET_TYPES,\n    request: {\n      op: 'get',\n      path: `${url}/@types`,\n    },\n  };\n}\n","/**\n * Search actions.\n * @module actions/search/search\n */\n\nimport { LOGIN, LOGIN_RENEW, LOGOUT } from '../../constants/ActionTypes';\n\n/**\n * Login function.\n * @function login\n * @param {string} username Username.\n * @param {string} password Password.\n * @returns {Object} Login action.\n */\nexport function login(username, password) {\n  return {\n    type: LOGIN,\n    request: {\n      op: 'post',\n      path: '@login',\n      data: { login: username, password },\n    },\n  };\n}\n\n/**\n * Login renew function.\n * @function loginRenew\n * @returns {Object} Login renew action.\n */\nexport function loginRenew() {\n  return {\n    type: LOGIN_RENEW,\n    request: {\n      op: 'post',\n      path: '@login-renew',\n    },\n  };\n}\n\n/**\n * Logout function.\n * @function logout\n * @returns {Object} Logout action.\n */\nexport function logout() {\n  return {\n    type: LOGOUT,\n  };\n}\n","/**\n * Users actions.\n * @module actions/users/users\n */\n\nimport {\n  CREATE_USER,\n  DELETE_USER,\n  GET_USER,\n  LIST_USERS,\n  UPDATE_USER,\n  UPDATE_PASSWORD,\n  INITIAL_PASSWORD,\n  RESET_PASSWORD,\n} from '../../constants/ActionTypes';\n\n/**\n * Create user function.\n * @function createUser\n * @param {Object|Array} content User data.\n * @returns {Object} Create user action.\n */\nexport function createUser(content) {\n  return {\n    type: CREATE_USER,\n    request: {\n      op: 'post',\n      path: '/@users',\n      data: content,\n    },\n  };\n}\n\n/**\n * Delete user function.\n * @function deleteUser\n * @param {string} id User id\n * @returns {Object} Delete user action.\n */\nexport function deleteUser(id) {\n  return {\n    type: DELETE_USER,\n    request: {\n      op: 'del',\n      path: `/@users/${id}`,\n    },\n  };\n}\n\n/**\n * Get user function\n * @function getUser\n * @param {string} id User id\n * @returns {Object} Get user action\n */\nexport function getUser(id) {\n  return {\n    type: GET_USER,\n    request: {\n      op: 'get',\n      path: `/@users/${id}`,\n    },\n  };\n}\n\n/**\n * List users function\n * @function listUsers\n * @param {string} query Query\n * @returns {Object} List users action\n */\nexport function listUsers(query) {\n  return {\n    type: LIST_USERS,\n    request: query\n      ? { op: 'get', path: `/@users?query=${query}` }\n      : { op: 'get', path: '/@users' },\n  };\n}\n\n/**\n * Update user function\n * @function updateUser\n * @param {string} id User id\n * @param {Object} user User data.\n * @returns {Object} Update user action.\n */\nexport function updateUser(id, user) {\n  return {\n    type: UPDATE_USER,\n    request: { op: 'patch', path: `/@users/${id}`, data: user },\n  };\n}\n\n/**\n * Update password function\n * @function updatePassword\n * @param {string} id User id\n * @param {string} oldPassword Old password.\n * @param {string} newPassword New password.\n * @returns {Object} Update password action.\n */\nexport function updatePassword(id, oldPassword, newPassword) {\n  return {\n    type: UPDATE_PASSWORD,\n    request: {\n      op: 'post',\n      path: `/@users/${id}/reset-password`,\n      data: {\n        old_password: oldPassword,\n        new_password: newPassword,\n      },\n    },\n  };\n}\n\n/**\n * Set initial password function\n * @function setInitialPassword\n * @param {string} id User id\n * @param {string} token One time user token.\n * @param {string} newPassword New password.\n * @returns {Object} Set initial password action.\n */\nexport function setInitialPassword(id, token, newPassword) {\n  return {\n    type: INITIAL_PASSWORD,\n    request: {\n      op: 'post',\n      path: `/@users/${id}/reset-password`,\n      data: {\n        reset_token: token,\n        new_password: newPassword,\n      },\n    },\n  };\n}\n\n/**\n * Reset password function\n * @function resetPassword\n * @param {string} id User id\n * @returns {Object} Reset password action.\n */\nexport function resetPassword(id) {\n  return {\n    type: RESET_PASSWORD,\n    request: {\n      op: 'post',\n      path: `/@users/${id}/reset-password`,\n    },\n  };\n}\n","/**\n * Vocabularies actions.\n * @module actions/vocabularies/vocabularies\n */\n\nimport { GET_VOCABULARY } from '../../constants/ActionTypes';\n\n/**\n * Get vocabulary.\n * @function getVocabulary\n * @param {string} vocabulary Vocabulary to get.\n * @returns {Object} Get vocabulary action.\n */\nexport function getVocabulary(vocabulary) {\n  return {\n    type: GET_VOCABULARY,\n    vocabulary,\n    request: {\n      op: 'get',\n      path: `/@vocabularies/${vocabulary}`,\n    },\n  };\n}\n","/**\n * Workflow actions.\n * @module actions/workflow/workflow\n */\n\nimport {\n  GET_WORKFLOW,\n  GET_WORKFLOW_MULTIPLE,\n  TRANSITION_WORKFLOW,\n} from '../../constants/ActionTypes';\n\n/**\n * Get workflow function.\n * @function getWorkflow\n * @param {string|Array} urls Workflow url(s).\n * @returns {Object} Get workflow action.\n */\nexport function getWorkflow(urls) {\n  return {\n    type: typeof urls === 'string' ? GET_WORKFLOW : GET_WORKFLOW_MULTIPLE,\n    request:\n      typeof urls === 'string'\n        ? { op: 'get', path: `${urls}/@workflow` }\n        : urls.map(url => ({ op: 'get', path: `${url}/@workflow` })),\n  };\n}\n\n/**\n * Transition workflow.\n * @function transitionWorkflow\n * @param {string} urls Content url(s).\n * @returns {Object} Transition workflow action.\n */\nexport function transitionWorkflow(urls) {\n  return {\n    type: TRANSITION_WORKFLOW,\n    request:\n      typeof urls === 'string'\n        ? { op: 'post', path: urls }\n        : urls.map(url => ({ op: 'post', path: url })),\n  };\n}\n","/**\n * Point of contact for component modules.\n * @module components\n * @example import { Field } from 'components';\n */\n\nexport Column from './mosaic/Column/Column';\nexport ColumnResize from './mosaic/Column/ColumnResize';\nexport ColumnResizeHelper from './mosaic/Column/ColumnResizeHelper';\nexport Grid from './mosaic/Grid/Grid';\nexport Layout from './mosaic/Layout/Layout';\nexport Row from './mosaic/Row/Row';\nexport Tile from './mosaic/Tile/Tile';\nexport Editbar from './mosaic/Editbar/Editbar';\n\nexport Anontools from './theme/Anontools/Anontools';\nexport Breadcrumbs from './theme/Breadcrumbs/Breadcrumbs';\nexport Footer from './theme/Footer/Footer';\nexport Header from './theme/Header/Header';\nexport Icon from './theme/Icon/Icon';\nexport Logo from './theme/Logo/Logo';\nexport Navigation from './theme/Navigation/Navigation';\nexport SearchWidget from './theme/SearchWidget/SearchWidget';\nexport Title from './theme/Title/Title';\nexport App from './theme/App/App';\nexport DocumentView from './theme/View/DocumentView';\nexport FileView from './theme/View/FileView';\nexport ImageView from './theme/View/ImageView';\nexport NewsItemView from './theme/View/NewsItemView';\nexport ListingView from './theme/View/ListingView';\nexport Login from './theme/Login/Login';\nexport Logout from './theme/Logout/Logout';\nexport NotFound from './theme/NotFound/NotFound';\nexport Pagination from './theme/Pagination/Pagination';\nexport SummaryView from './theme/View/SummaryView';\nexport Search from './theme/Search/Search';\nexport SearchTags from './theme/Search/SearchTags';\nexport TabularView from './theme/View/TabularView';\nexport View from './theme/View/View';\nexport Comments from './theme/Comments/Comments';\nexport CommentEditModal from './theme/Comments/CommentEditModal';\nexport SocialSharing from './theme/SocialSharing/SocialSharing';\nexport Tags from './theme/Tags/Tags';\nexport Register from './theme/Register/Register';\nexport PasswordReset from './theme/PasswordReset/PasswordReset';\nexport RequestPasswordReset from './theme/PasswordReset/RequestPasswordReset';\n\nexport Actions from './manage/Actions/Actions';\nexport Add from './manage/Add/Add';\nexport Contents from './manage/Contents/Contents';\nexport ContentsIndexHeader from './manage/Contents/ContentsIndexHeader';\nexport ContentsItem from './manage/Contents/ContentsItem';\nexport ContentsUploadModal from './manage/Contents/ContentsUploadModal';\nexport ContentsPropertiesModal from './manage/Contents/ContentsPropertiesModal';\nexport ContentsRenameModal from './manage/Contents/ContentsRenameModal';\nexport ContentsWorkflowModal from './manage/Contents/ContentsWorkflowModal';\nexport ContentsTagsModal from './manage/Contents/ContentsTagsModal';\nexport Controlpanel from './manage/Controlpanels/Controlpanel';\nexport Controlpanels from './manage/Controlpanels/Controlpanels';\nexport ModerateComments from './manage/Controlpanels/ModerateComments';\nexport UsersControlpanel from './manage/Controlpanels/UsersControlpanel';\nexport Delete from './manage/Delete/Delete';\nexport Diff from './manage/Diff/Diff';\nexport DiffField from './manage/Diff/DiffField';\nexport Display from './manage/Display/Display';\nexport Edit from './manage/Edit/Edit';\nexport Form from './manage/Form/Form';\nexport Field from './manage/Form/Field';\nexport ModalForm from './manage/Form/ModalForm';\nexport History from './manage/History/History';\nexport Messages from './manage/Messages/Messages';\nexport ChangePassword from './manage/Preferences/ChangePassword';\nexport PersonalPreferences from './manage/Preferences/PersonalPreferences';\nexport PersonalInformation from './manage/Preferences/PersonalInformation';\nexport ArrayWidget from './manage/Widgets/ArrayWidget';\nexport CheckboxWidget from './manage/Widgets/CheckboxWidget';\nexport DatetimeWidget from './manage/Widgets/DatetimeWidget';\nexport FileWidget from './manage/Widgets/FileWidget';\nexport PasswordWidget from './manage/Widgets/PasswordWidget';\nexport SchemaWidget from './manage/Widgets/SchemaWidget';\nexport SchemaWidgetFieldset from './manage/Widgets/SchemaWidgetFieldset';\nexport SelectWidget from './manage/Widgets/SelectWidget';\nexport Sharing from './manage/Sharing/Sharing';\nexport TextareaWidget from './manage/Widgets/TextareaWidget';\nexport TextWidget from './manage/Widgets/TextWidget';\nexport Toolbar from './manage/Toolbar/Toolbar';\nexport Types from './manage/Types/Types';\nexport WysiwygWidget from './manage/Widgets/WysiwygWidget';\nexport Workflow from './manage/Workflow/Workflow';\n\nexport EditDescriptionTile from './manage/Tiles/Description/Edit';\nexport EditTitleTile from './manage/Tiles/Title/Edit';\nexport EditTextTile from './manage/Tiles/Text/Edit';\nexport EditImageTile from './manage/Tiles/Image/Edit';\nexport EditVideoTile from './manage/Tiles/Video/Edit';\nexport EditTile from './manage/Tiles/Tile/Edit';\n\nexport ViewDescriptionTile from './manage/Tiles/Description/View';\nexport ViewTitleTile from './manage/Tiles/Title/View';\nexport ViewTextTile from './manage/Tiles/Text/View';\nexport ViewImageTile from './manage/Tiles/Image/View';\nexport ViewVideoTile from './manage/Tiles/Video/View';\n","/**\n * Actions component.\n * @module components/manage/Actions/Actions\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport { Dropdown, Icon } from 'semantic-ui-react';\nimport {\n  FormattedMessage,\n  defineMessages,\n  injectIntl,\n  intlShape,\n} from 'react-intl';\n\nimport {\n  cut,\n  copy,\n  copyContent,\n  moveContent,\n  addMessage,\n} from '../../../actions';\nimport { getBaseUrl } from '../../../helpers';\nimport { ContentsRenameModal } from '../../../components';\n\nconst messages = defineMessages({\n  cut: {\n    id: 'Cut',\n    defaultMessage: 'Cut',\n  },\n  copy: {\n    id: 'Copy',\n    defaultMessage: 'Copy',\n  },\n  paste: {\n    id: 'Paste',\n    defaultMessage: 'Paste',\n  },\n  rename: {\n    id: 'Rename',\n    defaultMessage: 'Rename',\n  },\n  messageCopied: {\n    id: '{title} copied.',\n    defaultMessage: '{title} copied.',\n  },\n  messageCut: {\n    id: '{title} cut.',\n    defaultMessage: '{title} cut.',\n  },\n  messageDeleted: {\n    id: '{title} has been deleted.',\n    defaultMessage: '{title} has been deleted.',\n  },\n  messagePasted: {\n    id: 'Item(s) pasted.',\n    defaultMessage: 'Item(s) pasted.',\n  },\n});\n\n@injectIntl\n@connect(\n  state => ({\n    actions: state.actions.actions,\n    action: state.clipboard.action,\n    source: state.clipboard.source,\n    id: state.content.data ? state.content.data.id : '',\n    title: state.content.data ? state.content.data.title : '',\n  }),\n  dispatch =>\n    bindActionCreators(\n      {\n        cut,\n        copy,\n        copyContent,\n        moveContent,\n        addMessage,\n      },\n      dispatch,\n    ),\n)\n/**\n * Actions container class.\n * @class Actions\n * @extends Component\n */\nexport default class Actions extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    actions: PropTypes.shape({\n      object: PropTypes.arrayOf(PropTypes.object),\n      object_buttons: PropTypes.arrayOf(PropTypes.object),\n      user: PropTypes.arrayOf(PropTypes.object),\n    }),\n    pathname: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    action: PropTypes.string,\n    source: PropTypes.arrayOf(PropTypes.string),\n    cut: PropTypes.func.isRequired,\n    copy: PropTypes.func.isRequired,\n    copyContent: PropTypes.func.isRequired,\n    moveContent: PropTypes.func.isRequired,\n    addMessage: PropTypes.func.isRequired,\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    action: null,\n    actions: null,\n    source: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Actions\n   */\n  constructor(props) {\n    super(props);\n    this.cut = this.cut.bind(this);\n    this.copy = this.copy.bind(this);\n    this.paste = this.paste.bind(this);\n    this.rename = this.rename.bind(this);\n    this.onRenameOk = this.onRenameOk.bind(this);\n    this.onRenameCancel = this.onRenameCancel.bind(this);\n    this.state = {\n      showRename: false,\n    };\n  }\n\n  /**\n   * On rename ok\n   * @method onRenameOk\n   * @returns {undefined}\n   */\n  onRenameOk() {\n    this.setState({\n      showRename: false,\n    });\n  }\n\n  /**\n   * On rename cancel\n   * @method onRenameCancel\n   * @returns {undefined}\n   */\n  onRenameCancel() {\n    this.setState({\n      showRename: false,\n    });\n  }\n\n  /**\n   * Cut handler\n   * @method cut\n   * @returns {undefined}\n   */\n  cut() {\n    this.props.cut([getBaseUrl(this.props.pathname)]);\n    this.props.addMessage(\n      null,\n      this.props.intl.formatMessage(messages.messageCut, {\n        title: this.props.title,\n      }),\n      'success',\n    );\n  }\n\n  /**\n   * Copy handler\n   * @method copy\n   * @returns {undefined}\n   */\n  copy() {\n    this.props.copy([getBaseUrl(this.props.pathname)]);\n    this.props.addMessage(\n      null,\n      this.props.intl.formatMessage(messages.messageCopied, {\n        title: this.props.title,\n      }),\n      'success',\n    );\n  }\n\n  /**\n   * Paste handler\n   * @method paste\n   * @returns {undefined}\n   */\n  paste() {\n    if (this.props.action === 'copy') {\n      this.props.copyContent(\n        this.props.source,\n        getBaseUrl(this.props.pathname),\n      );\n    }\n    if (this.props.action === 'cut') {\n      this.props.moveContent(\n        this.props.source,\n        getBaseUrl(this.props.pathname),\n      );\n    }\n    this.props.addMessage(\n      null,\n      this.props.intl.formatMessage(messages.messagePasted),\n      'success',\n    );\n  }\n\n  /**\n   * Rename handler\n   * @method rename\n   * @returns {undefined}\n   */\n  rename() {\n    this.setState({\n      showRename: true,\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Dropdown\n        item\n        id=\"toolbar-actions\"\n        trigger={\n          <span>\n            <Icon name=\"lightning\" size=\"big\" />{' '}\n            <FormattedMessage id=\"Actions\" defaultMessage=\"Actions\" />\n          </span>\n        }\n      >\n        <Dropdown.Menu>\n          {this.props.actions.object_buttons &&\n            this.props.actions.object_buttons.map(item => {\n              switch (item.id) {\n                case 'cut':\n                  return (\n                    <Dropdown.Item\n                      key={item.id}\n                      icon=\"cut\"\n                      text={item.title}\n                      onClick={this.cut}\n                    />\n                  );\n                case 'copy':\n                  return (\n                    <Dropdown.Item\n                      key={item.id}\n                      icon=\"copy\"\n                      text={item.title}\n                      onClick={this.copy}\n                    />\n                  );\n                case 'paste':\n                  return (\n                    <Dropdown.Item\n                      key={item.id}\n                      icon=\"paste\"\n                      text={item.title}\n                      onClick={this.paste}\n                      disabled={this.props.action === null}\n                    />\n                  );\n                case 'delete':\n                  return (\n                    <Link\n                      key={item.id}\n                      to={`${this.props.pathname}/delete`}\n                      className=\"item\"\n                    >\n                      <Icon name=\"trash\" />\n                      {item.title}\n                    </Link>\n                  );\n                case 'rename':\n                  return (\n                    <Dropdown.Item\n                      key={item.id}\n                      icon=\"text cursor\"\n                      text={item.title}\n                      onClick={this.rename}\n                    />\n                  );\n                default:\n                  return null;\n              }\n            })}\n\n          <ContentsRenameModal\n            open={this.state.showRename}\n            onCancel={this.onRenameCancel}\n            onOk={this.onRenameOk}\n            items={[\n              {\n                url: this.props.pathname,\n                title: this.props.title,\n                id: this.props.id,\n              },\n            ]}\n          />\n        </Dropdown.Menu>\n      </Dropdown>\n    );\n  }\n}\n","/**\n * Add container.\n * @module components/manage/Add/Add\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Router, withRouter } from 'react-router-dom';\nimport { asyncConnect } from 'redux-connect';\nimport { keys, isEmpty, pick } from 'lodash';\nimport { defineMessages, injectIntl, intlShape } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport { Icon } from 'semantic-ui-react';\nimport { DragDropContext } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport qs from 'query-string';\nimport { settings } from '~/config';\n\nimport { createContent, getSchema } from '../../../actions';\nimport { Form, Toolbar } from '../../../components';\nimport {\n  getBaseUrl,\n  hasTilesData,\n  getTilesFieldname,\n  getTilesLayoutFieldname,\n} from '../../../helpers';\n\nconst messages = defineMessages({\n  add: {\n    id: 'Add {type}',\n    defaultMessage: 'Add {type}',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  properties: {\n    id: 'Properties',\n    defaultMessage: 'Properties',\n  },\n  visual: {\n    id: 'Visual',\n    defaultMessage: 'Visual',\n  },\n});\n\n@DragDropContext(HTML5Backend)\n@injectIntl\n@connect(\n  (state, props) => ({\n    createRequest: state.content.create,\n    schemaRequest: state.schema,\n    content: state.content.data,\n    schema: state.schema.schema,\n    pathname: props.location.pathname,\n    returnUrl: qs.parse(props.location.search).return_url,\n    type: qs.parse(props.location.search).type,\n  }),\n  dispatch => bindActionCreators({ createContent, getSchema }, dispatch),\n)\n/**\n * AddComponent class.\n * @class AddComponent\n * @extends Component\n */\nexport class AddComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    createContent: PropTypes.func.isRequired,\n    getSchema: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    schema: PropTypes.objectOf(PropTypes.any),\n    content: PropTypes.shape({\n      // eslint-disable-line react/no-unused-prop-types\n      '@id': PropTypes.string,\n      '@type': PropTypes.string,\n    }),\n    returnUrl: PropTypes.string,\n    createRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    schemaRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    type: PropTypes.string,\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    schema: null,\n    content: null,\n    returnUrl: null,\n    type: 'Default',\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      visual: false,\n    };\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onToggleVisual = this.onToggleVisual.bind(this);\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  componentWillMount() {\n    this.props.getSchema(this.props.type);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (\n      this.props.createRequest.loading &&\n      nextProps.createRequest.loaded &&\n      nextProps.content['@type'] === this.props.type\n    ) {\n      this.props.history.push(\n        this.props.returnUrl ||\n          nextProps.content['@id'].replace(settings.apiPath, ''),\n      );\n    }\n    if (this.props.schemaRequest.loading && nextProps.schemaRequest.loaded) {\n      if (hasTilesData(nextProps.schema.properties)) {\n        this.setState({\n          visual: true,\n        });\n      }\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.createContent(getBaseUrl(this.props.pathname), {\n      ...data,\n      '@static_behaviors': this.props.schema.definitions\n        ? keys(this.props.schema.definitions)\n        : null,\n      '@type': this.props.type,\n    });\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.push(getBaseUrl(this.props.pathname));\n  }\n\n  /**\n   * Toggle visual\n   * @method onToggleVisual\n   * @returns {undefined}\n   */\n  onToggleVisual() {\n    this.setState({\n      visual: !this.state.visual,\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.props.schemaRequest.loaded) {\n      return (\n        <div id=\"page-add\">\n          <Helmet\n            title={this.props.intl.formatMessage(messages.add, {\n              type: this.props.type,\n            })}\n          />\n          <Form\n            ref={instance => {\n              if (instance) {\n                this.form = instance.refs.wrappedInstance;\n              }\n            }}\n            schema={this.props.schema}\n            formData={{\n              [getTilesFieldname(this.props.schema.properties)]: null,\n              [getTilesLayoutFieldname(this.props.schema.properties)]: null,\n            }}\n            onSubmit={this.onSubmit}\n            hideActions\n            pathname={this.props.pathname}\n            visual={this.state.visual}\n            title={this.props.intl.formatMessage(messages.add, {\n              type: this.props.type,\n            })}\n            loading={this.props.createRequest.loading}\n          />\n          <Portal node={__CLIENT__ && document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              inner={\n                <div>\n                  <a className=\"item\" onClick={() => this.form.onSubmit()}>\n                    <Icon\n                      name=\"save\"\n                      size=\"big\"\n                      color=\"blue\"\n                      title={this.props.intl.formatMessage(messages.save)}\n                    />\n                  </a>\n                  {hasTilesData(this.props.schema.properties) && (\n                    <a className=\"item\" onClick={() => this.onToggleVisual()}>\n                      <Icon\n                        name={this.state.visual ? 'tasks' : 'block layout'}\n                        size=\"big\"\n                        title={this.props.intl.formatMessage(\n                          this.state.visual\n                            ? messages.properties\n                            : messages.visual,\n                        )}\n                      />\n                    </a>\n                  )}\n                  <a className=\"item\" onClick={() => this.onCancel()}>\n                    <Icon\n                      name=\"close\"\n                      size=\"big\"\n                      color=\"red\"\n                      title={this.props.intl.formatMessage(messages.cancel)}\n                    />\n                  </a>\n                </div>\n              }\n            />\n          </Portal>\n        </div>\n      );\n    }\n    return <div />;\n  }\n}\n\nexport default asyncConnect([\n  {\n    key: 'schema',\n    promise: ({ location, store: { dispatch } }) =>\n      dispatch(getSchema(qs.parse(location.search).type)),\n  },\n  {\n    key: 'content',\n    promise: ({ location, store: { dispatch, getState } }) => {\n      const { form } = getState();\n      if (!isEmpty(form)) {\n        return dispatch(\n          createContent(getBaseUrl(location.pathname), {\n            ...pick(form, ['title', 'description', 'text']),\n            '@type': 'Document',\n          }),\n        );\n      }\n      return Promise.resolve(getState().content);\n    },\n  },\n])(withRouter(AddComponent));\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node.isRequired,\n  entityKey: PropTypes.string,\n  getEditorState: PropTypes.func.isRequired,\n  target: PropTypes.string,\n};\n\nconst Link = ({ children, className, entityKey, getEditorState, target }) => {\n  const entity = getEditorState()\n    .getCurrentContent()\n    .getEntity(entityKey);\n  const entityData = entity ? entity.get('data') : undefined;\n  const href = (entityData && entityData.url) || undefined;\n\n  return (\n    <a\n      className={className}\n      title={href}\n      href={href}\n      target={target}\n      rel=\"noopener noreferrer\"\n    >\n      {children}\n    </a>\n  );\n};\n\nLink.propTypes = propTypes;\nLink.defaultProps = {\n  className: null,\n  entityKey: null,\n  target: null,\n};\nexport default Link;\n","/**\n * Add link form.\n * @module components/manage/AnchorPlugin/components/LinkButton/AddLinkForm\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport unionClassNames from 'union-class-names';\nimport EditorUtils from 'draft-js-plugins-utils';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { map } from 'lodash';\n\nimport { resetSearchContent, searchContent } from '../../../../../actions';\nimport URLUtils from '../../utils/URLUtils';\n\n@connect(\n  state => ({\n    search: state.search.items,\n  }),\n  dispatch =>\n    bindActionCreators({ resetSearchContent, searchContent }, dispatch),\n)\n/**\n * Add link form class.\n * @class AddLinkForm\n * @extends Component\n */\nexport default class AddLinkForm extends Component {\n  static propTypes = {\n    getEditorState: PropTypes.func.isRequired,\n    setEditorState: PropTypes.func.isRequired,\n    onOverrideContent: PropTypes.func.isRequired,\n    theme: PropTypes.objectOf(PropTypes.any).isRequired,\n    placeholder: PropTypes.string,\n    resetSearchContent: PropTypes.func.isRequired,\n    searchContent: PropTypes.func.isRequired,\n    search: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        '@type': PropTypes.string,\n        title: PropTypes.string,\n        description: PropTypes.string,\n      }),\n    ),\n  };\n\n  static defaultProps = {\n    placeholder: 'Enter URL or search for content',\n    search: [],\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      isInvalid: false,\n    };\n    this.onRef = this.onRef.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.onKeyDown = this.onKeyDown.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.input.focus();\n    this.props.resetSearchContent();\n  }\n\n  /**\n   * Ref handler\n   * @method onRef\n   * @param {Object} node Node\n   * @returns {undefined}\n   */\n  onRef(node) {\n    this.input = node;\n  }\n\n  /**\n   * Change handler\n   * @method onChange\n   * @param {Object} value Value\n   * @returns {undefined}\n   */\n  onChange({ target: { value } }) {\n    const nextState = { value };\n    if (this.state.isInvalid && URLUtils.isUrl(URLUtils.normalizeUrl(value))) {\n      nextState.isInvalid = false;\n    }\n    this.setState(nextState);\n    if (value && value !== '') {\n      this.props.searchContent('', {\n        Title: `*${value}*`,\n      });\n    } else {\n      this.props.resetSearchContent();\n    }\n  }\n\n  /**\n   * Select item handler\n   * @method onSelectItem\n   * @param {string} e event\n   * @param {string} url Url\n   * @returns {undefined}\n   */\n  onSelectItem = (e, url) => {\n    e.preventDefault();\n    this.setState({\n      value: url,\n      isInvalid: false,\n    });\n    this.props.resetSearchContent();\n    this.props.setEditorState(\n      EditorUtils.createLinkAtSelection(this.props.getEditorState(), url),\n    );\n    this.input.blur();\n    this.onClose();\n  };\n\n  /**\n   * Close handler\n   * @method onClose\n   * @returns {undefined}\n   */\n  onClose = () => this.props.onOverrideContent(undefined);\n\n  /**\n   * Keydown handler\n   * @method onKeyDown\n   * @param {Object} e Event object\n   * @returns {undefined}\n   */\n  onKeyDown(e) {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      this.onSubmit();\n    } else if (e.key === 'Escape') {\n      e.preventDefault();\n      this.onClose();\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @returns {undefined}\n   */\n  onSubmit() {\n    const { getEditorState, setEditorState } = this.props;\n    let { value: url } = this.state;\n    if (!URLUtils.isMail(URLUtils.normaliseMail(url))) {\n      url = URLUtils.normalizeUrl(url);\n      if (!URLUtils.isUrl(url)) {\n        this.setState({ isInvalid: true });\n        return;\n      }\n    } else {\n      url = URLUtils.normaliseMail(url);\n    }\n    setEditorState(EditorUtils.createLinkAtSelection(getEditorState(), url));\n    this.input.blur();\n    this.onClose();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { theme, placeholder } = this.props;\n    const { value, isInvalid } = this.state;\n    const className = isInvalid\n      ? unionClassNames('ui input editor-link', theme.input, theme.inputInvalid)\n      : unionClassNames('ui input editor-link', theme.input);\n\n    return (\n      <div>\n        <div\n          style={{ marginLeft: '5px', display: 'flex', alignItems: 'center' }}\n        >\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 36 36\"\n            fill=\"#B8B2C8\"\n          >\n            <g fillRule=\"evenodd\">\n              <path d=\"M27.1318,7.333 C24.4028,4.604 19.9618,4.604 17.2328,7.333 L12.9898,11.576 C11.8428,12.723 11.1288,14.248 10.9778,15.871 C10.8228,17.541 11.2708,19.211 12.2378,20.576 C12.4818,20.919 12.7278,21.213 12.9888,21.475 C13.7848,22.271 14.7778,22.868 15.8608,23.202 C16.5498,23.415 17.2548,23.519 17.9518,23.518 C19.7808,23.518 21.5598,22.804 22.8888,21.475 L23.9498,20.414 L22.5358,19 L21.4748,20.061 C20.1648,21.371 18.2388,21.842 16.4498,21.291 C15.6668,21.049 14.9778,20.635 14.4038,20.061 C14.2218,19.879 14.0478,19.668 13.8698,19.418 C13.1778,18.443 12.8588,17.249 12.9688,16.056 C13.0768,14.896 13.5868,13.808 14.4038,12.99 L18.6468,8.747 C20.5958,6.798 23.7688,6.798 25.7178,8.747 C26.6568,9.687 27.1748,10.942 27.1748,12.283 C27.1748,13.623 26.6568,14.878 25.7178,15.818 L27.1318,17.232 C28.4488,15.915 29.1748,14.157 29.1748,12.283 C29.1748,10.408 28.4488,8.65 27.1318,7.333\" />\n              <path d=\"M25.0107,16.5254 C24.2147,15.7294 23.2217,15.1324 22.1387,14.7984 C19.6417,14.0284 16.9477,14.6894 15.1107,16.5254 L14.0507,17.5864 L15.4647,19.0004 L16.5247,17.9394 C17.8357,16.6294 19.7587,16.1554 21.5497,16.7094 C22.3337,16.9514 23.0217,17.3644 23.5957,17.9394 C23.7777,18.1214 23.9527,18.3314 24.1307,18.5824 C24.8217,19.5564 25.1417,20.7514 25.0317,21.9444 C24.9237,23.1034 24.4137,24.1924 23.5957,25.0104 L19.3537,29.2534 C17.4047,31.2024 14.2317,31.2024 12.2817,29.2534 C11.3427,28.3134 10.8247,27.0574 10.8247,25.7174 C10.8247,24.3774 11.3427,23.1214 12.2817,22.1824 L10.8677,20.7684 C9.5507,22.0854 8.8247,23.8424 8.8247,25.7174 C8.8247,27.5924 9.5507,29.3504 10.8677,30.6674 C12.2327,32.0314 14.0257,32.7134 15.8177,32.7134 C17.6107,32.7134 19.4027,32.0314 20.7677,30.6674 L25.0107,26.4244 C26.1567,25.2774 26.8717,23.7524 27.0227,22.1294 C27.1777,20.4594 26.7297,18.7894 25.7617,17.4244 C25.5177,17.0814 25.2717,16.7874 25.0107,16.5254\" />\n            </g>\n          </svg>\n          <input\n            className={className}\n            // TODO: The onBlur is somewhat happening before the onSelectItem method is called.\n            // Then the dialog is closed once you select the item without setting the link.\n            // onBlur={this.onClose}\n            onChange={this.onChange}\n            onKeyDown={this.onKeyDown}\n            placeholder={placeholder}\n            ref={this.onRef}\n            type=\"text\"\n            value={value}\n          />\n        </div>\n        <ul style={{ margin: 0, paddingLeft: '35px' }}>\n          {map(this.props.search, item => (\n            <li style={{ padding: '5px' }}>\n              <a\n                style={{ cursor: 'pointer' }}\n                onClick={e => this.onSelectItem(e, item['@id'])}\n                title={item['@id']}\n                role=\"link\"\n              >\n                {item.title}\n              </a>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport unionClassNames from 'union-class-names';\nimport EditorUtils from 'draft-js-plugins-utils';\nimport AddLinkForm from './AddLinkForm';\nimport Icon from '../../../../../components/theme/Icon/Icon';\n\nimport linkSVG from '../../../../../icons/link.svg';\nimport unlinkSVG from '../../../../../icons/unlink.svg';\n\n/**\n * Add link form class.\n * @class LinkButton\n * @extends Component\n */\nexport default class LinkButton extends Component {\n  static propTypes = {\n    placeholder: PropTypes.string,\n    store: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    ownTheme: PropTypes.shape({}).isRequired,\n    onRemoveLinkAtSelection: PropTypes.func.isRequired,\n    onOverrideContent: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    placeholder: '',\n  };\n\n  onMouseDown = event => {\n    event.preventDefault();\n  };\n\n  onAddLinkClick = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    const { ownTheme, placeholder, onOverrideContent } = this.props;\n    const content = props => (\n      <AddLinkForm {...props} placeholder={placeholder} theme={ownTheme} />\n    );\n    onOverrideContent(content);\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { theme, onRemoveLinkAtSelection } = this.props;\n    const hasLinkSelected = EditorUtils.hasEntity(\n      this.props.store.getEditorState(),\n      'LINK',\n    );\n    const className = hasLinkSelected\n      ? unionClassNames(theme.button, theme.active)\n      : theme.button;\n\n    return (\n      <div\n        className={theme.buttonWrapper}\n        onMouseDown={this.onMouseDown}\n        role=\"presentation\"\n      >\n        <button\n          className={className}\n          onClick={\n            hasLinkSelected ? onRemoveLinkAtSelection : this.onAddLinkClick\n          }\n          type=\"button\"\n        >\n          {!hasLinkSelected ? (\n            <Icon name={linkSVG} size=\"24px\" />\n          ) : (\n            <Icon name={unlinkSVG} size=\"24px\" />\n          )}\n        </button>\n      </div>\n    );\n  }\n}\n","import decorateComponentWithProps from 'decorate-component-with-props';\nimport EditorUtils from 'draft-js-plugins-utils';\n\nimport DefaultLink from './components/Link';\nimport LinkButton from './components/LinkButton';\nimport linkStrategy, { matchesEntityType } from './linkStrategy';\nimport linkStyles from './linkStyles.module.css';\n\nexport default (config = {}) => {\n  const defaultTheme = linkStyles;\n\n  const { theme = defaultTheme, placeholder, Link, linkTarget } = config;\n\n  const store = {\n    getEditorState: undefined,\n    setEditorState: undefined,\n  };\n\n  return {\n    initialize: ({ getEditorState, setEditorState }) => {\n      store.getEditorState = getEditorState;\n      store.setEditorState = setEditorState;\n    },\n\n    decorators: [\n      {\n        strategy: linkStrategy,\n        matchesEntityType,\n        component:\n          Link ||\n          decorateComponentWithProps(DefaultLink, {\n            className: theme.link,\n            target: linkTarget,\n          }),\n      },\n    ],\n\n    LinkButton: decorateComponentWithProps(LinkButton, {\n      ownTheme: theme,\n      store,\n      placeholder,\n      onRemoveLinkAtSelection: () =>\n        store.setEditorState(\n          EditorUtils.removeLinkAtSelection(store.getEditorState()),\n        ),\n    }),\n  };\n};\n","export const matchesEntityType = type => type === 'LINK';\n\n/**\n *\n *\n * @export strategy\n * @param {*} contentBlock contentBlock\n * @param {*} cb cb\n * @param {*} contentState contentState\n * @returns {*} string\n */\nexport default function strategy(contentBlock, cb, contentState) {\n  if (!contentState) return;\n  contentBlock.findEntityRanges(character => {\n    const entityKey = character.getEntity();\n    return (\n      entityKey !== null &&\n      matchesEntityType(contentState.getEntity(entityKey).getType())\n    );\n  }, cb);\n}\n","module.exports = {\n\t\"input\": \"src-components-manage-AnchorPlugin-__linkStyles-module___input\",\n\t\"inputInvalid\": \"src-components-manage-AnchorPlugin-__linkStyles-module___inputInvalid\",\n\t\"link\": \"src-components-manage-AnchorPlugin-__linkStyles-module___link\"\n};","import prependHttp from 'prepend-http';\nimport urlRegex from './urlRegex';\nimport mailRegex from './mailRegex';\n\nexport default {\n  isUrl(text) {\n    return urlRegex().test(text);\n  },\n\n  isMail(text) {\n    return mailRegex().test(text);\n  },\n\n  normaliseMail(email) {\n    if (email.toLowerCase().startsWith('mailto:')) {\n      return email;\n    }\n    return `mailto:${email}`;\n  },\n\n  normalizeUrl(url) {\n    return prependHttp(url);\n  },\n};\n","export default () =>\n  /^((mailto:[^<>()/[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})$/i;\n","/* eslint-disable  arrow-body-style */\n/* eslint-disable  no-confusing-arrow */\nimport tlds from 'tlds';\n\nconst v4 =\n  '(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])(?:\\\\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])){3}';\nconst v6seg = '[0-9a-fA-F]{1,4}';\nconst v6 = `\n(\n(?:${v6seg}:){7}(?:${v6seg}|:)|                                // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:${v6seg}:){6}(?:${v4}|:${v6seg}|:)|                         // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:${v6seg}:){5}(?::${v4}|(:${v6seg}){1,2}|:)|                 // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:${v6seg}:){4}(?:(:${v6seg}){0,1}:${v4}|(:${v6seg}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:${v6seg}:){3}(?:(:${v6seg}){0,2}:${v4}|(:${v6seg}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:${v6seg}:){2}(?:(:${v6seg}){0,3}:${v4}|(:${v6seg}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:${v6seg}:){1}(?:(:${v6seg}){0,4}:${v4}|(:${v6seg}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::((?::${v6seg}){0,5}:${v4}|(?::${v6seg}){1,7}|:))           // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(%[0-9a-zA-Z]{1,})?                                           // %eth0            %1\n`\n  .replace(/\\s*\\/\\/.*$/gm, '')\n  .replace(/\\n/g, '')\n  .trim();\n\nconst ipRegex = opts =>\n  opts && opts.exact\n    ? new RegExp(`(?:^${v4}$)|(?:^${v6}$)`)\n    : new RegExp(`(?:${v4})|(?:${v6})`, 'g');\n\nipRegex.v4 = opts =>\n  opts && opts.exact ? new RegExp(`^${v4}$`) : new RegExp(v4, 'g');\nipRegex.v6 = opts =>\n  opts && opts.exact ? new RegExp(`^${v6}$`) : new RegExp(v6, 'g');\n\nexport default _opts => {\n  const opts = Object.assign({ strict: true }, _opts);\n  const protocol = `(?:(?:[a-z]+:)?//)${opts.strict ? '' : '?'}`;\n  const auth = '(?:\\\\S+(?::\\\\S*)?@)?';\n  const ip = ipRegex.v4().source;\n  const host = '(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)';\n  const domain =\n    '(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*';\n  const tld = `(?:\\\\.${\n    opts.strict\n      ? '(?:[a-z\\\\u00a1-\\\\uffff]{2,})'\n      : `(?:${tlds.sort((a, b) => b.length - a.length).join('|')})`\n  })\\\\.?`;\n  const port = '(?::\\\\d{2,5})?';\n  const path = '(?:[/?#][^\\\\s\"]*)?';\n  const regex = `(?:${protocol}|www\\\\.)${auth}(?:localhost|${ip}|${host}${domain}${tld})${port}${path}`;\n\n  return opts.exact\n    ? new RegExp(`(?:^${regex}$)`, 'i')\n    : new RegExp(regex, 'ig');\n};\n","/**\n * Contents component.\n * @module components/manage/Contents/Contents\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Portal } from 'react-portal';\nimport { bindActionCreators } from 'redux';\nimport Helmet from 'react-helmet';\nimport { Link } from 'react-router-dom';\nimport {\n  Breadcrumb,\n  Confirm,\n  Container,\n  Dropdown,\n  Menu,\n  Icon,\n  Input,\n  Segment,\n  Table,\n} from 'semantic-ui-react';\nimport {\n  concat,\n  filter,\n  find,\n  indexOf,\n  keys,\n  map,\n  mapValues,\n  pull,\n} from 'lodash';\nimport move from 'lodash-move';\nimport { DragDropContext } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport {\n  FormattedMessage,\n  defineMessages,\n  injectIntl,\n  intlShape,\n} from 'react-intl';\n\nimport {\n  searchContent,\n  cut,\n  copy,\n  copyContent,\n  deleteContent,\n  moveContent,\n  orderContent,\n  sortContent,\n  addMessage,\n} from '../../../actions';\nimport { getBaseUrl } from '../../../helpers';\nimport Indexes from '../../../constants/Indexes';\nimport {\n  ContentsIndexHeader,\n  ContentsItem,\n  ContentsRenameModal,\n  ContentsUploadModal,\n  ContentsWorkflowModal,\n  ContentsTagsModal,\n  ContentsPropertiesModal,\n  Pagination,\n  Toolbar,\n} from '../../../components';\n\nconst defaultIndexes = ['ModificationDate', 'EffectiveDate', 'review_state'];\nconst messages = defineMessages({\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  contents: {\n    id: 'Contents',\n    defaultMessage: 'Contents',\n  },\n  copy: {\n    id: 'Copy',\n    defaultMessage: 'Copy',\n  },\n  cut: {\n    id: 'Cut',\n    defaultMessage: 'Cut',\n  },\n  delete: {\n    id: 'Delete',\n    defaultMessage: 'Delete',\n  },\n  deleteConfirm: {\n    id: 'Do you really want to delete the following items?',\n    defaultMessage: 'Do you really want to delete the following items?',\n  },\n  home: {\n    id: 'Home',\n    defaultMessage: 'Home',\n  },\n  filter: {\n    id: 'Filter…',\n    defaultMessage: 'Filter…',\n  },\n  messageCopied: {\n    id: 'Item(s) copied.',\n    defaultMessage: 'Item(s) copied.',\n  },\n  messageCut: {\n    id: 'Item(s) cut.',\n    defaultMessage: 'Item(s) cut.',\n  },\n  messagePasted: {\n    id: 'Item(s) pasted.',\n    defaultMessage: 'Item(s) pasted.',\n  },\n  paste: {\n    id: 'Paste',\n    defaultMessage: 'Paste',\n  },\n  properties: {\n    id: 'Properties',\n    defaultMessage: 'Properties',\n  },\n  rearrangeBy: {\n    id: 'Rearrange items by…',\n    defaultMessage: 'Rearrange items by…',\n  },\n  rename: {\n    id: 'Rename',\n    defaultMessage: 'Rename',\n  },\n  select: {\n    id: 'Select…',\n    defaultMessage: 'Select…',\n  },\n  selected: {\n    id: '{count} selected',\n    defaultMessage: '{count} selected',\n  },\n  selectColumns: {\n    id: 'Select columns to show',\n    defaultMessage: 'Select columns to show',\n  },\n  state: {\n    id: 'State',\n    defaultMessage: 'State',\n  },\n  tags: {\n    id: 'Tags',\n    defaultMessage: 'Tags',\n  },\n  upload: {\n    id: 'Upload',\n    defaultMessage: 'Upload',\n  },\n});\n\n@DragDropContext(HTML5Backend)\n@injectIntl\n@connect(\n  (state, props) => ({\n    items: state.search.items,\n    breadcrumbs: state.breadcrumbs.items,\n    total: state.search.total,\n    searchRequest: {\n      loading: state.search.loading,\n      loaded: state.search.loaded,\n    },\n    pathname: props.location.pathname,\n    action: state.clipboard.action,\n    source: state.clipboard.source,\n    clipboardRequest: state.clipboard.request,\n    deleteRequest: state.content.delete,\n    updateRequest: state.content.update,\n  }),\n  dispatch =>\n    bindActionCreators(\n      {\n        searchContent,\n        cut,\n        copy,\n        copyContent,\n        deleteContent,\n        moveContent,\n        orderContent,\n        sortContent,\n        addMessage,\n      },\n      dispatch,\n    ),\n)\n/**\n * ContentsComponent class.\n * @class ContentsComponent\n * @extends Component\n */\nexport default class ContentsComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    action: PropTypes.string,\n    source: PropTypes.arrayOf(PropTypes.string),\n    searchContent: PropTypes.func.isRequired,\n    cut: PropTypes.func.isRequired,\n    copy: PropTypes.func.isRequired,\n    copyContent: PropTypes.func.isRequired,\n    deleteContent: PropTypes.func.isRequired,\n    moveContent: PropTypes.func.isRequired,\n    orderContent: PropTypes.func.isRequired,\n    sortContent: PropTypes.func.isRequired,\n    addMessage: PropTypes.func.isRequired,\n    clipboardRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    deleteRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    updateRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    searchRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        '@type': PropTypes.string,\n        title: PropTypes.string,\n        description: PropTypes.string,\n      }),\n    ),\n    breadcrumbs: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n        url: PropTypes.string,\n      }),\n    ).isRequired,\n    total: PropTypes.number.isRequired,\n    pathname: PropTypes.string.isRequired,\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    items: [],\n    action: null,\n    source: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentsComponent\n   */\n  constructor(props) {\n    super(props);\n    this.onDeselect = this.onDeselect.bind(this);\n    this.onSelect = this.onSelect.bind(this);\n    this.onSelectAll = this.onSelectAll.bind(this);\n    this.onSelectIndex = this.onSelectIndex.bind(this);\n    this.onSelectNone = this.onSelectNone.bind(this);\n    this.onDeleteOk = this.onDeleteOk.bind(this);\n    this.onDeleteCancel = this.onDeleteCancel.bind(this);\n    this.onUploadOk = this.onUploadOk.bind(this);\n    this.onUploadCancel = this.onUploadCancel.bind(this);\n    this.onRenameOk = this.onRenameOk.bind(this);\n    this.onRenameCancel = this.onRenameCancel.bind(this);\n    this.onTagsOk = this.onTagsOk.bind(this);\n    this.onTagsCancel = this.onTagsCancel.bind(this);\n    this.onPropertiesOk = this.onPropertiesOk.bind(this);\n    this.onPropertiesCancel = this.onPropertiesCancel.bind(this);\n    this.onWorkflowOk = this.onWorkflowOk.bind(this);\n    this.onWorkflowCancel = this.onWorkflowCancel.bind(this);\n    this.onChangeFilter = this.onChangeFilter.bind(this);\n    this.onChangePage = this.onChangePage.bind(this);\n    this.onChangePageSize = this.onChangePageSize.bind(this);\n    this.onOrderIndex = this.onOrderIndex.bind(this);\n    this.onOrderItem = this.onOrderItem.bind(this);\n    this.onSortItems = this.onSortItems.bind(this);\n    this.onMoveToTop = this.onMoveToTop.bind(this);\n    this.onMoveToBottom = this.onMoveToBottom.bind(this);\n    this.cut = this.cut.bind(this);\n    this.copy = this.copy.bind(this);\n    this.delete = this.delete.bind(this);\n    this.upload = this.upload.bind(this);\n    this.rename = this.rename.bind(this);\n    this.tags = this.tags.bind(this);\n    this.properties = this.properties.bind(this);\n    this.workflow = this.workflow.bind(this);\n    this.paste = this.paste.bind(this);\n    this.fetchContents = this.fetchContents.bind(this);\n    this.state = {\n      selected: [],\n      showDelete: false,\n      showUpload: false,\n      showRename: false,\n      showTags: false,\n      showProperties: false,\n      showWorkflow: false,\n      itemsToDelete: [],\n      items: this.props.items,\n      filter: '',\n      currentPage: 0,\n      pageSize: 15,\n      index: {\n        order: keys(Indexes),\n        values: mapValues(Indexes, (value, key) => ({\n          ...value,\n          selected: indexOf(defaultIndexes, key) !== -1,\n        })),\n        selectedCount: defaultIndexes.length + 1,\n      },\n    };\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  componentWillMount() {\n    this.fetchContents();\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (\n      (this.props.clipboardRequest.loading &&\n        nextProps.clipboardRequest.loaded) ||\n      (this.props.deleteRequest.loading && nextProps.deleteRequest.loaded) ||\n      (this.props.updateRequest.loading && nextProps.updateRequest.loaded) ||\n      this.props.pathname !== nextProps.pathname\n    ) {\n      this.fetchContents(nextProps.pathname);\n    }\n    if (this.props.searchRequest.loading && nextProps.searchRequest.loaded) {\n      this.setState({\n        items: nextProps.items,\n      });\n    }\n  }\n\n  /**\n   * On deselect handler\n   * @method onDeselect\n   * @param {object} event Event object\n   * @param {string} value Value\n   * @returns {undefined}\n   */\n  onDeselect(event, { value }) {\n    this.setState({\n      selected: pull(this.state.selected, value),\n    });\n  }\n\n  /**\n   * On select handler\n   * @method onSelect\n   * @param {object} event Event object\n   * @returns {undefined}\n   */\n  onSelect(event) {\n    const id = event.target.getAttribute('value');\n    if (indexOf(this.state.selected, id) === -1) {\n      this.setState({\n        selected: concat(this.state.selected, id),\n      });\n    } else {\n      this.setState({\n        selected: pull(this.state.selected, id),\n      });\n    }\n  }\n\n  /**\n   * On select all handler\n   * @method onSelectAll\n   * @returns {undefined}\n   */\n  onSelectAll() {\n    this.setState({\n      selected: map(this.state.items, item => item['@id']),\n    });\n  }\n\n  /**\n   * On select none handler\n   * @method onSelectNone\n   * @returns {undefined}\n   */\n  onSelectNone() {\n    this.setState({\n      selected: [],\n    });\n  }\n\n  /**\n   * On select index\n   * @method onSelectIndex\n   * @param {object} event Event object.\n   * @param {string} value Index value.\n   * @returns {undefined}\n   */\n  onSelectIndex(event, { value }) {\n    this.setState({\n      index: {\n        ...this.state.index,\n        selectedCount:\n          this.state.index.selectedCount +\n          (this.state.index.values[value].selected ? -1 : 1),\n        values: mapValues(this.state.index.values, (indexValue, indexKey) => ({\n          ...indexValue,\n          selected:\n            indexKey === value ? !indexValue.selected : indexValue.selected,\n        })),\n      },\n    });\n  }\n\n  /**\n   * On change filter\n   * @method onChangeFilter\n   * @param {object} event Event object.\n   * @param {string} value Filter value.\n   * @returns {undefined}\n   */\n  onChangeFilter(event, { value }) {\n    this.setState(\n      {\n        filter: value,\n      },\n      () => this.fetchContents(),\n    );\n  }\n\n  /**\n   * On change page\n   * @method onChangePage\n   * @param {object} event Event object.\n   * @param {string} value Page value.\n   * @returns {undefined}\n   */\n  onChangePage(event, { value }) {\n    this.setState(\n      {\n        currentPage: value,\n      },\n      () => this.fetchContents(),\n    );\n  }\n\n  /**\n   * On change page size\n   * @method onChangePageSize\n   * @param {object} event Event object.\n   * @param {string} value Page size value.\n   * @returns {undefined}\n   */\n  onChangePageSize(event, { value }) {\n    this.setState(\n      {\n        pageSize: value,\n        currentPage: 0,\n      },\n      () => this.fetchContents(),\n    );\n  }\n\n  /**\n   * On order index\n   * @method onOrderIndex\n   * @param {number} index Index\n   * @param {number} delta Delta\n   * @returns {undefined}\n   */\n  onOrderIndex(index, delta) {\n    this.setState({\n      index: {\n        ...this.state.index,\n        order: move(this.state.index.order, index, index + delta),\n      },\n    });\n  }\n\n  /**\n   * On order item\n   * @method onOrderItem\n   * @param {number} itemIndex Item index\n   * @param {number} delta Delta\n   * @returns {undefined}\n   */\n  onOrderItem(itemIndex, delta) {\n    this.props.orderContent(\n      getBaseUrl(this.props.pathname),\n      this.state.items[itemIndex]['@id'].replace(/^.*\\//, ''),\n      delta,\n      map(this.state.items, item => item['@id'].replace(/^.*\\//, '')),\n    );\n    this.setState({\n      items: move(this.state.items, itemIndex, itemIndex + delta),\n    });\n  }\n\n  /**\n   * On sort items\n   * @method onSortItems\n   * @param {object} event Event object\n   * @param {string} value Item index\n   * @returns {undefined}\n   */\n  onSortItems(event, { value }) {\n    const values = value.split('|');\n    this.props.sortContent(\n      getBaseUrl(this.props.pathname),\n      values[0],\n      values[1],\n    );\n  }\n\n  /**\n   * On move to top\n   * @method onMoveToTop\n   * @param {object} event Event object\n   * @param {string} value Item index\n   * @returns {undefined}\n   */\n  onMoveToTop(event, { value }) {\n    this.onOrderItem(value, -value);\n  }\n\n  /**\n   * On move to bottom\n   * @method onMoveToBottom\n   * @param {object} event Event object\n   * @param {string} value Item index\n   * @returns {undefined}\n   */\n  onMoveToBottom(event, { value }) {\n    this.onOrderItem(value, this.state.items.length - 1 - value);\n  }\n\n  /**\n   * On delete ok\n   * @method onDeleteOk\n   * @returns {undefined}\n   */\n  onDeleteOk() {\n    this.props.deleteContent(this.state.itemsToDelete);\n    this.setState({\n      showDelete: false,\n      itemsToDelete: [],\n      selected: [],\n    });\n  }\n\n  /**\n   * On delete cancel\n   * @method onDeleteCancel\n   * @returns {undefined}\n   */\n  onDeleteCancel() {\n    this.setState({\n      showDelete: false,\n      itemsToDelete: [],\n    });\n  }\n\n  /**\n   * On upload ok\n   * @method onUploadOk\n   * @returns {undefined}\n   */\n  onUploadOk() {\n    this.fetchContents();\n    this.setState({\n      showUpload: false,\n    });\n  }\n\n  /**\n   * On upload cancel\n   * @method onUploadCancel\n   * @returns {undefined}\n   */\n  onUploadCancel() {\n    this.setState({\n      showUpload: false,\n    });\n  }\n\n  /**\n   * On rename ok\n   * @method onRenameOk\n   * @returns {undefined}\n   */\n  onRenameOk() {\n    this.setState({\n      showRename: false,\n      selected: [],\n    });\n  }\n\n  /**\n   * On rename cancel\n   * @method onRenameCancel\n   * @returns {undefined}\n   */\n  onRenameCancel() {\n    this.setState({\n      showRename: false,\n    });\n  }\n\n  /**\n   * On tags ok\n   * @method onTagsOk\n   * @returns {undefined}\n   */\n  onTagsOk() {\n    this.setState({\n      showTags: false,\n      selected: [],\n    });\n  }\n\n  /**\n   * On tags cancel\n   * @method onTagsCancel\n   * @returns {undefined}\n   */\n  onTagsCancel() {\n    this.setState({\n      showTags: false,\n    });\n  }\n\n  /**\n   * On properties ok\n   * @method onPropertiesOk\n   * @returns {undefined}\n   */\n  onPropertiesOk() {\n    this.setState({\n      showProperties: false,\n      selected: [],\n    });\n  }\n\n  /**\n   * On properties cancel\n   * @method onPropertiesCancel\n   * @returns {undefined}\n   */\n  onPropertiesCancel() {\n    this.setState({\n      showProperties: false,\n    });\n  }\n\n  /**\n   * On workflow ok\n   * @method onWorkflowOk\n   * @returns {undefined}\n   */\n  onWorkflowOk() {\n    this.fetchContents();\n    this.setState({\n      showWorkflow: false,\n      selected: [],\n    });\n  }\n\n  /**\n   * On workflow cancel\n   * @method onWorkflowCancel\n   * @returns {undefined}\n   */\n  onWorkflowCancel() {\n    this.setState({\n      showWorkflow: false,\n    });\n  }\n\n  /**\n   * Get field by id\n   * @method getFieldById\n   * @param {string} id Id of object\n   * @param {string} field Field of object\n   * @returns {string} Field of object\n   */\n  getFieldById(id, field) {\n    const item = find(this.state.items, { '@id': id });\n    return item ? item[field] : '';\n  }\n\n  /**\n   * Fetch contents handler\n   * @method fetchContents\n   * @param {string} pathname Pathname to fetch contents.\n   * @returns {undefined}\n   */\n  fetchContents(pathname) {\n    this.props.searchContent(getBaseUrl(pathname || this.props.pathname), {\n      'path.depth': 1,\n      sort_on: 'getObjPositionInParent',\n      metadata_fields: '_all',\n      SearchableText: this.state.filter ? `${this.state.filter}*` : '',\n      b_size: this.state.pageSize,\n      b_start: this.state.currentPage * this.state.pageSize,\n    });\n  }\n\n  /**\n   * Cut handler\n   * @method cut\n   * @param {Object} event Event object.\n   * @param {string} value Value of the event.\n   * @returns {undefined}\n   */\n  cut(event, { value }) {\n    this.props.cut(value ? [value] : this.state.selected);\n    this.onSelectNone();\n    this.props.addMessage(\n      null,\n      this.props.intl.formatMessage(messages.messageCut),\n      'success',\n    );\n  }\n\n  /**\n   * Copy handler\n   * @method copy\n   * @param {Object} event Event object.\n   * @param {string} value Value of the event.\n   * @returns {undefined}\n   */\n  copy(event, { value }) {\n    this.props.copy(value ? [value] : this.state.selected);\n    this.onSelectNone();\n    this.props.addMessage(\n      null,\n      this.props.intl.formatMessage(messages.messageCopied),\n      'success',\n    );\n  }\n\n  /**\n   * Delete handler\n   * @method delete\n   * @param {Object} event Event object.\n   * @param {string} value Value of the event.\n   * @returns {undefined}\n   */\n  delete(event, { value }) {\n    this.setState({\n      showDelete: true,\n      itemsToDelete: value ? [value] : this.state.selected,\n    });\n  }\n\n  /**\n   * Upload handler\n   * @method upload\n   * @returns {undefined}\n   */\n  upload() {\n    this.setState({\n      showUpload: true,\n    });\n  }\n\n  /**\n   * Rename handler\n   * @method rename\n   * @returns {undefined}\n   */\n  rename() {\n    this.setState({\n      showRename: true,\n    });\n  }\n\n  /**\n   * Tags handler\n   * @method tags\n   * @returns {undefined}\n   */\n  tags() {\n    this.setState({\n      showTags: true,\n    });\n  }\n\n  /**\n   * Properties handler\n   * @method properties\n   * @returns {undefined}\n   */\n  properties() {\n    this.setState({\n      showProperties: true,\n    });\n  }\n\n  /**\n   * Workflow handler\n   * @method workflow\n   * @returns {undefined}\n   */\n  workflow() {\n    this.setState({\n      showWorkflow: true,\n    });\n  }\n\n  /**\n   * Paste handler\n   * @method paste\n   * @returns {undefined}\n   */\n  paste() {\n    if (this.props.action === 'copy') {\n      this.props.copyContent(\n        this.props.source,\n        getBaseUrl(this.props.pathname),\n      );\n    }\n    if (this.props.action === 'cut') {\n      this.props.moveContent(\n        this.props.source,\n        getBaseUrl(this.props.pathname),\n      );\n    }\n    this.props.addMessage(\n      null,\n      this.props.intl.formatMessage(messages.messagePasted),\n      'success',\n    );\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const selected = this.state.selected.length > 0;\n    const path = getBaseUrl(this.props.pathname);\n\n    return (\n      <Container id=\"page-contents\">\n        <Helmet title={this.props.intl.formatMessage(messages.contents)} />\n        <div className=\"container\">\n          <article id=\"content\">\n            <Confirm\n              open={this.state.showDelete}\n              header={this.props.intl.formatMessage(messages.deleteConfirm)}\n              content={\n                <div className=\"content\">\n                  <ul className=\"content\">\n                    {map(this.state.itemsToDelete, item => (\n                      <li key={item}>{this.getFieldById(item, 'title')}</li>\n                    ))}\n                  </ul>\n                </div>\n              }\n              onCancel={this.onDeleteCancel}\n              onConfirm={this.onDeleteOk}\n            />\n            <ContentsUploadModal\n              open={this.state.showUpload}\n              onCancel={this.onUploadCancel}\n              onOk={this.onUploadOk}\n              pathname={getBaseUrl(this.props.pathname)}\n            />\n            <ContentsRenameModal\n              open={this.state.showRename}\n              onCancel={this.onRenameCancel}\n              onOk={this.onRenameOk}\n              items={map(this.state.selected, item => ({\n                url: item,\n                title: this.getFieldById(item, 'title'),\n                id: this.getFieldById(item, 'id'),\n              }))}\n            />\n            <ContentsTagsModal\n              open={this.state.showTags}\n              onCancel={this.onTagsCancel}\n              onOk={this.onTagsOk}\n              items={map(this.state.selected, item => ({\n                url: item,\n                subjects: this.getFieldById(item, 'Subject'),\n              }))}\n            />\n            <ContentsPropertiesModal\n              open={this.state.showProperties}\n              onCancel={this.onPropertiesCancel}\n              onOk={this.onPropertiesOk}\n              items={this.state.selected}\n            />\n            {this.state.showWorkflow && (\n              <ContentsWorkflowModal\n                open={this.state.showWorkflow}\n                onCancel={this.onWorkflowCancel}\n                onOk={this.onWorkflowOk}\n                items={this.state.selected}\n              />\n            )}\n            <section id=\"content-core\">\n              <Segment.Group raised>\n                <Menu stackable attached>\n                  <Menu.Menu>\n                    <Menu.Item onClick={this.upload}>\n                      <Icon\n                        name=\"upload\"\n                        title={this.props.intl.formatMessage(messages.upload)}\n                      />\n                    </Menu.Item>\n                  </Menu.Menu>\n                  <Menu.Menu>\n                    <Menu.Item onClick={this.rename} disabled={!selected}>\n                      <Icon\n                        name=\"text cursor\"\n                        title={this.props.intl.formatMessage(messages.rename)}\n                      />\n                    </Menu.Item>\n                    <Menu.Item onClick={this.workflow} disabled={!selected}>\n                      <Icon\n                        name=\"random\"\n                        title={this.props.intl.formatMessage(messages.state)}\n                      />\n                    </Menu.Item>\n                    <Menu.Item onClick={this.tags} disabled={!selected}>\n                      <Icon\n                        name=\"tags\"\n                        title={this.props.intl.formatMessage(messages.tags)}\n                      />\n                    </Menu.Item>\n                    <Menu.Item onClick={this.properties} disabled={!selected}>\n                      <Icon\n                        name=\"setting\"\n                        title={this.props.intl.formatMessage(\n                          messages.properties,\n                        )}\n                      />\n                    </Menu.Item>\n                  </Menu.Menu>\n                  <Menu.Menu>\n                    <Menu.Item onClick={this.cut} disabled={!selected}>\n                      <Icon\n                        name=\"cut\"\n                        title={this.props.intl.formatMessage(messages.cut)}\n                      />\n                    </Menu.Item>\n                    <Menu.Item onClick={this.copy} disabled={!selected}>\n                      <Icon\n                        name=\"copy\"\n                        title={this.props.intl.formatMessage(messages.copy)}\n                      />\n                    </Menu.Item>\n                    <Menu.Item\n                      onClick={this.paste}\n                      disabled={!this.props.action}\n                    >\n                      <Icon\n                        name=\"paste\"\n                        title={this.props.intl.formatMessage(messages.paste)}\n                      />\n                    </Menu.Item>\n                    <Menu.Item onClick={this.delete} disabled={!selected}>\n                      <Icon\n                        name=\"trash\"\n                        title={this.props.intl.formatMessage(messages.delete)}\n                      />\n                    </Menu.Item>\n                  </Menu.Menu>\n                  <Menu.Menu position=\"right\">\n                    <div className=\"ui right aligned category search item\">\n                      <div className=\"ui transparent icon input\">\n                        <Input\n                          className=\"prompt\"\n                          type=\"text\"\n                          placeholder={this.props.intl.formatMessage(\n                            messages.filter,\n                          )}\n                          value={this.state.filter}\n                          onChange={this.onChangeFilter}\n                        />\n                        <i className=\"search link icon\" />\n                      </div>\n                      <div className=\"results\" />\n                    </div>\n                  </Menu.Menu>\n                </Menu>\n                <Segment secondary attached>\n                  <Breadcrumb>\n                    <Link\n                      to=\"/contents\"\n                      className=\"section\"\n                      title={this.props.intl.formatMessage(messages.home)}\n                    >\n                      <Icon name=\"home\" />\n                    </Link>\n                    {this.props.breadcrumbs.map(\n                      (breadcrumb, index, breadcrumbs) => [\n                        <Breadcrumb.Divider\n                          key={`divider-${breadcrumb.url}`}\n                        />,\n                        index < breadcrumbs.length - 1 ? (\n                          <Link\n                            key={breadcrumb.url}\n                            to={`${breadcrumb.url}/contents`}\n                            className=\"section\"\n                          >\n                            {breadcrumb.title}\n                          </Link>\n                        ) : (\n                          <Breadcrumb.Section key={breadcrumb.url} active>\n                            {breadcrumb.title}\n                          </Breadcrumb.Section>\n                        ),\n                      ],\n                    )}\n                  </Breadcrumb>\n                  <Dropdown item icon=\"ellipsis horizontal\" className=\"right\">\n                    <Dropdown.Menu className=\"left\">\n                      <Dropdown.Header\n                        content={this.props.intl.formatMessage(\n                          messages.selectColumns,\n                        )}\n                      />\n                      <Dropdown.Menu scrolling>\n                        {map(this.state.index.order, index => (\n                          <Dropdown.Item\n                            key={index}\n                            value={index}\n                            onClick={this.onSelectIndex}\n                          >\n                            {this.state.index.values[index].selected ? (\n                              <Icon name=\"check square\" color=\"blue\" />\n                            ) : (\n                              <Icon name=\"square outline\" />\n                            )}\n                            {this.state.index.values[index].label}\n                          </Dropdown.Item>\n                        ))}\n                      </Dropdown.Menu>\n                    </Dropdown.Menu>\n                  </Dropdown>\n                </Segment>\n                <Table selectable compact singleLine attached>\n                  <Table.Header>\n                    <Table.Row>\n                      <Table.HeaderCell>\n                        <Dropdown\n                          trigger={<Icon name=\"sort content ascending\" />}\n                          icon={null}\n                          simple\n                        >\n                          <Dropdown.Menu>\n                            <Dropdown.Header\n                              content={this.props.intl.formatMessage(\n                                messages.rearrangeBy,\n                              )}\n                            />\n                            {map(\n                              [\n                                'id',\n                                'sortable_title',\n                                'EffectiveDate',\n                                'CreationDate',\n                                'ModificationDate',\n                                'Type',\n                              ],\n                              index => (\n                                <Dropdown.Item key={index}>\n                                  <Icon name=\"dropdown\" />\n                                  {Indexes[index].label}\n                                  <Dropdown.Menu>\n                                    <Dropdown.Item\n                                      onClick={this.onSortItems}\n                                      value={`${index}|ascending`}\n                                    >\n                                      <Icon name=\"sort alphabet ascending\" />{' '}\n                                      <FormattedMessage\n                                        id=\"Ascending\"\n                                        defaultMessage=\"Ascending\"\n                                      />\n                                    </Dropdown.Item>\n                                    <Dropdown.Item\n                                      onClick={this.onSortItems}\n                                      value={`${index}|descending`}\n                                    >\n                                      <Icon name=\"sort alphabet descending\" />{' '}\n                                      <FormattedMessage\n                                        id=\"Descending\"\n                                        defaultMessage=\"Descending\"\n                                      />\n                                    </Dropdown.Item>\n                                  </Dropdown.Menu>\n                                </Dropdown.Item>\n                              ),\n                            )}\n                          </Dropdown.Menu>\n                        </Dropdown>\n                      </Table.HeaderCell>\n                      <Table.HeaderCell>\n                        <Dropdown\n                          trigger={\n                            <Icon\n                              name={\n                                this.state.selected.length === 0\n                                  ? 'square outline'\n                                  : this.state.selected.length ===\n                                    this.state.items.length\n                                    ? 'check square'\n                                    : 'minus square'\n                              }\n                              color={\n                                this.state.selected.length > 0\n                                  ? 'blue'\n                                  : 'black'\n                              }\n                            />\n                          }\n                          icon={null}\n                        >\n                          <Dropdown.Menu>\n                            <Dropdown.Header\n                              content={this.props.intl.formatMessage(\n                                messages.select,\n                              )}\n                            />\n                            <Dropdown.Item onClick={this.onSelectAll}>\n                              <Icon name=\"check square\" color=\"blue\" />{' '}\n                              <FormattedMessage id=\"All\" defaultMessage=\"All\" />\n                            </Dropdown.Item>\n                            <Dropdown.Item onClick={this.onSelectNone}>\n                              <Icon name=\"square outline\" />{' '}\n                              <FormattedMessage\n                                id=\"None\"\n                                defaultMessage=\"None\"\n                              />\n                            </Dropdown.Item>\n                            <Dropdown.Divider />\n                            <Dropdown.Header\n                              content={this.props.intl.formatMessage(\n                                messages.selected,\n                                { count: this.state.selected.length },\n                              )}\n                            />\n                            <Input\n                              icon=\"search\"\n                              iconPosition=\"left\"\n                              className=\"search\"\n                              placeholder={this.props.intl.formatMessage(\n                                messages.filter,\n                              )}\n                            />\n                            <Dropdown.Menu scrolling>\n                              {map(this.state.selected, item => (\n                                <Dropdown.Item\n                                  key={item}\n                                  value={item}\n                                  onClick={this.onDeselect}\n                                >\n                                  <Icon name=\"delete\" />{' '}\n                                  {this.getFieldById(item, 'title')}\n                                </Dropdown.Item>\n                              ))}\n                            </Dropdown.Menu>\n                          </Dropdown.Menu>\n                        </Dropdown>\n                      </Table.HeaderCell>\n                      <Table.HeaderCell\n                        width={Math.ceil(16 / this.state.index.selectedCount)}\n                      >\n                        <FormattedMessage id=\"Title\" defaultMessage=\"Title\" />\n                      </Table.HeaderCell>\n                      {map(\n                        this.state.index.order,\n                        (index, order) =>\n                          this.state.index.values[index].selected && (\n                            <ContentsIndexHeader\n                              key={index}\n                              width={Math.ceil(\n                                16 / this.state.index.selectedCount,\n                              )}\n                              label={this.state.index.values[index].label}\n                              order={order}\n                              onOrderIndex={this.onOrderIndex}\n                            />\n                          ),\n                      )}\n                      <Table.HeaderCell textAlign=\"right\">\n                        <FormattedMessage\n                          id=\"Actions\"\n                          defaultMessage=\"Actions\"\n                        />\n                      </Table.HeaderCell>\n                    </Table.Row>\n                  </Table.Header>\n                  <Table.Body>\n                    {this.state.items.map((item, order) => (\n                      <ContentsItem\n                        key={item['@id']}\n                        item={item}\n                        order={order}\n                        selected={\n                          indexOf(this.state.selected, item['@id']) !== -1\n                        }\n                        onClick={this.onSelect}\n                        indexes={filter(\n                          map(this.state.index.order, index => ({\n                            id: index,\n                            type: this.state.index.values[index].type,\n                          })),\n                          index => this.state.index.values[index.id].selected,\n                        )}\n                        onCut={this.cut}\n                        onCopy={this.copy}\n                        onDelete={this.delete}\n                        onOrderItem={this.onOrderItem}\n                        onMoveToTop={this.onMoveToTop}\n                        onMoveToBottom={this.onMoveToBottom}\n                      />\n                    ))}\n                  </Table.Body>\n                </Table>\n\n                <Pagination\n                  current={this.state.currentPage}\n                  total={Math.ceil(this.props.total / this.state.pageSize)}\n                  pageSize={this.state.pageSize}\n                  pageSizes={[15, 30, 50]}\n                  onChangePage={this.onChangePage}\n                  onChangePageSize={this.onChangePageSize}\n                />\n              </Segment.Group>\n            </section>\n          </article>\n        </div>\n        <Portal node={__CLIENT__ && document.getElementById('toolbar')}>\n          <Toolbar\n            pathname={this.props.pathname}\n            inner={\n              <Link to={`${path}`} className=\"item\">\n                <Icon\n                  name=\"arrow left\"\n                  size=\"big\"\n                  color=\"blue\"\n                  title={this.props.intl.formatMessage(messages.back)}\n                />\n              </Link>\n            }\n          />\n        </Portal>\n      </Container>\n    );\n  }\n}\n","/**\n * Contents index header component.\n * @module components/manage/Contents/ContentsIndexHeader\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { DragSource, DropTarget } from 'react-dnd';\n\nconst widthValues = [\n  'one',\n  'two',\n  'three',\n  'four',\n  'five',\n  'six',\n  'seven',\n  'eight',\n  'nine',\n  'ten',\n  'eleven',\n  'twelve',\n  'thirteen',\n  'fourteen',\n  'fiveteen',\n  'sixteen',\n];\n\n/**\n * Contents index header component class.\n * @function ContentsIndexHeaderComponent\n * @returns {string} Markup of the component.\n */\nexport const ContentsIndexHeaderComponent = ({\n  width,\n  label,\n  connectDragSource,\n  connectDropTarget,\n  isDragging,\n}) =>\n  connectDropTarget(\n    connectDragSource(\n      <th\n        className={`${widthValues[width - 1]} wide`}\n        style={{ opacity: isDragging ? 0.5 : 1, cursor: 'move' }}\n      >\n        {label}\n      </th>,\n    ),\n  );\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nContentsIndexHeaderComponent.propTypes = {\n  width: PropTypes.number.isRequired,\n  label: PropTypes.string.isRequired,\n  connectDragSource: PropTypes.func.isRequired,\n  connectDropTarget: PropTypes.func.isRequired,\n  isDragging: PropTypes.bool.isRequired,\n  order: PropTypes.number.isRequired,\n  onOrderIndex: PropTypes.func.isRequired,\n};\n\nexport default DropTarget(\n  'index',\n  {\n    hover(props, monitor) {\n      const dragOrder = monitor.getItem().order;\n      const hoverOrder = props.order;\n\n      if (dragOrder === hoverOrder) {\n        return;\n      }\n\n      props.onOrderIndex(dragOrder, hoverOrder - dragOrder);\n\n      monitor.getItem().order = hoverOrder;\n    },\n  },\n  connect => ({\n    connectDropTarget: connect.dropTarget(),\n  }),\n)(\n  DragSource(\n    'index',\n    {\n      beginDrag(props) {\n        return {\n          id: props.label,\n          order: props.order,\n        };\n      },\n    },\n    (connect, monitor) => ({\n      connectDragSource: connect.dragSource(),\n      isDragging: monitor.isDragging(),\n    }),\n  )(ContentsIndexHeaderComponent),\n);\n","/**\n * Contents item component.\n * @module components/manage/Contents/ContentsItem\n */\n\nimport React from 'react';\nimport { Icon, Table, Dropdown } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { map } from 'lodash';\nimport moment from 'moment';\nimport { DragSource, DropTarget } from 'react-dnd';\nimport { FormattedMessage } from 'react-intl';\n\nimport { getIcon } from '../../../helpers';\n\n/**\n * Contents item component class.\n * @function ContentsItemComponent\n * @returns {string} Markup of the component.\n */\nexport const ContentsItemComponent = ({\n  item,\n  selected,\n  onClick,\n  indexes,\n  onCut,\n  onCopy,\n  onDelete,\n  onMoveToTop,\n  onMoveToBottom,\n  connectDragPreview,\n  connectDragSource,\n  connectDropTarget,\n  isDragging,\n  order,\n}) =>\n  connectDropTarget(\n    connectDragPreview(\n      <tr key={item['@id']} style={{ opacity: isDragging ? 0 : 1 }}>\n        <Table.Cell>\n          {connectDragSource(\n            <i aria-hidden=\"true\" className=\"grey content icon drag handle\" />,\n          )}\n        </Table.Cell>\n        <Table.Cell>\n          <Icon\n            name={selected ? 'check square' : 'square outline'}\n            color={selected ? 'blue' : 'black'}\n            value={item['@id']}\n            onClick={onClick}\n          />\n        </Table.Cell>\n        <Table.Cell>\n          <Link to={`${item['@id']}${item.is_folderish ? '/contents' : ''}`}>\n            <Icon name={getIcon(item['@type'], item.is_folderish)} />{' '}\n            {item.title}\n          </Link>\n        </Table.Cell>\n        {map(indexes, index => (\n          <Table.Cell key={index.id}>\n            {index.type === 'boolean' && (item[index.id] ? 'Yes' : 'No')}\n            {index.type === 'string' && item[index.id]}\n            {index.type === 'date' && (\n              <span\n                title={\n                  item[index.id] !== 'None'\n                    ? moment(item[index.id]).format('LLLL')\n                    : 'None'\n                }\n              >\n                {item[index.id] !== 'None'\n                  ? moment(item[index.id]).fromNow()\n                  : 'None'}\n              </span>\n            )}\n          </Table.Cell>\n        ))}\n        <Table.Cell textAlign=\"right\">\n          <Dropdown icon=\"ellipsis horizontal\">\n            <Dropdown.Menu className=\"left\">\n              <Link className=\"item\" to={`${item['@id']}/edit`}>\n                <Icon name=\"write\" />{' '}\n                <FormattedMessage id=\"Edit\" defaultMessage=\"Edit\" />\n              </Link>\n              <Link className=\"item\" to={item['@id']}>\n                <Icon name=\"eye\" />{' '}\n                <FormattedMessage id=\"View\" defaultMessage=\"View\" />\n              </Link>\n              <Dropdown.Divider />\n              <Dropdown.Item onClick={onCut} value={item['@id']}>\n                <Icon name=\"cut\" />{' '}\n                <FormattedMessage id=\"Cut\" defaultMessage=\"Cut\" />\n              </Dropdown.Item>\n              <Dropdown.Item onClick={onCopy} value={item['@id']}>\n                <Icon name=\"copy\" />{' '}\n                <FormattedMessage id=\"Copy\" defaultMessage=\"Copy\" />\n              </Dropdown.Item>\n              <Dropdown.Item onClick={onDelete} value={item['@id']}>\n                <Icon name=\"trash\" />{' '}\n                <FormattedMessage id=\"Delete\" defaultMessage=\"Delete\" />\n              </Dropdown.Item>\n              <Dropdown.Divider />\n              <Dropdown.Item onClick={onMoveToTop} value={order}>\n                <Icon name=\"long arrow up\" />{' '}\n                <FormattedMessage\n                  id=\"Move to top of folder\"\n                  defaultMessage=\"Move to top of folder\"\n                />\n              </Dropdown.Item>\n              <Dropdown.Item onClick={onMoveToBottom} value={order}>\n                <Icon name=\"long arrow down\" />{' '}\n                <FormattedMessage\n                  id=\"Move to bottom of folder\"\n                  defaultMessage=\"Move to bottom of folder\"\n                />\n              </Dropdown.Item>\n            </Dropdown.Menu>\n          </Dropdown>\n        </Table.Cell>\n      </tr>,\n    ),\n  );\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nContentsItemComponent.propTypes = {\n  item: PropTypes.shape({\n    '@id': PropTypes.string,\n    title: PropTypes.string,\n    is_folderish: PropTypes.bool,\n    '@type': PropTypes.string,\n  }).isRequired,\n  selected: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired,\n  indexes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      type: PropTypes.string,\n    }),\n  ).isRequired,\n  onCut: PropTypes.func.isRequired,\n  onCopy: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onMoveToTop: PropTypes.func.isRequired,\n  onMoveToBottom: PropTypes.func.isRequired,\n  connectDragPreview: PropTypes.func.isRequired,\n  connectDragSource: PropTypes.func.isRequired,\n  connectDropTarget: PropTypes.func.isRequired,\n  isDragging: PropTypes.bool.isRequired,\n  order: PropTypes.number.isRequired,\n  onOrderItem: PropTypes.func.isRequired,\n};\n\nexport default DropTarget(\n  'item',\n  {\n    hover(props, monitor) {\n      const dragOrder = monitor.getItem().order;\n      const hoverOrder = props.order;\n\n      if (dragOrder === hoverOrder) {\n        return;\n      }\n\n      props.onOrderItem(dragOrder, hoverOrder - dragOrder);\n\n      monitor.getItem().order = hoverOrder;\n    },\n  },\n  connect => ({\n    connectDropTarget: connect.dropTarget(),\n  }),\n)(\n  DragSource(\n    'item',\n    {\n      beginDrag(props) {\n        return {\n          id: props.item['@id'],\n          order: props.order,\n        };\n      },\n    },\n    (connect, monitor) => ({\n      connectDragSource: connect.dragSource(),\n      connectDragPreview: connect.dragPreview(),\n      isDragging: monitor.isDragging(),\n    }),\n  )(ContentsItemComponent),\n);\n","/**\n * Contents properties modal.\n * @module components/manage/Contents/ContentsPropertiesModal\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { isEmpty, map } from 'lodash';\nimport { defineMessages, injectIntl, intlShape } from 'react-intl';\n\nimport { updateContent } from '../../../actions';\nimport { ModalForm } from '../../../components';\n\nconst messages = defineMessages({\n  properties: {\n    id: 'Properties',\n    defaultMessage: 'Properties',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  effectiveTitle: {\n    id: 'Publishing Date',\n    defaultMessage: 'Publishing Date',\n  },\n  effectiveDescription: {\n    id:\n      'If this date is in the future, the content will not show up in listings and searches until this date.',\n    defaultMessage:\n      'If this date is in the future, the content will not show up in listings and searches until this date.',\n  },\n  expiresTitle: {\n    id: 'Expiration Date',\n    defaultMessage: 'Expiration Date',\n  },\n  expiresDescription: {\n    id:\n      'When this date is reached, the content will nolonger be visible in listings and searches.',\n    defaultMessage:\n      'When this date is reached, the content will nolonger be visible in listings and searches.',\n  },\n  rightsTitle: {\n    id: 'Rights',\n    defaultMessage: 'Rights',\n  },\n  rightsDescription: {\n    id: 'Copyright statement or other rights information on this item.',\n    defaultMessage:\n      'Copyright statement or other rights information on this item.',\n  },\n  creatorsTitle: {\n    id: 'Creators',\n    defaultMessage: 'Creators',\n  },\n  creatorsDescription: {\n    id:\n      'Persons responsible for creating the content of this item. Please enter a list of user names, one per line. The principal creator should come first.',\n    defaultMessage:\n      'Persons responsible for creating the content of this item. Please enter a list of user names, one per line. The principal creator should come first.',\n  },\n  excludeFromNavTitle: {\n    id: 'Exclude from navigation',\n    defaultMessage: 'Exclude from navigation',\n  },\n  excludeFromNavDescription: {\n    id: 'If selected, this item will not appear in the navigation tree',\n    defaultMessage:\n      'If selected, this item will not appear in the navigation tree',\n  },\n});\n\n@injectIntl\n@connect(\n  state => ({\n    request: state.content.update,\n  }),\n  dispatch => bindActionCreators({ updateContent }, dispatch),\n)\n/**\n * ContentsPropertiesModal class.\n * @class ContentsPropertiesModal\n * @extends Component\n */\nexport default class ContentsPropertiesModal extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    updateContent: PropTypes.func.isRequired,\n    items: PropTypes.arrayOf(PropTypes.string).isRequired,\n    request: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    open: PropTypes.bool.isRequired,\n    onOk: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentsUploadModal\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded) {\n      this.props.onOk();\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {Object} data Form data\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    if (isEmpty(data)) {\n      this.props.onOk();\n    } else {\n      this.props.updateContent(\n        this.props.items,\n        map(this.props.items, () => data),\n      );\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      this.props.open && (\n        <ModalForm\n          open={this.props.open}\n          onSubmit={this.onSubmit}\n          onCancel={this.props.onCancel}\n          title={this.props.intl.formatMessage(messages.properties)}\n          schema={{\n            fieldsets: [\n              {\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n                fields: [\n                  'effective',\n                  'expires',\n                  'rights',\n                  'creators',\n                  'exclude_from_nav',\n                ],\n              },\n            ],\n            properties: {\n              effective: {\n                description: this.props.intl.formatMessage(\n                  messages.effectiveDescription,\n                ),\n                title: this.props.intl.formatMessage(messages.effectiveTitle),\n                type: 'string',\n                widget: 'datetime',\n              },\n              expires: {\n                description: this.props.intl.formatMessage(\n                  messages.expiresDescription,\n                ),\n                title: this.props.intl.formatMessage(messages.expiresTitle),\n                type: 'string',\n                widget: 'datetime',\n              },\n              rights: {\n                description: this.props.intl.formatMessage(\n                  messages.rightsDescription,\n                ),\n                title: this.props.intl.formatMessage(messages.rightsTitle),\n                type: 'string',\n                widget: 'textarea',\n              },\n              creators: {\n                description: this.props.intl.formatMessage(\n                  messages.creatorsDescription,\n                ),\n                title: this.props.intl.formatMessage(messages.creatorsTitle),\n                type: 'array',\n              },\n              exclude_from_nav: {\n                default: false,\n                description: this.props.intl.formatMessage(\n                  messages.excludeFromNavDescription,\n                ),\n                title: this.props.intl.formatMessage(\n                  messages.excludeFromNavTitle,\n                ),\n                type: 'boolean',\n              },\n            },\n            required: [],\n          }}\n        />\n      )\n    );\n  }\n}\n","/**\n * Contents rename modal.\n * @module components/manage/Contents/ContentsRenameModal\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { concat, merge, map } from 'lodash';\nimport { defineMessages, injectIntl, intlShape } from 'react-intl';\n\nimport { updateContent } from '../../../actions';\nimport { ModalForm } from '../../../components';\n\nconst messages = defineMessages({\n  renameItems: {\n    id: 'Rename items',\n    defaultMessage: 'Rename items',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  title: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  shortName: {\n    id: 'Short name',\n    defaultMessage: 'Short name',\n  },\n  shortNameDescription: {\n    id: 'This name will be displayed in the URL.',\n    defaultMessage: 'This name will be displayed in the URL.',\n  },\n});\n\n@injectIntl\n@connect(\n  state => ({\n    request: state.content.update,\n  }),\n  dispatch => bindActionCreators({ updateContent }, dispatch),\n)\n/**\n * ContentsRenameModal class.\n * @class ContentsRenameModal\n * @extends Component\n */\nexport default class ContentsRenameModal extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    updateContent: PropTypes.func.isRequired,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string,\n        title: PropTypes.string,\n        url: PropTypes.string,\n      }),\n    ).isRequired,\n    request: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    open: PropTypes.bool.isRequired,\n    onOk: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentsUploadModal\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded) {\n      this.props.onOk();\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {Object} data Form data\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.updateContent(\n      map(this.props.items, item => item.url),\n      map(this.props.items, (item, index) => ({\n        id: data[`${index}_id`],\n        title: data[`${index}_title`],\n      })),\n    );\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      this.props.open && (\n        <ModalForm\n          open={this.props.open}\n          onSubmit={this.onSubmit}\n          onCancel={this.props.onCancel}\n          formData={merge(\n            ...map(this.props.items, (item, index) => ({\n              [`${index}_title`]: item.title,\n              [`${index}_id`]: item.id,\n            })),\n          )}\n          title={this.props.intl.formatMessage(messages.renameItems)}\n          schema={{\n            fieldsets: [\n              {\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n                fields: concat(\n                  ...map(this.props.items, (item, index) => [\n                    `${index}_title`,\n                    `${index}_id`,\n                  ]),\n                ),\n              },\n            ],\n            properties: merge(\n              ...map(this.props.items, (item, index) => ({\n                [`${index}_title`]: {\n                  title: this.props.intl.formatMessage(messages.title),\n                  type: 'string',\n                  description: '',\n                },\n                [`${index}_id`]: {\n                  title: this.props.intl.formatMessage(messages.shortName),\n                  type: 'string',\n                  description: this.props.intl.formatMessage(\n                    messages.shortNameDescription,\n                  ),\n                },\n              })),\n            ),\n            required: [],\n          }}\n        />\n      )\n    );\n  }\n}\n","/**\n * Contents tags modal.\n * @module components/manage/Contents/ContentsTagsModal\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { without, union, map } from 'lodash';\nimport { defineMessages, injectIntl, intlShape } from 'react-intl';\n\nimport { updateContent } from '../../../actions';\nimport { ModalForm } from '../../../components';\n\nconst messages = defineMessages({\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  tags: {\n    id: 'Tags',\n    defaultMessage: 'Tags',\n  },\n  tagsToRemove: {\n    id: 'Tags to remove',\n    defaultMessage: 'Tags to remove',\n  },\n  tagsToAdd: {\n    id: 'Tags to add',\n    defaultMessage: 'Tags to add',\n  },\n});\n\n@injectIntl\n@connect(\n  state => ({\n    request: state.content.update,\n  }),\n  dispatch => bindActionCreators({ updateContent }, dispatch),\n)\n/**\n * ContentsTagsModal class.\n * @class ContentsTagsModal\n * @extends Component\n */\nexport default class ContentsTagsModal extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    updateContent: PropTypes.func.isRequired,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        subjects: PropTypes.arrayOf(PropTypes.string),\n        url: PropTypes.string,\n      }),\n    ).isRequired,\n    request: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    open: PropTypes.bool.isRequired,\n    onOk: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentsUploadModal\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded) {\n      this.props.onOk();\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {Object} data Form data\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.updateContent(\n      map(this.props.items, item => item.url),\n      map(this.props.items, item => ({\n        subjects: union(\n          without(item.subjects, ...data.tags_to_remove),\n          data.tags_to_add,\n        ),\n      })),\n    );\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      this.props.open && (\n        <ModalForm\n          open={this.props.open}\n          onSubmit={this.onSubmit}\n          onCancel={this.props.onCancel}\n          title={this.props.intl.formatMessage(messages.tags)}\n          formData={{\n            tags_to_remove: [],\n            tags_to_add: [],\n          }}\n          schema={{\n            fieldsets: [\n              {\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n                fields: ['tags_to_remove', 'tags_to_add'],\n              },\n            ],\n            properties: {\n              tags_to_remove: {\n                type: 'array',\n                title: this.props.intl.formatMessage(messages.tagsToRemove),\n              },\n              tags_to_add: {\n                type: 'array',\n                title: this.props.intl.formatMessage(messages.tagsToAdd),\n              },\n            },\n            required: [],\n          }}\n        />\n      )\n    );\n  }\n}\n","/**\n * Contents upload modal.\n * @module components/manage/Contents/ContentsUploadModal\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport {\n  Button,\n  Dimmer,\n  Header,\n  Icon,\n  Image,\n  Loader,\n  Modal,\n  Table,\n  Segment,\n} from 'semantic-ui-react';\nimport Dropzone from 'react-dropzone';\nimport { concat, filter, map } from 'lodash';\nimport moment from 'moment';\nimport filesize from 'filesize';\nimport { readAsDataURL } from 'promise-file-reader';\nimport {\n  FormattedMessage,\n  defineMessages,\n  injectIntl,\n  intlShape,\n} from 'react-intl';\n\nimport { createContent } from '../../../actions';\n\nconst messages = defineMessages({\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  upload: {\n    id: 'Upload {count, plural, one {# file} other {# files}}',\n    defaultMessage: 'Upload {count, plural, one {# file} other {# files}}',\n  },\n});\n\n@injectIntl\n@connect(\n  state => ({\n    request: state.content.create,\n  }),\n  dispatch => bindActionCreators({ createContent }, dispatch),\n)\n/**\n * ContentsUploadModal class.\n * @class ContentsUploadModal\n * @extends Component\n */\nexport default class ContentsUploadModal extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    createContent: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    request: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    open: PropTypes.bool.isRequired,\n    onOk: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentsUploadModal\n   */\n  constructor(props) {\n    super(props);\n    this.onRemoveFile = this.onRemoveFile.bind(this);\n    this.onDrop = this.onDrop.bind(this);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      files: [],\n    };\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded) {\n      this.props.onOk();\n      this.setState({\n        files: [],\n      });\n    }\n  }\n\n  /**\n   * Remove file handler\n   * @method onRemoveFile\n   * @param {Object} event Event object\n   * @returns {undefined}\n   */\n  onRemoveFile(event) {\n    this.setState({\n      files: filter(\n        this.state.files,\n        (file, index) =>\n          index !== parseInt(event.target.getAttribute('value'), 10),\n      ),\n    });\n  }\n\n  /**\n   * Drop handler\n   * @method onDrop\n   * @param {array} files File objects\n   * @returns {undefined}\n   */\n  onDrop(files) {\n    this.setState({\n      files: concat(this.state.files, files),\n    });\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.onCancel();\n    this.setState({\n      files: [],\n    });\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @returns {undefined}\n   */\n  onSubmit() {\n    Promise.all(map(this.state.files, file => readAsDataURL(file))).then(\n      files => {\n        this.props.createContent(\n          this.props.pathname,\n          map(this.state.files, (file, index) => {\n            const fields = files[index].match(/^data:(.*);(.*),(.*)$/);\n            const image = fields[1].split('/')[0] === 'image';\n            return {\n              '@type': image ? 'Image' : 'File',\n              title: file.name,\n              [image ? 'image' : 'file']: {\n                data: fields[3],\n                encoding: fields[2],\n                'content-type': fields[1],\n                filename: file.name,\n              },\n            };\n          }),\n        );\n      },\n    );\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      this.props.open && (\n        <Modal open={this.props.open}>\n          <Header>\n            <FormattedMessage id=\"Upload files\" defaultMessage=\"Upload files\" />\n          </Header>\n          <Dimmer active={this.props.request.loading}>\n            <Loader>\n              <FormattedMessage\n                id=\"Uploading files\"\n                defaultMessage=\"Uploading files\"\n              />\n            </Loader>\n          </Dimmer>\n          <Modal.Content>\n            <Dropzone onDrop={this.onDrop} className=\"dropzone\">\n              <Segment className=\"dashed\">\n                <Table basic=\"very\">\n                  <Table.Body>\n                    <Table.Row>\n                      <Table.Cell>\n                        <FormattedMessage\n                          id=\"Drag and drop files from your computer onto this area or click the “Browse” button.\"\n                          defaultMessage=\"Drag and drop files from your computer onto this area or click the “Browse” button.\"\n                        />\n                      </Table.Cell>\n                      <Table.Cell>\n                        <Button primary floated=\"right\">\n                          <FormattedMessage\n                            id=\"Browse\"\n                            defaultMessage=\"Browse\"\n                          />\n                        </Button>\n                      </Table.Cell>\n                    </Table.Row>\n                  </Table.Body>\n                </Table>\n              </Segment>\n            </Dropzone>\n            {this.state.files.length > 0 && (\n              <Table compact singleLine>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell width={8}>\n                      <FormattedMessage\n                        id=\"Filename\"\n                        defaultMessage=\"Filename\"\n                      />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell width={4}>\n                      <FormattedMessage\n                        id=\"Last modified\"\n                        defaultMessage=\"Last modified\"\n                      />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell width={4}>\n                      <FormattedMessage\n                        id=\"File size\"\n                        defaultMessage=\"File size\"\n                      />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell width={4}>\n                      <FormattedMessage id=\"Preview\" defaultMessage=\"Preview\" />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell />\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {map(this.state.files, (file, index) => (\n                    <Table.Row key={file.name}>\n                      <Table.Cell>{file.name}</Table.Cell>\n                      <Table.Cell>\n                        {moment(file.lastModifiedDate).fromNow()}\n                      </Table.Cell>\n                      <Table.Cell>\n                        {filesize(file.size, { round: 0 })}\n                      </Table.Cell>\n                      <Table.Cell>\n                        {file.type.split('/')[0] === 'image' ? (\n                          <Image src={file.preview} height={60} />\n                        ) : (\n                          <Image src=\"//:0\" height={60} />\n                        )}\n                      </Table.Cell>\n                      <Table.Cell>\n                        <Icon\n                          name=\"close\"\n                          value={index}\n                          link\n                          onClick={this.onRemoveFile}\n                        />\n                      </Table.Cell>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n              </Table>\n            )}\n          </Modal.Content>\n          <Modal.Actions>\n            {this.state.files.length > 0 && (\n              <Button\n                basic\n                circular\n                primary\n                floated=\"right\"\n                icon=\"arrow right\"\n                onClick={this.onSubmit}\n                title={this.props.intl.formatMessage(messages.upload, {\n                  count: this.state.files.length,\n                })}\n                size=\"big\"\n              />\n            )}\n            <Button\n              basic\n              circular\n              secondary\n              icon=\"remove\"\n              title={this.props.intl.formatMessage(messages.cancel)}\n              floated=\"right\"\n              size=\"big\"\n              onClick={this.onCancel}\n            />\n          </Modal.Actions>\n        </Modal>\n      )\n    );\n  }\n}\n","/**\n * Contents workflow modal.\n * @module components/manage/Contents/ContentsWorkflowModal\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { concat, filter, last, map, uniqBy } from 'lodash';\nimport { defineMessages, injectIntl, intlShape } from 'react-intl';\n\nimport { getWorkflow, transitionWorkflow } from '../../../actions';\nimport { ModalForm } from '../../../components';\n\nconst messages = defineMessages({\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  stateTitle: {\n    id: 'Change State',\n    defaultMessage: 'Change State',\n  },\n  stateDescription: {\n    id: 'Select the transition to be used for modifying the items state.',\n    defaultMessage:\n      'Select the transition to be used for modifying the items state.',\n  },\n});\n\n@injectIntl\n@connect(\n  state => ({\n    request: state.workflow.transition,\n    workflows: state.workflow.multiple,\n  }),\n  dispatch => bindActionCreators({ getWorkflow, transitionWorkflow }, dispatch),\n)\n/**\n * ContentsWorkflowModal class.\n * @class ContentsWorkflowModal\n * @extends Component\n */\nexport default class ContentsWorkflowModal extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getWorkflow: PropTypes.func.isRequired,\n    transitionWorkflow: PropTypes.func.isRequired,\n    items: PropTypes.arrayOf(PropTypes.string).isRequired,\n    request: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    workflows: PropTypes.arrayOf(\n      PropTypes.shape({\n        transition: PropTypes.shape({\n          '@id': PropTypes.string,\n          title: PropTypes.string,\n        }),\n      }),\n    ).isRequired,\n    open: PropTypes.bool.isRequired,\n    onOk: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentsUploadModal\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  componentWillMount() {\n    this.props.getWorkflow(this.props.items);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded) {\n      this.props.onOk();\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {string} state New state\n   * @returns {undefined}\n   */\n  onSubmit({ state }) {\n    if (!state) {\n      return;\n    }\n\n    this.props.transitionWorkflow(\n      filter(\n        map(\n          concat(\n            ...map(this.props.workflows, workflow => workflow.transitions),\n          ),\n          item => item['@id'],\n        ),\n        x => last(x.split('/')) === state,\n      ),\n    );\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      this.props.open &&\n      this.props.workflows.length > 0 && (\n        <ModalForm\n          open={this.props.open}\n          onSubmit={this.onSubmit}\n          onCancel={this.props.onCancel}\n          title={this.props.intl.formatMessage(messages.stateTitle)}\n          schema={{\n            fieldsets: [\n              {\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n                fields: ['state'],\n              },\n            ],\n            properties: {\n              state: {\n                description: this.props.intl.formatMessage(\n                  messages.stateDescription,\n                ),\n                title: this.props.intl.formatMessage(messages.stateTitle),\n                type: 'string',\n                choices: map(\n                  uniqBy(\n                    concat(\n                      ...map(\n                        this.props.workflows,\n                        workflow => workflow.transitions,\n                      ),\n                    ),\n                    x => x.title,\n                  ),\n                  y => [last(y['@id'].split('/')), y.title],\n                ),\n              },\n            },\n            required: [],\n          }}\n        />\n      )\n    );\n  }\n}\n","/**\n * Controlpanel component.\n * @module components/manage/Controlpanels/Controlpanel\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Router, Link } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport Helmet from 'react-helmet';\nimport { Portal } from 'react-portal';\nimport { Icon, Container } from 'semantic-ui-react';\nimport { defineMessages, injectIntl, intlShape } from 'react-intl';\n\nimport { Form, Toolbar } from '../../../components';\nimport {\n  addMessage,\n  updateControlpanel,\n  getControlpanel,\n} from '../../../actions';\nimport { getBaseUrl } from '../../../helpers';\n\nconst messages = defineMessages({\n  changesSaved: {\n    id: 'Changes saved.',\n    defaultMessage: 'Changes saved.',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n});\n\n@injectIntl\n@connect(\n  (state, props) => ({\n    controlpanel: state.controlpanels.controlpanel,\n    updateRequest: state.controlpanels.update,\n    id: props.match.params.id,\n    pathname: props.location.pathname,\n  }),\n  dispatch =>\n    bindActionCreators(\n      { addMessage, updateControlpanel, getControlpanel },\n      dispatch,\n    ),\n)\n/**\n * Controlpanel class.\n * @class Controlpanel\n * @extends Component\n */\nexport default class Controlpanel extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    addMessage: PropTypes.func.isRequired,\n    updateControlpanel: PropTypes.func.isRequired,\n    getControlpanel: PropTypes.func.isRequired,\n    id: PropTypes.string.isRequired,\n    updateRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    controlpanel: PropTypes.shape({\n      '@id': PropTypes.string,\n      data: PropTypes.Object,\n      schema: PropTypes.Object,\n      title: PropTypes.string,\n    }),\n    intl: intlShape.isRequired,\n    pathname: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    controlpanel: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Controlpanel\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  componentWillMount() {\n    this.props.getControlpanel(this.props.id);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (this.props.updateRequest.loading && nextProps.updateRequest.loaded) {\n      this.props.addMessage(\n        null,\n        this.props.intl.formatMessage(messages.changesSaved),\n        'info',\n      );\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.updateControlpanel(this.props.controlpanel['@id'], data);\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    Router.goBack();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.props.controlpanel) {\n      return (\n        <div id=\"page-controlpanel\">\n          <Helmet title={this.props.controlpanel.title} />\n          <Container>\n            <Form\n              title={this.props.controlpanel.title}\n              schema={this.props.controlpanel.schema}\n              formData={this.props.controlpanel.data}\n              onSubmit={this.onSubmit}\n              onCancel={this.onCancel}\n              loading={this.props.updateRequest.loading}\n            />\n          </Container>\n          <Portal node={__CLIENT__ && document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              inner={\n                <Link\n                  to={`${getBaseUrl(this.props.pathname)}controlpanel`}\n                  className=\"item\"\n                >\n                  <Icon\n                    name=\"arrow left\"\n                    size=\"big\"\n                    color=\"blue\"\n                    title={this.props.intl.formatMessage(messages.back)}\n                  />\n                </Link>\n              }\n            />\n          </Portal>\n        </div>\n      );\n    }\n    return <div />;\n  }\n}\n","/**\n * Controlpanels component.\n * @module components/manage/Controlpanels/Controlpanels\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport { concat, filter, last, map, uniqBy } from 'lodash';\nimport { Portal } from 'react-portal';\nimport Helmet from 'react-helmet';\nimport { Container, Grid, Header, Icon, Segment } from 'semantic-ui-react';\nimport {\n  FormattedMessage,\n  defineMessages,\n  injectIntl,\n  intlShape,\n} from 'react-intl';\n\nimport Icons from '../../../constants/ControlpanelIcons';\nimport { listControlpanels } from '../../../actions';\nimport { Toolbar } from '../../../components';\nimport { getBaseUrl } from '../../../helpers';\n\nconst messages = defineMessages({\n  sitesetup: {\n    id: 'Site Setup',\n    defaultMessage: 'Site Setup',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n});\n\n@injectIntl\n@connect(\n  (state, props) => ({\n    controlpanels: state.controlpanels.controlpanels,\n    pathname: props.location.pathname,\n  }),\n  dispatch => bindActionCreators({ listControlpanels }, dispatch),\n)\n/**\n * Controlpanels container class.\n * @class Controlpanels\n * @extends Component\n */\nexport default class Controlpanels extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    listControlpanels: PropTypes.func.isRequired,\n    controlpanels: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        group: PropTypes.string,\n        title: PropTypes.string,\n      }),\n    ).isRequired,\n    pathname: PropTypes.string.isRequired,\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  componentWillMount() {\n    this.props.listControlpanels();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const controlpanels = map(\n      concat(this.props.controlpanels, [\n        {\n          '@id': '/moderate-comments',\n          group: 'Content',\n          title: 'Moderate Comments',\n        },\n        {\n          '@id': '/users',\n          group: 'Users',\n          title: 'Users and Groups',\n        },\n      ]),\n      controlpanel => ({\n        ...controlpanel,\n        id: last(controlpanel['@id'].split('/')),\n      }),\n    );\n    const groups = map(uniqBy(controlpanels, 'group'), 'group');\n    return (\n      <div className=\"view-wrapper\">\n        <Helmet title={this.props.intl.formatMessage(messages.sitesetup)} />\n        <Container>\n          <Segment.Group raised>\n            <Segment className=\"primary\">\n              <FormattedMessage id=\"Site Setup\" defaultMessage=\"Site Setup\" />\n            </Segment>\n            {map(groups, group => [\n              <Segment key={`header-${group}`} secondary>\n                {group}\n              </Segment>,\n              <Segment key={`body-${group}`} attached>\n                <Grid columns={6}>\n                  <Grid.Row>\n                    {map(filter(controlpanels, { group }), controlpanel => (\n                      <Grid.Column key={controlpanel.id}>\n                        <Link to={`/controlpanel/${controlpanel.id}`}>\n                          <Header as=\"h3\" icon textAlign=\"center\">\n                            <Icon name={Icons[controlpanel.id] || 'setting'} />\n                            <Header.Content>\n                              {controlpanel.title}\n                            </Header.Content>\n                          </Header>\n                        </Link>\n                      </Grid.Column>\n                    ))}\n                  </Grid.Row>\n                </Grid>\n              </Segment>,\n            ])}\n          </Segment.Group>\n        </Container>\n        <Portal node={__CLIENT__ && document.getElementById('toolbar')}>\n          <Toolbar\n            pathname={this.props.pathname}\n            inner={\n              <Link to={`${getBaseUrl(this.props.pathname)}`} className=\"item\">\n                <Icon\n                  name=\"arrow left\"\n                  size=\"big\"\n                  color=\"blue\"\n                  title={this.props.intl.formatMessage(messages.back)}\n                />\n              </Link>\n            }\n          />\n        </Portal>\n      </div>\n    );\n  }\n}\n","/**\n * Moderate comments component.\n * @module components/manage/Controlpanels/ModerateComments\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Link } from 'react-router-dom';\nimport Helmet from 'react-helmet';\nimport { Portal } from 'react-portal';\nimport { Container, Icon, Button, Table } from 'semantic-ui-react';\nimport moment from 'moment';\nimport {\n  FormattedMessage,\n  defineMessages,\n  injectIntl,\n  intlShape,\n} from 'react-intl';\n\nimport { deleteComment, searchContent } from '../../../actions';\nimport { Toolbar, CommentEditModal } from '../../../components';\nimport { getBaseUrl } from '../../../helpers';\n\nconst messages = defineMessages({\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n});\n\n@injectIntl\n@connect(\n  (state, props) => ({\n    items: state.search.items,\n    deleteRequest: state.comments.delete,\n    pathname: props.location.pathname,\n  }),\n  dispatch => bindActionCreators({ deleteComment, searchContent }, dispatch),\n)\n/**\n * ModerateCommentsComponent class.\n * @class ModerateComments\n * @extends Component\n */\nexport default class ModerateComments extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    searchContent: PropTypes.func.isRequired,\n    deleteComment: PropTypes.func.isRequired,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        author_name: PropTypes.string,\n        creation_date: PropTypes.string,\n        text: PropTypes.shape({\n          data: PropTypes.string,\n        }),\n        is_deletable: PropTypes.bool,\n        is_editable: PropTypes.bool,\n      }),\n    ).isRequired,\n    deleteRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    pathname: PropTypes.string.isRequired,\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Comments\n   */\n  constructor(props) {\n    super(props);\n    this.onDelete = this.onDelete.bind(this);\n    this.onEdit = this.onEdit.bind(this);\n    this.onEditOk = this.onEditOk.bind(this);\n    this.onEditCancel = this.onEditCancel.bind(this);\n    this.state = {\n      showEdit: false,\n      editId: null,\n      editText: null,\n    };\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  componentWillMount() {\n    this.props.searchContent('', {\n      portal_type: 'Discussion Item',\n      fullobjects: true,\n    });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (this.props.deleteRequest.loading && nextProps.deleteRequest.loaded) {\n      this.props.searchContent('', {\n        portal_type: 'Discussion Item',\n        fullobjects: true,\n      });\n    }\n  }\n\n  /**\n   * Delete handler\n   * @method onDelete\n   * @param {Object} event Event object.\n   * @param {string} value Delete value.\n   * @returns {undefined}\n   */\n  onDelete(event, { value }) {\n    this.props.deleteComment(value);\n  }\n\n  /**\n   * Edit handler\n   * @method onEdit\n   * @param {Object} event Event object.\n   * @param {string} value Delete value.\n   * @returns {undefined}\n   */\n  onEdit(event, { value }) {\n    this.setState({\n      showEdit: true,\n      editId: value.id,\n      editText: value.text,\n    });\n  }\n\n  /**\n   * On edit ok\n   * @method onEditOk\n   * @returns {undefined}\n   */\n  onEditOk() {\n    this.setState({\n      showEdit: false,\n      editId: null,\n      editText: null,\n    });\n    this.props.searchContent('', {\n      portal_type: 'Discussion Item',\n      fullobjects: true,\n    });\n  }\n\n  /**\n   * On edit cancel\n   * @method onEditCancel\n   * @returns {undefined}\n   */\n  onEditCancel() {\n    this.setState({\n      showEdit: false,\n      editId: null,\n      editText: null,\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <div id=\"page-moderate-comments\">\n        <CommentEditModal\n          open={this.state.showEdit}\n          onCancel={this.onEditCancel}\n          onOk={this.onEditOk}\n          id={this.state.editId}\n          text={this.state.editText}\n        />\n        <Helmet title=\"Moderate comments\" />\n        <Container>\n          <article id=\"content\">\n            <header>\n              <h1 className=\"documentFirstHeading\">\n                <FormattedMessage\n                  id=\"Moderate comments\"\n                  defaultMessage=\"Moderate comments\"\n                />\n              </h1>\n            </header>\n            <section id=\"content-core\">\n              <Table compact singleLine striped>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell>\n                      <FormattedMessage\n                        id=\"Commenter\"\n                        defaultMessage=\"Commenter\"\n                      />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell>\n                      <FormattedMessage id=\"Date\" defaultMessage=\"Date\" />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell>\n                      <FormattedMessage id=\"Comment\" defaultMessage=\"Comment\" />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell>\n                      <FormattedMessage id=\"Action\" defaultMessage=\"Action\" />\n                    </Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {this.props.items.map(item => (\n                    <Table.Row key={item['@id']}>\n                      <Table.Cell>{item.author_name}</Table.Cell>\n                      <Table.Cell>\n                        <span title={moment(item.creation_date).format('LLLL')}>\n                          {moment(item.creation_date).fromNow()}\n                        </span>\n                      </Table.Cell>\n                      <Table.Cell>{item.text.data}</Table.Cell>\n                      <Table.Cell>\n                        {item.is_editable && (\n                          <Button\n                            onClick={this.onEdit}\n                            value={{ id: item['@id'], text: item.text.data }}\n                            primary\n                          >\n                            <FormattedMessage id=\"Edit\" defaultMessage=\"Edit\" />\n                          </Button>\n                        )}\n                        {item.is_deletable && (\n                          <Button\n                            onClick={this.onDelete}\n                            value={item['@id']}\n                            color=\"red\"\n                          >\n                            <FormattedMessage\n                              id=\"Delete\"\n                              defaultMessage=\"Delete\"\n                            />\n                          </Button>\n                        )}\n                      </Table.Cell>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n              </Table>\n            </section>\n          </article>\n        </Container>\n        <Portal node={__CLIENT__ && document.getElementById('toolbar')}>\n          <Toolbar\n            pathname={this.props.pathname}\n            inner={\n              <Link\n                to={`${getBaseUrl(this.props.pathname)}controlpanel`}\n                className=\"item\"\n              >\n                <Icon\n                  name=\"arrow left\"\n                  size=\"big\"\n                  color=\"blue\"\n                  title={this.props.intl.formatMessage(messages.back)}\n                />\n              </Link>\n            }\n          />\n        </Portal>\n      </div>\n    );\n  }\n}\n","/**\n * Users controlpanel container.\n * @module components/manage/Controlpanels/UsersControlpanel\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport {\n  Container,\n  Form,\n  Icon,\n  Input,\n  Segment,\n  Table,\n} from 'semantic-ui-react';\nimport jwtDecode from 'jwt-decode';\nimport {\n  FormattedMessage,\n  defineMessages,\n  injectIntl,\n  intlShape,\n} from 'react-intl';\n\nimport { listRoles, listUsers } from '../../../actions';\nimport { getBaseUrl } from '../../../helpers';\nimport { Toolbar } from '../../../components';\n\nconst messages = defineMessages({\n  searchUsers: {\n    id: 'Search users...',\n    defaultMessage: 'Search users...',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n});\n\n@injectIntl\n@connect(\n  (state, props) => ({\n    roles: state.roles.roles,\n    users: state.users.users,\n    pathname: props.location.pathname,\n  }),\n  dispatch => bindActionCreators({ listRoles, listUsers }, dispatch),\n)\n/**\n * UsersControlpanel class.\n * @class UsersControlpanel\n * @extends Component\n */\nexport default class UsersControlpanel extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    listRoles: PropTypes.func.isRequired,\n    listUsers: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    roles: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        '@type': PropTypes.string,\n        id: PropTypes.string,\n      }),\n    ).isRequired,\n    users: PropTypes.arrayOf(\n      PropTypes.shape({\n        username: PropTypes.string,\n        fullname: PropTypes.string,\n        roles: PropTypes.arrayOf(PropTypes.string),\n      }),\n    ).isRequired,\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Sharing\n   */\n  constructor(props) {\n    super(props);\n    this.onChangeSearch = this.onChangeSearch.bind(this);\n    this.onSearch = this.onSearch.bind(this);\n    this.state = {\n      search: '',\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.listRoles();\n    this.props.listUsers();\n  }\n\n  /**\n   * Search handler\n   * @method onSearch\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n  onSearch(event) {\n    event.preventDefault();\n    this.props.listUsers(this.state.search);\n  }\n\n  /**\n   * On change search handler\n   * @method onChangeSearch\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n  onChangeSearch(event) {\n    this.setState({\n      search: event.target.value,\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Container id=\"page-users\">\n        <Helmet title=\"Users and Groups\" />\n        <Segment.Group raised>\n          <Segment className=\"primary\">\n            <FormattedMessage\n              id=\"Users and groups settings\"\n              defaultMessage=\"Users and groups settings\"\n            />\n          </Segment>\n          <Segment secondary>\n            <FormattedMessage id=\"Users\" defaultMessage=\"Users\" />\n          </Segment>\n          <Segment>\n            <Form onSubmit={this.onSearch}>\n              <Form.Field>\n                <Input\n                  name=\"SearchableText\"\n                  action={{ icon: 'search' }}\n                  placeholder={this.props.intl.formatMessage(\n                    messages.searchUsers,\n                  )}\n                  onChange={this.onChangeSearch}\n                />\n              </Form.Field>\n            </Form>\n          </Segment>\n          <Form onSubmit={this.onSubmit}>\n            <Table padded striped attached>\n              <Table.Header>\n                <Table.Row>\n                  <Table.HeaderCell>\n                    <FormattedMessage\n                      id=\"User name\"\n                      defaultMessage=\"User name\"\n                    />\n                  </Table.HeaderCell>\n                  {this.props.roles.map(role => (\n                    <Table.HeaderCell key={role.id}>{role.id}</Table.HeaderCell>\n                  ))}\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {this.props.users.map(user => (\n                  <Table.Row key={user.username}>\n                    <Table.Cell>{user.fullname}</Table.Cell>\n                    {this.props.roles.map(role => (\n                      <Table.Cell key={role.id}>\n                        {user.roles.indexOf(role.id) !== -1 && (\n                          <Icon\n                            name=\"check circle outline\"\n                            title=\"Global role\"\n                            color=\"blue\"\n                          />\n                        )}\n                      </Table.Cell>\n                    ))}\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          </Form>\n        </Segment.Group>\n        <Portal node={__CLIENT__ && document.getElementById('toolbar')}>\n          <Toolbar\n            pathname={this.props.pathname}\n            inner={\n              <Link to={`${getBaseUrl(this.props.pathname)}`} className=\"item\">\n                <Icon\n                  name=\"arrow left\"\n                  size=\"big\"\n                  color=\"blue\"\n                  title={this.props.intl.formatMessage(messages.back)}\n                />\n              </Link>\n            }\n          />\n        </Portal>\n      </Container>\n    );\n  }\n}\n","/**\n * Delete container.\n * @module components/manage/Delete/Delete\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Router } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport { Button, Container, List, Segment } from 'semantic-ui-react';\nimport {\n  FormattedMessage,\n  defineMessages,\n  injectIntl,\n  intlShape,\n} from 'react-intl';\nimport qs from 'query-string';\n\nimport { deleteContent, getContent } from '../../../actions';\nimport { Toolbar } from '../../../components';\n\nconst messages = defineMessages({\n  delete: {\n    id: 'Delete',\n    defaultMessage: 'Delete',\n  },\n  ok: {\n    id: 'Ok',\n    defaultMessage: 'Ok',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n});\n\n@injectIntl\n@connect(\n  (state, props) => ({\n    content: state.content.data,\n    deleteRequest: state.content.delete,\n    pathname: props.location.pathname,\n    returnUrl: qs.parse(props.location.search).return_url,\n  }),\n  dispatch => bindActionCreators({ deleteContent, getContent }, dispatch),\n)\n/**\n * Delete container class.\n * @class Delete\n * @extends Component\n */\nexport default class Delete extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    deleteContent: PropTypes.func.isRequired,\n    getContent: PropTypes.func.isRequired,\n    deleteRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    pathname: PropTypes.string.isRequired,\n    content: PropTypes.shape({\n      title: PropTypes.string,\n    }),\n    returnUrl: PropTypes.string,\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    content: null,\n    returnUrl: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  componentWillMount() {\n    this.props.getContent(this.props.pathname.split('/delete')[0]);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (this.props.deleteRequest.loading && nextProps.deleteRequest.loaded) {\n      Router.push(\n        this.props.returnUrl ||\n          this.props.pathname.replace('/delete', '').replace(/\\/[^/]*$/, ''),\n      );\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @returns {undefined}\n   */\n  onSubmit() {\n    this.props.deleteContent(this.props.pathname.replace('/delete', ''));\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    Router.push(this.props.pathname.replace('/delete', ''));\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.props.content) {\n      return (\n        <div id=\"page-delete\">\n          <Helmet title={this.props.intl.formatMessage(messages.delete)} />\n          <Container>\n            <Segment.Group raised>\n              <Segment className=\"primary\">\n                <FormattedMessage\n                  id=\"Do you really want to delete this item?\"\n                  defaultMessage=\"Do you really want to delete this item?\"\n                />\n              </Segment>\n              <Segment attached>\n                <List bulleted>\n                  <List.Item>{this.props.content.title}</List.Item>\n                </List>\n              </Segment>\n              <Segment className=\"actions\" clearing>\n                <Button\n                  basic\n                  circular\n                  primary\n                  floated=\"right\"\n                  icon=\"arrow right\"\n                  title={this.props.intl.formatMessage(messages.ok)}\n                  size=\"big\"\n                  onClick={this.onSubmit}\n                />\n                <Button\n                  basic\n                  circular\n                  secondary\n                  icon=\"remove\"\n                  title={this.props.intl.formatMessage(messages.cancel)}\n                  floated=\"right\"\n                  size=\"big\"\n                  onClick={this.onCancel}\n                />\n              </Segment>\n            </Segment.Group>\n          </Container>\n          <Portal node={__CLIENT__ && document.getElementById('toolbar')}>\n            <Toolbar pathname={this.props.pathname} inner={<span />} />\n          </Portal>\n        </div>\n      );\n    }\n    return <div />;\n  }\n}\n","/**\n * Diff component.\n * @module components/manage/Diff/Diff\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { filter, isEqual, map } from 'lodash';\nimport {\n  Container,\n  Icon,\n  Button,\n  Dropdown,\n  Grid,\n  Table,\n} from 'semantic-ui-react';\nimport { Router, Link, withRouter } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport moment from 'moment';\nimport {\n  FormattedMessage,\n  defineMessages,\n  injectIntl,\n  intlShape,\n} from 'react-intl';\nimport qs from 'query-string';\n\nimport { getDiff, getSchema, getHistory } from '../../../actions';\nimport { getBaseUrl } from '../../../helpers';\nimport { DiffField, Toolbar } from '../../../components';\n\nconst messages = defineMessages({\n  diff: {\n    id: 'Diff',\n    defaultMessage: 'Diff',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n});\n\n@injectIntl\n@connect(\n  (state, props) => ({\n    data: state.diff.data,\n    history: state.history.entries,\n    schema: state.schema.schema,\n    pathname: props.location.pathname,\n    one: qs.parse(props.location.search).one,\n    two: qs.parse(props.location.search).two,\n    view: qs.parse(props.location.search).view || 'split',\n    title: state.content.data.title,\n    type: state.content.data['@type'],\n  }),\n  dispatch => bindActionCreators({ getDiff, getSchema, getHistory }, dispatch),\n)\n/**\n * DiffComponent class.\n * @class DiffComponent\n * @extends Component\n */\nclass DiffComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getDiff: PropTypes.func.isRequired,\n    getSchema: PropTypes.func.isRequired,\n    getHistory: PropTypes.func.isRequired,\n    schema: PropTypes.objectOf(PropTypes.any),\n    pathname: PropTypes.string.isRequired,\n    one: PropTypes.string.isRequired,\n    two: PropTypes.string.isRequired,\n    view: PropTypes.string.isRequired,\n    data: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n      }),\n    ).isRequired,\n    history: PropTypes.arrayOf(\n      PropTypes.shape({\n        version: PropTypes.number,\n        time: PropTypes.string,\n        actor: PropTypes.shape({ fullname: PropTypes.string }),\n      }),\n    ).isRequired,\n    title: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    schema: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs DiffComponent\n   */\n  constructor(props) {\n    super(props);\n    this.onChangeOne = this.onChangeOne.bind(this);\n    this.onChangeTwo = this.onChangeTwo.bind(this);\n    this.onSelectView = this.onSelectView.bind(this);\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getSchema(this.props.type);\n    this.props.getHistory(getBaseUrl(this.props.pathname));\n    this.props.getDiff(\n      getBaseUrl(this.props.pathname),\n      this.props.one,\n      this.props.two,\n    );\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (\n      this.props.pathname !== nextProps.pathname ||\n      this.props.one !== nextProps.one ||\n      this.props.two !== nextProps.two\n    ) {\n      this.props.getDiff(\n        getBaseUrl(nextProps.pathname),\n        nextProps.one,\n        nextProps.two,\n      );\n    }\n  }\n\n  /**\n   * On select view handler\n   * @method onSelectView\n   * @param {object} event Event object\n   * @param {string} value Value\n   * @returns {undefined}\n   */\n  onSelectView(event, { value }) {\n    this.props.history.push(\n      `${this.props.pathname}?one=${this.props.one}&two=${\n        this.props.two\n      }&view=${value}`,\n    );\n  }\n\n  /**\n   * On change one handler\n   * @method onChangeOne\n   * @param {object} event Event object\n   * @param {string} value Value\n   * @returns {undefined}\n   */\n  onChangeOne(event, { value }) {\n    this.props.history.push(\n      `${this.props.pathname}?one=${value}&two=${this.props.two}&view=${\n        this.props.view\n      }`,\n    );\n  }\n\n  /**\n   * On change two handler\n   * @method onChangeTwo\n   * @param {object} event Event object\n   * @param {string} value Value\n   * @returns {undefined}\n   */\n  onChangeTwo(event, { value }) {\n    this.props.history.push(\n      `${this.props.pathname}?one=${this.props.one}&two=${value}&view=${\n        this.props.view\n      }`,\n    );\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const versions = map(\n      filter(this.props.history, entry => 'version' in entry),\n      (entry, index) => ({\n        text: `${index === 0 ? 'Current' : entry.version} (${moment(\n          entry.time,\n        ).format('LLLL')}, ${entry.actor.fullname})`,\n        value: `${entry.version}`,\n        key: `${entry.version}`,\n      }),\n    );\n    return (\n      <Container id=\"page-diff\">\n        <Helmet title={this.props.intl.formatMessage(messages.diff)} />\n        <h1>\n          <FormattedMessage\n            id=\"Difference between revision {one} and {two} of {title}\"\n            defaultMessage=\"Difference between revision {one} and {two} of {title}\"\n            values={{\n              one: this.props.one,\n              two: this.props.two,\n              title: this.props.title,\n            }}\n          />\n        </h1>\n        <Grid>\n          <Grid.Column width={9}>\n            <p className=\"description\">\n              <FormattedMessage\n                id=\"You can view the difference of the revisions below.\"\n                defaultMessage=\"You can view the difference of the revisions below.\"\n              />\n            </p>\n          </Grid.Column>\n          <Grid.Column width={3} textAlign=\"right\">\n            <Button.Group>\n              {map(\n                [\n                  { id: 'split', label: 'Split' },\n                  { id: 'unified', label: 'Unified' },\n                ],\n                view => (\n                  <Button\n                    key={view.id}\n                    value={view.id}\n                    active={this.props.view === view.id}\n                    onClick={this.onSelectView}\n                  >\n                    {view.label}\n                  </Button>\n                ),\n              )}\n            </Button.Group>\n          </Grid.Column>\n        </Grid>\n        {this.props.history.length > 0 && (\n          <Table basic=\"very\">\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell width={8}>\n                  <FormattedMessage id=\"Base\" defaultMessage=\"Base\" />\n                  <Dropdown\n                    onChange={this.onChangeOne}\n                    value={this.props.one}\n                    selection\n                    fluid\n                    options={versions}\n                  />\n                </Table.HeaderCell>\n                <Table.HeaderCell width={8}>\n                  <FormattedMessage id=\"Compare\" defaultMessage=\"Compare\" />\n                  <Dropdown\n                    onChange={this.onChangeTwo}\n                    value={this.props.two}\n                    selection\n                    fluid\n                    options={versions}\n                  />\n                </Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n          </Table>\n        )}\n        {this.props.schema &&\n          this.props.data.length > 0 &&\n          map(this.props.schema.fieldsets, fieldset =>\n            map(\n              fieldset.fields,\n              field =>\n                !isEqual(\n                  this.props.data[0][field],\n                  this.props.data[1][field],\n                ) && (\n                  <DiffField\n                    key={field}\n                    one={this.props.data[0][field]}\n                    two={this.props.data[1][field]}\n                    schema={this.props.schema.properties[field]}\n                    view={this.props.view}\n                  />\n                ),\n            ),\n          )}\n        <Portal node={__CLIENT__ && document.getElementById('toolbar')}>\n          <Toolbar\n            pathname={this.props.pathname}\n            inner={\n              <Link\n                to={`${getBaseUrl(this.props.pathname)}/history`}\n                className=\"item\"\n              >\n                <Icon\n                  name=\"arrow left\"\n                  size=\"big\"\n                  color=\"blue\"\n                  title={this.props.intl.formatMessage(messages.back)}\n                />\n              </Link>\n            }\n          />\n        </Portal>\n      </Container>\n    );\n  }\n}\n\nexport default withRouter(DiffComponent);\n","/**\n * Diff field component.\n * @module components/manage/Diff/DiffField\n */\n\nimport React from 'react';\nimport { diffWords } from 'diff';\nimport { join, map } from 'lodash';\nimport PropTypes from 'prop-types';\nimport { Table } from 'semantic-ui-react';\nimport moment from 'moment';\n\n/**\n * Diff field component.\n * @function DiffField\n * @param {*} one Field one\n * @param {*} two Field two\n * @param {Object} schema Field schema\n * @returns {string} Markup of the component.\n */\nconst DiffField = ({ one, two, view, schema }) => {\n  let parts;\n  if (schema.widget) {\n    switch (schema.widget) {\n      case 'richtext':\n        parts = diffWords(one.data, two.data);\n        break;\n      case 'datetime':\n        parts = diffWords(\n          moment(one).format('LLLL'),\n          moment(two).format('LLLL'),\n        );\n        break;\n      case 'textarea':\n      default:\n        parts = diffWords(one, two);\n        break;\n    }\n  } else if (schema.type === 'boolean') {\n    parts = diffWords(one ? 'Yes' : 'No', two ? 'Yes' : 'No');\n  } else if (schema.type === 'array') {\n    parts = diffWords(join(one, ', '), join(two, ', '));\n  } else {\n    parts = diffWords(one, two);\n  }\n  return (\n    <Table compact>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell colSpan={2}>{schema.title}</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {view === 'split' && (\n          <Table.Row>\n            <Table.Cell width={8} verticalAlign=\"top\">\n              <span\n                dangerouslySetInnerHTML={{\n                  __html: join(\n                    map(\n                      parts,\n                      part =>\n                        (part.removed &&\n                          `<span class=\"deletion\">${part.value}</span>`) ||\n                        (!part.added && `<span>${part.value}</span>`) ||\n                        '',\n                    ),\n                    '',\n                  ),\n                }}\n              />\n            </Table.Cell>\n            <Table.Cell width={8} verticalAlign=\"top\">\n              <span\n                dangerouslySetInnerHTML={{\n                  __html: join(\n                    map(\n                      parts,\n                      part =>\n                        (part.added &&\n                          `<span class=\"addition\">${part.value}</span>`) ||\n                        (!part.removed && `<span>${part.value}</span>`) ||\n                        '',\n                    ),\n                    '',\n                  ),\n                }}\n              />\n            </Table.Cell>\n          </Table.Row>\n        )}\n        {view === 'unified' && (\n          <Table.Row>\n            <Table.Cell width={16} verticalAlign=\"top\">\n              <span\n                dangerouslySetInnerHTML={{\n                  __html: join(\n                    map(\n                      parts,\n                      part =>\n                        (part.removed &&\n                          `<span class=\"deletion\">${part.value}</span>`) ||\n                        (part.added &&\n                          `<span class=\"addition\">${part.value}</span>`) ||\n                        (!part.added && `<span>${part.value}</span>`),\n                    ),\n                    '',\n                  ),\n                }}\n              />\n            </Table.Cell>\n          </Table.Row>\n        )}\n      </Table.Body>\n    </Table>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nDiffField.propTypes = {\n  one: PropTypes.any.isRequired,\n  two: PropTypes.any.isRequired,\n  view: PropTypes.string.isRequired,\n  schema: PropTypes.shape({\n    widget: PropTypes.string,\n    type: PropTypes.string,\n    title: PropTypes.string,\n  }).isRequired,\n};\n\nexport default DiffField;\n","/**\n * Display component.\n * @module components/manage/Display/Display\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Dropdown, Icon } from 'semantic-ui-react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { getSchema, updateContent, getContent } from '../../../actions';\nimport layouts from '../../../constants/Layouts';\n\n@connect(\n  state => ({\n    loaded: state.content.update.loaded,\n    layouts: state.schema.schema ? state.schema.schema.layouts : [],\n    layout: state.content.data ? state.content.data.layout : '',\n    type: state.content.data ? state.content.data['@type'] : '',\n  }),\n  dispatch =>\n    bindActionCreators({ getSchema, updateContent, getContent }, dispatch),\n)\n/**\n * Display container class.\n * @class Display\n * @extends Component\n */\nexport default class Display extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getSchema: PropTypes.func.isRequired,\n    updateContent: PropTypes.func.isRequired,\n    getContent: PropTypes.func.isRequired,\n    loaded: PropTypes.bool.isRequired,\n    pathname: PropTypes.string.isRequired,\n    layouts: PropTypes.arrayOf(PropTypes.string),\n    layout: PropTypes.string,\n    type: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    history: [],\n    transitions: [],\n    layouts: [],\n    layout: '',\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Workflow\n   */\n  constructor(props) {\n    super(props);\n    this.setLayout = this.setLayout.bind(this);\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  componentWillMount() {\n    this.props.getSchema(this.props.type);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.pathname !== this.props.pathname) {\n      this.props.getSchema(nextProps.type);\n    }\n    if (!this.props.loaded && nextProps.loaded) {\n      this.props.getContent(nextProps.pathname);\n    }\n  }\n\n  /**\n   * On set layout handler\n   * @method setLayout\n   * @param {Object} event Event object\n   * @returns {undefined}\n   */\n  setLayout(event, { value }) {\n    this.props.updateContent(this.props.pathname, {\n      layout: value,\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Dropdown\n        item\n        id=\"toolbar-display\"\n        trigger={\n          <span>\n            <Icon name=\"block layout\" size=\"big\" />{' '}\n            <FormattedMessage id=\"Display\" defaultMessage=\"Display\" />\n          </span>\n        }\n      >\n        <Dropdown.Menu>\n          {this.props.layouts.map(item => (\n            <Dropdown.Item\n              text={layouts[item] || item}\n              value={item}\n              active={this.props.layout === item}\n              key={item}\n              onClick={this.setLayout}\n            />\n          ))}\n        </Dropdown.Menu>\n      </Dropdown>\n    );\n  }\n}\n","/**\n * Edit container.\n * @module components/manage/Edit/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Router, withRouter } from 'react-router-dom';\nimport { asyncConnect } from 'redux-connect';\nimport { isEmpty, pick } from 'lodash';\nimport { defineMessages, injectIntl, intlShape } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport { Icon } from 'semantic-ui-react';\nimport { DragDropContext } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport qs from 'query-string';\n\nimport { Form, Toolbar } from '../../../components';\nimport { updateContent, getContent, getSchema } from '../../../actions';\nimport { getBaseUrl, hasTilesData } from '../../../helpers';\n\nconst messages = defineMessages({\n  edit: {\n    id: 'Edit {title}',\n    defaultMessage: 'Edit {title}',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  properties: {\n    id: 'Properties',\n    defaultMessage: 'Properties',\n  },\n  visual: {\n    id: 'Visual',\n    defaultMessage: 'Visual',\n  },\n});\n\n@DragDropContext(HTML5Backend)\n@injectIntl\n@connect(\n  (state, props) => ({\n    content: state.content.data,\n    schema: state.schema.schema,\n    getRequest: state.content.get,\n    schemaRequest: state.schema,\n    updateRequest: state.content.update,\n    pathname: props.location.pathname,\n    returnUrl: qs.parse(props.location.search).return_url,\n  }),\n  dispatch =>\n    bindActionCreators(\n      {\n        updateContent,\n        getContent,\n        getSchema,\n      },\n      dispatch,\n    ),\n)\n/**\n * EditComponent class.\n * @class EditComponent\n * @extends Component\n */\nexport class EditComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    updateContent: PropTypes.func.isRequired,\n    getContent: PropTypes.func.isRequired,\n    getSchema: PropTypes.func.isRequired,\n    updateRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    schemaRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    getRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    pathname: PropTypes.string.isRequired,\n    returnUrl: PropTypes.string,\n    content: PropTypes.shape({\n      '@type': PropTypes.string,\n    }),\n    schema: PropTypes.objectOf(PropTypes.any),\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    schema: null,\n    content: null,\n    returnUrl: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs EditComponent\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      visual: false,\n    };\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onToggleVisual = this.onToggleVisual.bind(this);\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getContent(getBaseUrl(this.props.pathname));\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (this.props.getRequest.loading && nextProps.getRequest.loaded) {\n      this.props.getSchema(nextProps.content['@type']);\n    }\n    if (this.props.schemaRequest.loading && nextProps.schemaRequest.loaded) {\n      if (hasTilesData(nextProps.schema.properties)) {\n        this.setState({\n          visual: true,\n        });\n      }\n    }\n    if (this.props.updateRequest.loading && nextProps.updateRequest.loaded) {\n      this.props.history.push(\n        this.props.returnUrl || getBaseUrl(this.props.pathname),\n      );\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.updateContent(getBaseUrl(this.props.pathname), data);\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.push(\n      this.props.returnUrl || getBaseUrl(this.props.pathname),\n    );\n  }\n\n  /**\n   * Toggle visual\n   * @method onToggleVisual\n   * @returns {undefined}\n   */\n  onToggleVisual() {\n    this.setState({\n      visual: !this.state.visual,\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.props.schemaRequest.loaded && this.props.content) {\n      return (\n        <div id=\"page-edit\">\n          <Helmet\n            title={this.props.intl.formatMessage(messages.edit, {\n              title: this.props.schema.title,\n            })}\n          />\n          <Form\n            ref={instance => {\n              if (instance) {\n                this.form = instance.refs.wrappedInstance;\n              }\n            }}\n            schema={this.props.schema}\n            formData={this.props.content}\n            onSubmit={this.onSubmit}\n            hideActions\n            pathname={this.props.pathname}\n            visual={this.state.visual}\n            title={this.props.intl.formatMessage(messages.edit, {\n              title: this.props.schema.title,\n            })}\n            loading={this.props.updateRequest.loading}\n          />\n          <Portal node={__CLIENT__ && document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              inner={\n                <div>\n                  <a className=\"item\" onClick={() => this.form.onSubmit()}>\n                    <Icon\n                      name=\"save\"\n                      size=\"big\"\n                      color=\"blue\"\n                      title={this.props.intl.formatMessage(messages.save)}\n                    />\n                  </a>\n                  {hasTilesData(this.props.schema.properties) && (\n                    <a className=\"item\" onClick={() => this.onToggleVisual()}>\n                      <Icon\n                        name={this.state.visual ? 'tasks' : 'block layout'}\n                        size=\"big\"\n                        title={this.props.intl.formatMessage(\n                          this.state.visual\n                            ? messages.properties\n                            : messages.visual,\n                        )}\n                      />\n                    </a>\n                  )}\n                  <a className=\"item\" onClick={() => this.onCancel()}>\n                    <Icon\n                      name=\"close\"\n                      size=\"big\"\n                      color=\"red\"\n                      title={this.props.intl.formatMessage(messages.cancel)}\n                    />\n                  </a>\n                </div>\n              }\n            />\n          </Portal>\n        </div>\n      );\n    }\n    return <div />;\n  }\n}\n\nexport default asyncConnect([\n  {\n    key: 'schema',\n    promise: ({ store: { dispatch, getState } }) =>\n      dispatch(getSchema(getState().content.data['@type'])),\n  },\n  {\n    key: 'content',\n    promise: ({ location, store: { dispatch, getState } }) => {\n      const { form } = getState();\n      if (!isEmpty(form)) {\n        return dispatch(\n          updateContent(\n            getBaseUrl(location.pathname),\n            pick(form, ['title', 'description', 'text']),\n          ),\n        );\n      }\n      return Promise.resolve(getState().content);\n    },\n  },\n])(withRouter(EditComponent));\n","/**\n * Field component.\n * @module components/manage/Form/Field\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { DragSource, DropTarget } from 'react-dnd';\nimport { widgets } from '~/config';\nimport { injectIntl, intlShape } from 'react-intl';\n\n/**\n * Get default widget\n * @method getViewDefault\n * @returns {string} Widget component.\n */\nconst getWidgetDefault = () => widgets.defaultWidget;\n\n/**\n * Get widget by field's `id` attribute\n * @method getWidgetById\n * @param {string} id Id\n * @returns {string} Widget component.\n */\nconst getWidgetByFieldId = id => widgets.widgetMapping.id[id] || null;\n\n/**\n * Get widget by field's `widget` attribute\n * @method getWidgetByName\n * @param {string} widget Widget\n * @returns {string} Widget component.\n */\nconst getWidgetByName = widget =>\n  typeof widget === 'string'\n    ? widgets.widgetMapping.widget[widget] || getWidgetDefault()\n    : null;\n\n/**\n * Get widget by field's `vocabulary` attribute\n * @method getWidgetByVocabulary\n * @param {string} vocabulary Widget\n * @returns {string} Widget component.\n */\nconst getWidgetByVocabulary = vocabulary =>\n  widgets.widgetMapping.vocabulary[vocabulary] || null;\n\n/**\n * Get widget by field's `choices` attribute\n * @method getWidgetByChoices\n * @param {string} choices Widget\n * @returns {string} Widget component.\n */\nconst getWidgetByChoices = choices => (choices ? widgets.widgetMapping.choices : null);\n\n/**\n * Get widget by field's `type` attribute\n * @method getWidgetByType\n * @param {string} type Type\n * @returns {string} Widget component.\n */\nconst getWidgetByType = type => widgets.widgetMapping.type[type] || null;\n\n/**\n * Field component class.\n * @function Field\n * @param {Object} props Properties.\n * @returns {string} Markup of the component.\n */\nconst Field = (props, { intl }) => {\n  const Widget =\n    getWidgetByFieldId(props.id) ||\n    getWidgetByName(props.widget) ||\n    getWidgetByVocabulary(props.vocabulary) ||\n    getWidgetByChoices(props.choices) ||\n    getWidgetByType(props.type) ||\n    getWidgetDefault();\n\n  if (props.onOrder) {\n    const WrappedWidget = DropTarget(\n      'field',\n      {\n        hover(properties, monitor) {\n          const dragOrder = monitor.getItem().order;\n          const hoverOrder = properties.order;\n\n          if (dragOrder === hoverOrder) {\n            return;\n          }\n          properties.onOrder(dragOrder, hoverOrder - dragOrder);\n\n          monitor.getItem().order = hoverOrder;\n        },\n      },\n      connect => ({\n        connectDropTarget: connect.dropTarget(),\n      }),\n    )(\n      DragSource(\n        'field',\n        {\n          beginDrag(properties) {\n            return {\n              id: properties.label,\n              order: properties.order,\n            };\n          },\n        },\n        (connect, monitor) => ({\n          connectDragSource: connect.dragSource(),\n          connectDragPreview: connect.dragPreview(),\n          isDragging: monitor.isDragging(),\n        }),\n      )(\n        ({\n          connectDropTarget,\n          connectDragSource,\n          connectDragPreview,\n          ...rest\n        }) =>\n          connectDropTarget(\n            connectDragSource(\n              connectDragPreview(\n                <div>\n                  <Widget {...rest} />\n                </div>,\n              ),\n            ),\n          ),\n      ),\n    );\n    return <WrappedWidget {...props} />;\n  }\n  return <Widget {...props} />;\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nField.propTypes = {\n  widget: PropTypes.string,\n  vocabulary: PropTypes.string,\n  choices: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\n  type: PropTypes.string,\n  id: PropTypes.string.isRequired,\n  onOrder: PropTypes.func,\n  intl: intlShape.isRequired,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nField.defaultProps = {\n  widget: null,\n  vocabulary: null,\n  choices: null,\n  type: 'string',\n  onOrder: null,\n};\n\nexport default injectIntl(Field);\n","/**\n * Form component.\n * @module components/manage/Form/Form\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { keys, map, mapValues, omit, uniq, without } from 'lodash';\nimport move from 'lodash-move';\nimport {\n  Button,\n  Container,\n  Form as UiForm,\n  Segment,\n  Tab,\n  Message,\n} from 'semantic-ui-react';\nimport { defineMessages, injectIntl, intlShape } from 'react-intl';\nimport { v4 as uuid } from 'uuid';\n\nimport { EditTile, Field } from '../../../components';\nimport { getTilesFieldname, getTilesLayoutFieldname } from '../../../helpers';\n\nconst messages = defineMessages({\n  addTile: {\n    id: 'Add tile...',\n    defaultMessage: 'Add tile...',\n  },\n  required: {\n    id: 'Required input is missing.',\n    defaultMessage: 'Required input is missing.',\n  },\n  minLength: {\n    id: 'Minimum length is {len}.',\n    defaultMessage: 'Minimum length is {len}.',\n  },\n  uniqueItems: {\n    id: 'Items must be unique.',\n    defaultMessage: 'Items must be unique.',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  error: {\n    id: 'Error',\n    defaultMessage: 'Error',\n  },\n  thereWereSomeErrors: {\n    id: 'There were some errors.',\n    defaultMessage: 'There were some errors.',\n  },\n});\n\n/**\n * Form container class.\n * @class Form\n * @extends Component\n */\nclass Form extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    schema: PropTypes.shape({\n      fieldsets: PropTypes.arrayOf(\n        PropTypes.shape({\n          fields: PropTypes.arrayOf(PropTypes.string),\n          id: PropTypes.string,\n          title: PropTypes.string,\n        }),\n      ),\n      properties: PropTypes.objectOf(PropTypes.any),\n      definitions: PropTypes.objectOf(PropTypes.any),\n      required: PropTypes.arrayOf(PropTypes.string),\n    }).isRequired,\n    formData: PropTypes.objectOf(PropTypes.any),\n    pathname: PropTypes.string,\n    onSubmit: PropTypes.func,\n    onCancel: PropTypes.func,\n    submitLabel: PropTypes.string,\n    resetAfterSubmit: PropTypes.bool,\n    intl: intlShape.isRequired,\n    title: PropTypes.string,\n    error: PropTypes.shape({\n      message: PropTypes.string,\n    }),\n    loading: PropTypes.bool,\n    hideActions: PropTypes.bool,\n    description: PropTypes.string,\n    visual: PropTypes.bool,\n    tiles: PropTypes.arrayOf(PropTypes.object),\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    formData: null,\n    onSubmit: null,\n    onCancel: null,\n    submitLabel: null,\n    resetAfterSubmit: false,\n    title: null,\n    description: null,\n    error: null,\n    loading: null,\n    hideActions: false,\n    visual: false,\n    tiles: [],\n    pathname: '',\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Form\n   */\n  constructor(props) {\n    super(props);\n    const ids = {\n      title: uuid(),\n      description: uuid(),\n      text: uuid(),\n    };\n    let { formData } = props;\n    const tilesFieldname = getTilesFieldname(formData);\n    const tilesLayoutFieldname = getTilesLayoutFieldname(formData);\n\n    if (formData === null) {\n      // get defaults from schema\n      formData = mapValues(props.schema.properties, 'default');\n    }\n    // defaults for block editor; should be moved to schema on server side\n    if (!formData[tilesLayoutFieldname]) {\n      formData[tilesLayoutFieldname] = {\n        items: [ids.title, ids.description, ids.text],\n      };\n    }\n    if (!formData[tilesFieldname]) {\n      formData[tilesFieldname] = {\n        [ids.title]: {\n          '@type': 'title',\n        },\n        [ids.description]: {\n          '@type': 'description',\n        },\n        [ids.text]: {\n          '@type': 'text',\n        },\n      };\n    }\n    this.state = {\n      formData,\n      errors: {},\n      selected: null,\n    };\n    this.onChangeField = this.onChangeField.bind(this);\n    this.onChangeTile = this.onChangeTile.bind(this);\n    this.onSelectTile = this.onSelectTile.bind(this);\n    this.onDeleteTile = this.onDeleteTile.bind(this);\n    this.onAddTile = this.onAddTile.bind(this);\n    this.onMoveTile = this.onMoveTile.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Change field handler\n   * @method onChangeField\n   * @param {string} id Id of the field\n   * @param {*} value Value of the field\n   * @returns {undefined}\n   */\n  onChangeField(id, value) {\n    this.setState({\n      formData: {\n        ...this.state.formData,\n        [id]: value || null,\n      },\n    });\n  }\n\n  /**\n   * Change tile handler\n   * @method onChangeTile\n   * @param {string} id Id of the tile\n   * @param {*} value Value of the field\n   * @returns {undefined}\n   */\n  onChangeTile(id, value) {\n    this.setState({\n      formData: {\n        ...this.state.formData,\n        [getTilesFieldname(this.state.formData)]: {\n          ...this.state.formData.tiles,\n          [id]: value || null,\n        },\n      },\n    });\n  }\n\n  /**\n   * Select tile handler\n   * @method onSelectTile\n   * @param {string} id Id of the field\n   * @returns {undefined}\n   */\n  onSelectTile(id) {\n    this.setState({\n      selected: id,\n    });\n  }\n\n  /**\n   * Delete tile handler\n   * @method onDeleteTile\n   * @param {string} id Id of the field\n   * @param {bool} selectPrev True if previous should be selected\n   * @returns {undefined}\n   */\n  onDeleteTile(id, selectPrev) {\n    const tilesFieldname = getTilesFieldname(this.state.formData);\n    const tilesLayoutFieldname = getTilesLayoutFieldname(this.state.formData);\n\n    this.setState({\n      formData: {\n        ...this.state.formData,\n        [tilesLayoutFieldname]: {\n          items: without(this.state.formData[tilesLayoutFieldname].items, id),\n        },\n        tiles: omit(this.state.formData[tilesFieldname], [id]),\n      },\n      selected: selectPrev\n        ? this.state.formData[tilesLayoutFieldname].items[\n            this.state.formData[tilesLayoutFieldname].items.indexOf(id) - 1\n          ]\n        : null,\n    });\n  }\n\n  /**\n   * Add tile handler\n   * @method onAddTile\n   * @param {string} type Type of the tile\n   * @param {Number} index Index where to add the tile\n   * @returns {string} Id of the tile\n   */\n  onAddTile(type, index) {\n    const id = uuid();\n    const tilesFieldname = getTilesFieldname(this.state.formData);\n    const tilesLayoutFieldname = getTilesLayoutFieldname(this.state.formData);\n    const totalItems = this.state.formData[tilesLayoutFieldname].items.length;\n    const insert = index === -1 ? totalItems : index;\n\n    this.setState({\n      formData: {\n        ...this.state.formData,\n        tiles_layout: {\n          items: [\n            ...this.state.formData[tilesLayoutFieldname].items.slice(0, insert),\n            id,\n            ...this.state.formData[tilesLayoutFieldname].items.slice(insert),\n          ],\n        },\n        tiles: {\n          ...this.state.formData[tilesFieldname],\n          [id]: {\n            '@type': type,\n          },\n        },\n      },\n      selected: id,\n    });\n\n    return id;\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n  onSubmit(event) {\n    if (event) {\n      event.preventDefault();\n    }\n    const errors = {};\n    map(this.props.schema.fieldsets, fieldset =>\n      map(fieldset.fields, fieldId => {\n        const field = this.props.schema.properties[fieldId];\n        const data = this.state.formData[fieldId];\n        if (this.props.schema.required.indexOf(fieldId) !== -1) {\n          if (field.type !== 'boolean' && !data) {\n            errors[fieldId] = errors[field] || [];\n            errors[fieldId].push(\n              this.props.intl.formatMessage(messages.required),\n            );\n          }\n          if (field.minLength && data.length < field.minLength) {\n            errors[fieldId] = errors[field] || [];\n            errors[fieldId].push(\n              this.props.intl.formatMessage(messages.minLength, {\n                len: field.minLength,\n              }),\n            );\n          }\n        }\n        if (field.uniqueItems && data && uniq(data).length !== data.length) {\n          errors[fieldId] = errors[field] || [];\n          errors[fieldId].push(\n            this.props.intl.formatMessage(messages.uniqueItems),\n          );\n        }\n      }),\n    );\n    if (keys(errors).length > 0) {\n      this.setState({\n        errors,\n      });\n    } else {\n      this.props.onSubmit(this.state.formData);\n      if (this.props.resetAfterSubmit) {\n        this.setState({\n          formData: this.props.formData,\n        });\n      }\n    }\n  }\n\n  /**\n   * Move tile handler\n   * @method onMoveTile\n   * @param {number} dragIndex Drag index.\n   * @param {number} hoverIndex Hover index.\n   * @returns {undefined}\n   */\n  onMoveTile(dragIndex, hoverIndex) {\n    const tilesLayoutFieldname = getTilesLayoutFieldname(this.state.formData);\n\n    this.setState({\n      formData: {\n        ...this.state.formData,\n        tiles_layout: {\n          items: move(\n            this.state.formData[tilesLayoutFieldname].items,\n            dragIndex,\n            hoverIndex,\n          ),\n        },\n      },\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { schema, onCancel, onSubmit } = this.props;\n    const { formData } = this.state;\n    const tilesFieldname = getTilesFieldname(formData);\n    const tilesLayoutFieldname = getTilesLayoutFieldname(formData);\n    const renderTiles = formData[tilesLayoutFieldname].items;\n    const tilesDict = formData[tilesFieldname];\n\n    return this.props.visual ? (\n      <div className=\"ui wrapper\">\n        {map(renderTiles, (tile, index) => (\n          <EditTile\n            id={tile}\n            index={index}\n            type={tilesDict[tile]['@type']}\n            key={tile}\n            onAddTile={this.onAddTile}\n            onChangeTile={this.onChangeTile}\n            onChangeField={this.onChangeField}\n            onDeleteTile={this.onDeleteTile}\n            onSelectTile={this.onSelectTile}\n            onMoveTile={this.onMoveTile}\n            properties={formData}\n            data={tilesDict[tile]}\n            pathname={this.props.pathname}\n            tile={tile}\n            selected={this.state.selected === tile}\n          />\n        ))}\n      </div>\n    ) : (\n      <Container>\n        <UiForm\n          method=\"post\"\n          onSubmit={this.onSubmit}\n          error={keys(this.state.errors).length > 0}\n        >\n          <Segment.Group raised>\n            {schema.fieldsets.length > 1 && (\n              <Tab\n                menu={{\n                  secondary: true,\n                  pointing: true,\n                  attached: true,\n                  tabular: true,\n                }}\n                panes={map(schema.fieldsets, item => ({\n                  menuItem: item.title,\n                  render: () => [\n                    this.props.title && (\n                      <Segment secondary attached>\n                        {this.props.title}\n                      </Segment>\n                    ),\n                    ...map(item.fields, field => (\n                      <Field\n                        {...schema.properties[field]}\n                        id={field}\n                        value={this.state.formData[field]}\n                        required={schema.required.indexOf(field) !== -1}\n                        onChange={this.onChangeField}\n                        key={field}\n                        error={this.state.errors[field]}\n                      />\n                    )),\n                  ],\n                }))}\n              />\n            )}\n            {schema.fieldsets.length === 1 && (\n              <Segment>\n                {this.props.title && (\n                  <Segment className=\"primary\">{this.props.title}</Segment>\n                )}\n                {this.props.description && (\n                  <Segment secondary>{this.props.description}</Segment>\n                )}\n                {keys(this.state.errors).length > 0 && (\n                  <Message\n                    icon=\"warning\"\n                    negative\n                    attached\n                    header={this.props.intl.formatMessage(messages.error)}\n                    content={this.props.intl.formatMessage(\n                      messages.thereWereSomeErrors,\n                    )}\n                  />\n                )}\n                {this.props.error && (\n                  <Message\n                    icon=\"warning\"\n                    negative\n                    attached\n                    header={this.props.intl.formatMessage(messages.error)}\n                    content={this.props.error.message}\n                  />\n                )}\n                {map(schema.fieldsets[0].fields, field => (\n                  <Field\n                    {...schema.properties[field]}\n                    id={field}\n                    value={this.state.formData[field]}\n                    required={schema.required.indexOf(field) !== -1}\n                    onChange={this.onChangeField}\n                    key={field}\n                    error={this.state.errors[field]}\n                  />\n                ))}\n              </Segment>\n            )}\n            {!this.props.hideActions && (\n              <Segment className=\"actions\" clearing>\n                {onSubmit && (\n                  <Button\n                    basic\n                    circular\n                    primary\n                    floated=\"right\"\n                    icon=\"arrow right\"\n                    type=\"submit\"\n                    title={\n                      this.props.submitLabel\n                        ? this.props.submitLabel\n                        : this.props.intl.formatMessage(messages.save)\n                    }\n                    size=\"big\"\n                    loading={this.props.loading}\n                  />\n                )}\n                {onCancel && (\n                  <Button\n                    basic\n                    circular\n                    secondary\n                    icon=\"remove\"\n                    title={this.props.intl.formatMessage(messages.cancel)}\n                    floated=\"right\"\n                    size=\"big\"\n                    onClick={onCancel}\n                  />\n                )}\n              </Segment>\n            )}\n          </Segment.Group>\n        </UiForm>\n      </Container>\n    );\n  }\n}\n\nexport default injectIntl(Form, { withRef: true });\n","/**\n * Modal form component.\n * @module components/manage/Form/ModalForm\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { keys, map, uniq } from 'lodash';\nimport {\n  Button,\n  Form as UiForm,\n  Header,\n  Menu,\n  Message,\n  Modal,\n} from 'semantic-ui-react';\nimport {\n  FormattedMessage,\n  defineMessages,\n  injectIntl,\n  intlShape,\n} from 'react-intl';\n\nimport { Field } from '../../../components';\n\nconst messages = defineMessages({\n  required: {\n    id: 'Required input is missing.',\n    defaultMessage: 'Required input is missing.',\n  },\n  minLength: {\n    id: 'Minimum length is {len}.',\n    defaultMessage: 'Minimum length is {len}.',\n  },\n  uniqueItems: {\n    id: 'Items must be unique.',\n    defaultMessage: 'Items must be unique.',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n});\n\n@injectIntl\n/**\n * Modal form container class.\n * @class ModalForm\n * @extends Component\n */\nexport default class FormModal extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    schema: PropTypes.shape({\n      fieldsets: PropTypes.arrayOf(\n        PropTypes.shape({\n          fields: PropTypes.arrayOf(PropTypes.string),\n          id: PropTypes.string,\n          title: PropTypes.string,\n        }),\n      ),\n      properties: PropTypes.objectOf(PropTypes.any),\n      required: PropTypes.arrayOf(PropTypes.string),\n    }).isRequired,\n    title: PropTypes.string.isRequired,\n    formData: PropTypes.objectOf(PropTypes.any),\n    onSubmit: PropTypes.func.isRequired,\n    onCancel: PropTypes.func,\n    open: PropTypes.bool,\n    submitLabel: PropTypes.string,\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    submitLabel: null,\n    onCancel: null,\n    formData: {},\n    open: true,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ModalForm\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTab: 0,\n      errors: {},\n      formData: props.formData,\n    };\n    this.selectTab = this.selectTab.bind(this);\n    this.onChangeField = this.onChangeField.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Change field handler\n   * @method onChangeField\n   * @param {string} id Id of the field\n   * @param {*} value Value of the field\n   * @returns {undefined}\n   */\n  onChangeField(id, value) {\n    this.setState({\n      formData: {\n        ...this.state.formData,\n        [id]: value,\n      },\n    });\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n  onSubmit(event) {\n    event.preventDefault();\n    const errors = {};\n    map(this.props.schema.fieldsets, fieldset =>\n      map(fieldset.fields, fieldId => {\n        const field = this.props.schema.properties[fieldId];\n        const data = this.state.formData[fieldId];\n        if (this.props.schema.required.indexOf(fieldId) !== -1) {\n          if (field.type !== 'boolean' && !data) {\n            errors[fieldId] = errors[field] || [];\n            errors[fieldId].push(\n              this.props.intl.formatMessage(messages.required),\n            );\n          }\n          if (field.minLength && data.length < field.minLength) {\n            errors[fieldId] = errors[field] || [];\n            errors[fieldId].push(\n              this.props.intl.formatMessage(messages.minLength, {\n                len: field.minLength,\n              }),\n            );\n          }\n        }\n        if (field.uniqueItems && data && uniq(data).length !== data.length) {\n          errors[fieldId] = errors[field] || [];\n          errors[fieldId].push(\n            this.props.intl.formatMessage(messages.uniqueItems),\n          );\n        }\n      }),\n    );\n    if (keys(errors).length > 0) {\n      this.setState({\n        errors,\n      });\n    } else {\n      this.props.onSubmit(this.state.formData);\n    }\n  }\n\n  /**\n   * Select tab handler\n   * @method selectTab\n   * @param {Object} event Event object.\n   * @param {number} index Selected tab index.\n   * @returns {undefined}\n   */\n  selectTab(event, { index }) {\n    this.setState({\n      currentTab: index,\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { schema, onCancel } = this.props;\n    const currentFieldset = schema.fieldsets[this.state.currentTab];\n\n    const fields = map(currentFieldset.fields, field => ({\n      ...schema.properties[field],\n      id: field,\n      value: this.state.formData[field],\n      required: schema.required.indexOf(field) !== -1,\n      onChange: this.onChangeField,\n    }));\n\n    return (\n      <Modal open={this.props.open}>\n        <Header>{this.props.title}</Header>\n        <Modal.Content>\n          <UiForm\n            method=\"post\"\n            onSubmit={this.onSubmit}\n            error={keys(this.state.errors).length > 0}\n          >\n            <Message error>\n              <FormattedMessage\n                id=\"There were some errors.\"\n                defaultMessage=\"There were some errors.\"\n              />\n            </Message>\n            {schema.fieldsets.length > 1 && (\n              <Menu tabular stackable>\n                {map(schema.fieldsets, (item, index) => (\n                  <Menu.Item\n                    name={item.id}\n                    index={index}\n                    key={item.id}\n                    active={this.state.currentTab === index}\n                    onClick={this.selectTab}\n                  >\n                    {item.title}\n                  </Menu.Item>\n                ))}\n              </Menu>\n            )}\n            {fields.map(field => <Field {...field} key={field.id} />)}\n          </UiForm>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button\n            basic\n            circular\n            primary\n            floated=\"right\"\n            icon=\"arrow right\"\n            title={\n              this.props.submitLabel\n                ? this.props.submitLabel\n                : this.props.intl.formatMessage(messages.save)\n            }\n            size=\"big\"\n            onClick={this.onSubmit}\n          />\n          {onCancel && (\n            <Button\n              basic\n              circular\n              secondary\n              icon=\"remove\"\n              title={this.props.intl.formatMessage(messages.cancel)}\n              floated=\"right\"\n              size=\"big\"\n              onClick={onCancel}\n            />\n          )}\n        </Modal.Actions>\n      </Modal>\n    );\n  }\n}\n","/**\n * History component.\n * @module components/manage/History/History\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Container, Dropdown, Icon, Segment, Table } from 'semantic-ui-react';\nimport { concat, map, reverse } from 'lodash';\nimport { Portal } from 'react-portal';\nimport moment from 'moment';\nimport {\n  FormattedMessage,\n  defineMessages,\n  injectIntl,\n  intlShape,\n} from 'react-intl';\n\nimport { Toolbar } from '../../../components';\nimport { getHistory, revertHistory } from '../../../actions';\nimport { getBaseUrl } from '../../../helpers';\n\nconst messages = defineMessages({\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n});\n\n@injectIntl\n@connect(\n  (state, props) => ({\n    entries: state.history.entries,\n    pathname: props.location.pathname,\n    title: state.content.data.title,\n    revertRequest: state.history.revert,\n  }),\n  dispatch => bindActionCreators({ getHistory, revertHistory }, dispatch),\n)\n/**\n * HistoryComponent class.\n * @class HistoryComponent\n * @extends Component\n */\nexport default class HistoryComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getHistory: PropTypes.func.isRequired,\n    revertHistory: PropTypes.func.isRequired,\n    revertRequest: PropTypes.shape({\n      loaded: PropTypes.bool,\n      loading: PropTypes.bool,\n    }).isRequired,\n    pathname: PropTypes.string.isRequired,\n    entries: PropTypes.arrayOf(\n      PropTypes.shape({\n        transition_title: PropTypes.string,\n        type: PropTypes.string,\n        action: PropTypes.string,\n        state_title: PropTypes.string,\n        time: PropTypes.string,\n        comments: PropTypes.string,\n        actor: PropTypes.shape({ fullname: PropTypes.string }),\n      }),\n    ).isRequired,\n    title: PropTypes.string.isRequired,\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Workflow\n   */\n  constructor(props) {\n    super(props);\n    this.onRevert = this.onRevert.bind(this);\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getHistory(getBaseUrl(this.props.pathname));\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (this.props.revertRequest.loading && nextProps.revertRequest.loaded) {\n      this.props.getHistory(getBaseUrl(this.props.pathname));\n    }\n  }\n\n  /**\n   * On revert\n   * @method onRevert\n   * @param {object} event Event object\n   * @param {number} value Value\n   * @returns {undefined}\n   */\n  onRevert(event, { value }) {\n    this.props.revertHistory(getBaseUrl(this.props.pathname), value);\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const entries = reverse(concat(this.props.entries));\n    let title = entries.length > 0 ? entries[0].state_title : '';\n    for (let x = 1; x < entries.length; x += 1) {\n      entries[x].prev_state_title = title;\n      title = entries[x].state_title || title;\n    }\n    reverse(entries);\n    return (\n      <Container id=\"page-history\">\n        <Helmet title=\"History\" />\n        <Segment.Group raised>\n          <Segment className=\"primary\">\n            <FormattedMessage\n              id=\"History of {title}\"\n              defaultMessage=\"History of {title}\"\n              values={{\n                title: <q>{this.props.title}</q>,\n              }}\n            />\n          </Segment>\n          <Segment secondary>\n            <FormattedMessage\n              id=\"You can view the history of your item below.\"\n              defaultMessage=\"You can view the history of your item below.\"\n            />\n          </Segment>\n          <Table selectable compact singleLine attached>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell width={4}>\n                  <FormattedMessage id=\"What\" defaultMessage=\"What\" />\n                </Table.HeaderCell>\n                <Table.HeaderCell width={4}>\n                  <FormattedMessage id=\"Who\" defaultMessage=\"Who\" />\n                </Table.HeaderCell>\n                <Table.HeaderCell width={4}>\n                  <FormattedMessage id=\"When\" defaultMessage=\"When\" />\n                </Table.HeaderCell>\n                <Table.HeaderCell width={4}>\n                  <FormattedMessage\n                    id=\"Change Note\"\n                    defaultMessage=\"Change Note\"\n                  />\n                </Table.HeaderCell>\n                <Table.HeaderCell />\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {map(entries, entry => (\n                <Table.Row key={entry.time}>\n                  <Table.Cell>\n                    {('version' in entry &&\n                      entry.version > 0 && (\n                        <Link\n                          className=\"item\"\n                          to={`${getBaseUrl(\n                            this.props.pathname,\n                          )}/diff?one=${entry.version - 1}&two=${\n                            entry.version\n                          }`}\n                        >\n                          {entry.transition_title}\n                        </Link>\n                      )) || (\n                      <span>\n                        {entry.transition_title}\n                        {entry.type === 'workflow' &&\n                          ` (${\n                            entry.action ? `${entry.prev_state_title} → ` : ''\n                          }${entry.state_title})`}\n                      </span>\n                    )}\n                  </Table.Cell>\n                  <Table.Cell>{entry.actor.fullname}</Table.Cell>\n                  <Table.Cell>\n                    <span title={moment(entry.time).format('LLLL')}>\n                      {moment(entry.time).fromNow()}\n                    </span>\n                  </Table.Cell>\n                  <Table.Cell>{entry.comments}</Table.Cell>\n                  <Table.Cell>\n                    {entry.type === 'versioning' && (\n                      <Dropdown icon=\"ellipsis horizontal\">\n                        <Dropdown.Menu className=\"left\">\n                          {'version' in entry &&\n                            entry.version > 0 && (\n                              <Link\n                                className=\"item\"\n                                to={`${getBaseUrl(\n                                  this.props.pathname,\n                                )}/diff?one=${entry.version - 1}&two=${\n                                  entry.version\n                                }`}\n                              >\n                                <Icon name=\"copy\" />{' '}\n                                <FormattedMessage\n                                  id=\"View changes\"\n                                  defaultMessage=\"View changes\"\n                                />\n                              </Link>\n                            )}\n                          {'version' in entry && (\n                            <Link\n                              className=\"item\"\n                              to={`${getBaseUrl(this.props.pathname)}?version=${\n                                entry.version\n                              }`}\n                            >\n                              <Icon name=\"eye\" />{' '}\n                              <FormattedMessage\n                                id=\"View this revision\"\n                                defaultMessage=\"View this revision\"\n                              />\n                            </Link>\n                          )}\n                          {'version' in entry && (\n                            <Dropdown.Item\n                              value={entry.version}\n                              onClick={this.onRevert}\n                            >\n                              <Icon name=\"undo\" />{' '}\n                              <FormattedMessage\n                                id=\"Revert to this revision\"\n                                defaultMessage=\"Revert to this revision\"\n                              />\n                            </Dropdown.Item>\n                          )}\n                        </Dropdown.Menu>\n                      </Dropdown>\n                    )}\n                  </Table.Cell>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        </Segment.Group>\n        <Portal node={__CLIENT__ && document.getElementById('toolbar')}>\n          <Toolbar\n            pathname={this.props.pathname}\n            inner={\n              <Link to={`${getBaseUrl(this.props.pathname)}`} className=\"item\">\n                <Icon\n                  name=\"arrow left\"\n                  size=\"big\"\n                  color=\"blue\"\n                  title={this.props.intl.formatMessage(messages.back)}\n                />\n              </Link>\n            }\n          />\n        </Portal>\n      </Container>\n    );\n  }\n}\n","/**\n * Messages component.\n * @module components/manage/Messages/Messages\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Message, Container } from 'semantic-ui-react';\nimport { map } from 'lodash';\n\nimport { removeMessage } from '../../../actions';\n\n@connect(\n  state => ({\n    messages: state.messages.messages,\n  }),\n  dispatch => bindActionCreators({ removeMessage }, dispatch),\n)\n/**\n * Messages container class.\n * @class Messages\n * @extends Component\n */\nexport default class Messages extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    removeMessage: PropTypes.func.isRequired,\n    messages: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n        body: PropTypes.string,\n        level: PropTypes.string,\n      }),\n    ).isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Messages\n   */\n  constructor(props) {\n    super(props);\n    this.onDismiss = this.onDismiss.bind(this);\n  }\n\n  // /**\n  //  * Component will receive props\n  //  * @method componentWillReceiveProps\n  //  * @param {Object} nextProps Next properties\n  //  * @returns {undefined}\n  //  */\n  // componentWillReceiveProps(nextProps) {\n  //   if (nextProps.messages.length > this.props.messages.length) {\n  //     window.setTimeout(() => {\n  //       if (this.props.messages.length > 0) {\n  //         this.props.removeMessage(-1);\n  //       }\n  //     }, 6000);\n  //   }\n  // }\n\n  /**\n   * On dismiss\n   * @method onDismiss\n   * @param {Object} event Event object\n   * @param {number} value Index of message\n   * @returns {undefined}\n   */\n  onDismiss(event, { value }) {\n    this.props.removeMessage(value);\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      this.props.messages && (\n        <Container className=\"messages\">\n          {map(this.props.messages, (message, index) => (\n            <Message\n              key={message.id}\n              value={index}\n              onDismiss={this.onDismiss}\n              error={message.level === 'error'}\n              success={message.level === 'success'}\n              warning={message.level === 'warning'}\n              info={message.level === 'info'}\n              header={message.title}\n              content={message.body}\n            />\n          ))}\n        </Container>\n      )\n    );\n  }\n}\n","/**\n * Change password component.\n * @module components/manage/Preferences/ChangePassword\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Router, Link } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport {\n  FormattedMessage,\n  defineMessages,\n  injectIntl,\n  intlShape,\n} from 'react-intl';\nimport { Container, Icon, Menu } from 'semantic-ui-react';\nimport jwtDecode from 'jwt-decode';\n\nimport { Form, Toolbar } from '../../../components';\nimport { updatePassword, addMessage } from '../../../actions';\nimport { getBaseUrl } from '../../../helpers';\n\nconst messages = defineMessages({\n  changePassword: {\n    id: 'Change Password',\n    defaultMessage: 'Change Password',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  oldPasswordTitle: {\n    id: 'Current password',\n    defaultMessage: 'Current password',\n  },\n  oldPasswordDescription: {\n    id: 'Enter your current password.',\n    defaultMessage: 'Enter your current password.',\n  },\n  newPasswordTitle: {\n    id: 'New password',\n    defaultMessage: 'New password',\n  },\n  newPasswordDescription: {\n    id: 'Enter your new password. Minimum 5 characters.',\n    defaultMessage: 'Enter your new password. Minimum 5 characters.',\n  },\n  newPasswordRepeatTitle: {\n    id: 'Confirm password',\n    defaultMessage: 'Confirm password',\n  },\n  newPasswordRepeatDescription: {\n    id: 'Re-enter the password. Make sure the passwords are identical.',\n    defaultMessage:\n      'Re-enter the password. Make sure the passwords are identical.',\n  },\n  saved: {\n    id: 'Changes saved',\n    defaultMessage: 'Changes saved',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n});\n\n@injectIntl\n@connect(\n  (state, props) => ({\n    userId: state.userSession.token\n      ? jwtDecode(state.userSession.token).sub\n      : '',\n    loading: state.users.update_password.loading,\n    pathname: props.location.pathname,\n  }),\n  dispatch => bindActionCreators({ updatePassword, addMessage }, dispatch),\n)\n/**\n * ChangePassword class.\n * @class ChangePassword\n * @extends Component\n */\nexport default class ChangePassword extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    userId: PropTypes.string.isRequired,\n    loading: PropTypes.bool.isRequired,\n    updatePassword: PropTypes.func.isRequired,\n    addMessage: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ChangePassword\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    if (data.newPassword === data.newPasswordRepeat) {\n      this.props.updatePassword(\n        this.props.userId,\n        data.oldPassword,\n        data.newPassword,\n      );\n      this.props.addMessage(\n        null,\n        this.props.intl.formatMessage(messages.saved),\n        'success',\n      );\n    }\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    Router.goBack();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Container id=\"page-change-password\">\n        <Helmet\n          title={this.props.intl.formatMessage(messages.changePassword)}\n        />\n        <Menu attached=\"top\" tabular stackable>\n          <Link to=\"/personal-information\" className=\"item\">\n            <FormattedMessage\n              id=\"Personal Information\"\n              defaultMessage=\"Personal Information\"\n            />\n          </Link>\n          <Link to=\"/personal-preferences\" className=\"item\">\n            <FormattedMessage\n              id=\"Personal Preferences\"\n              defaultMessage=\"Personal Preferences\"\n            />\n          </Link>\n          <Menu.Item\n            name={this.props.intl.formatMessage(messages.changePassword)}\n            active\n          />\n        </Menu>\n        <Form\n          schema={{\n            fieldsets: [\n              {\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n                fields: ['oldPassword', 'newPassword', 'newPasswordRepeat'],\n              },\n            ],\n            properties: {\n              oldPassword: {\n                description: this.props.intl.formatMessage(\n                  messages.oldPasswordDescription,\n                ),\n                title: this.props.intl.formatMessage(messages.oldPasswordTitle),\n                type: 'string',\n                widget: 'password',\n              },\n              newPassword: {\n                description: this.props.intl.formatMessage(\n                  messages.newPasswordDescription,\n                ),\n                title: this.props.intl.formatMessage(messages.newPasswordTitle),\n                type: 'string',\n                widget: 'password',\n              },\n              newPasswordRepeat: {\n                description: this.props.intl.formatMessage(\n                  messages.newPasswordRepeatDescription,\n                ),\n                title: this.props.intl.formatMessage(\n                  messages.newPasswordRepeatTitle,\n                ),\n                type: 'string',\n                widget: 'password',\n              },\n            },\n            required: ['oldPassword', 'newPassword', 'newPasswordRepeat'],\n          }}\n          onSubmit={this.onSubmit}\n          onCancel={this.onCancel}\n          loading={this.props.loading}\n        />\n        <Portal node={__CLIENT__ && document.getElementById('toolbar')}>\n          <Toolbar\n            pathname={this.props.pathname}\n            inner={\n              <Link to={`${getBaseUrl(this.props.pathname)}`} className=\"item\">\n                <Icon\n                  name=\"arrow left\"\n                  size=\"big\"\n                  color=\"blue\"\n                  title={this.props.intl.formatMessage(messages.back)}\n                />\n              </Link>\n            }\n          />\n        </Portal>\n      </Container>\n    );\n  }\n}\n","/**\n * Personal information component.\n * @module components/manage/Preferences/PersonalInformation\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Portal } from 'react-portal';\nimport { Router, Link } from 'react-router-dom';\nimport {\n  FormattedMessage,\n  defineMessages,\n  injectIntl,\n  intlShape,\n} from 'react-intl';\nimport { Container, Icon, Menu } from 'semantic-ui-react';\nimport jwtDecode from 'jwt-decode';\n\nimport { Form, Toolbar } from '../../../components';\nimport { getUser, updateUser, addMessage } from '../../../actions';\nimport { getBaseUrl } from '../../../helpers';\n\nconst messages = defineMessages({\n  personalInformation: {\n    id: 'Personal Information',\n    defaultMessage: 'Personal Information',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  fullnameTitle: {\n    id: 'Full Name',\n    defaultMessage: 'Full Name',\n  },\n  fullnameDescription: {\n    id: 'Enter full name, e.g. John Smith.',\n    defaultMessage: 'Enter full name, e.g. John Smith.',\n  },\n  emailTitle: {\n    id: 'E-mail',\n    defaultMessage: 'E-mail',\n  },\n  emailDescription: {\n    id: 'We will use this address if you need to recover your password',\n    defaultMessage:\n      'We will use this address if you need to recover your password',\n  },\n  homePageTitle: {\n    id: 'Home page',\n    defaultMessage: 'Home page',\n  },\n  homePageDescription: {\n    id: 'The URL for your external home page, if you have one.',\n    defaultMessage: 'The URL for your external home page, if you have one.',\n  },\n  locationTitle: {\n    id: 'Location',\n    defaultMessage: 'Location',\n  },\n  locationDescription: {\n    id:\n      'Your location - either city and country - or in a company setting, where your office is located.',\n    defaultMessage:\n      'Your location - either city and country - or in a company setting, where your office is located.',\n  },\n  saved: {\n    id: 'Changes saved',\n    defaultMessage: 'Changes saved',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n});\n\n@injectIntl\n@connect(\n  (state, props) => ({\n    user: state.users.user,\n    userId: state.userSession.token\n      ? jwtDecode(state.userSession.token).sub\n      : '',\n    loaded: state.users.get.loaded,\n    loading: state.users.update.loading,\n    pathname: props.location.pathname,\n  }),\n  dispatch => bindActionCreators({ addMessage, getUser, updateUser }, dispatch),\n)\n/**\n * PersonalInformation class.\n * @class PersonalInformation\n * @extends Component\n */\nexport default class PersonalInformation extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    user: PropTypes.shape({\n      fullname: PropTypes.string,\n      email: PropTypes.string,\n      home_page: PropTypes.string,\n      location: PropTypes.string,\n    }).isRequired,\n    updateUser: PropTypes.func.isRequired,\n    getUser: PropTypes.func.isRequired,\n    addMessage: PropTypes.func.isRequired,\n    userId: PropTypes.string.isRequired,\n    intl: intlShape.isRequired,\n    loaded: PropTypes.bool.isRequired,\n    loading: PropTypes.bool,\n    pathname: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ChangePassword\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  componentWillMount() {\n    this.props.getUser(this.props.userId);\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.updateUser(this.props.userId, data);\n    this.props.addMessage(\n      null,\n      this.props.intl.formatMessage(messages.saved),\n      'success',\n    );\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    Router.goBack();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return this.props.loaded ? (\n      <Container id=\"page-personal-information\">\n        <Helmet\n          title={this.props.intl.formatMessage(messages.personalInformation)}\n        />\n        <Menu attached=\"top\" tabular stackable>\n          <Menu.Item\n            name={this.props.intl.formatMessage(messages.personalInformation)}\n            active\n          />\n          <Link to=\"/personal-preferences\" className=\"item\">\n            <FormattedMessage\n              id=\"Personal Preferences\"\n              defaultMessage=\"Personal Preferences\"\n            />\n          </Link>\n          <Link to=\"/change-password\" className=\"item\">\n            <FormattedMessage\n              id=\"Change Password\"\n              defaultMessage=\"Change Password\"\n            />\n          </Link>\n        </Menu>\n        <Form\n          formData={this.props.user}\n          schema={{\n            fieldsets: [\n              {\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n                fields: ['fullname', 'email', 'home_page', 'location'],\n              },\n            ],\n            properties: {\n              fullname: {\n                description: this.props.intl.formatMessage(\n                  messages.fullnameDescription,\n                ),\n                title: this.props.intl.formatMessage(messages.fullnameTitle),\n                type: 'string',\n              },\n              email: {\n                description: this.props.intl.formatMessage(\n                  messages.emailDescription,\n                ),\n                title: this.props.intl.formatMessage(messages.emailTitle),\n                type: 'string',\n              },\n              home_page: {\n                description: this.props.intl.formatMessage(\n                  messages.homePageDescription,\n                ),\n                title: this.props.intl.formatMessage(messages.homePageTitle),\n                type: 'string',\n              },\n              location: {\n                description: this.props.intl.formatMessage(\n                  messages.locationDescription,\n                ),\n                title: this.props.intl.formatMessage(messages.locationTitle),\n                type: 'string',\n              },\n            },\n            required: ['email'],\n          }}\n          onSubmit={this.onSubmit}\n          onCancel={this.onCancel}\n          loading={this.props.loading}\n        />\n        <Portal node={__CLIENT__ && document.getElementById('toolbar')}>\n          <Toolbar\n            pathname={this.props.pathname}\n            inner={\n              <Link to={`${getBaseUrl(this.props.pathname)}`} className=\"item\">\n                <Icon\n                  name=\"arrow left\"\n                  size=\"big\"\n                  color=\"blue\"\n                  title={this.props.intl.formatMessage(messages.back)}\n                />\n              </Link>\n            }\n          />\n        </Portal>\n      </Container>\n    ) : (\n      <div />\n    );\n  }\n}\n","/**\n * Personal preferences component.\n * @module components/manage/Preferences/PersonalPreferences\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Router, Link } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport { updateIntl } from 'react-intl-redux';\nimport { map, keys } from 'lodash';\nimport cookie from 'react-cookie';\nimport request from 'superagent';\nimport {\n  FormattedMessage,\n  defineMessages,\n  injectIntl,\n  intlShape,\n} from 'react-intl';\nimport { Container, Icon, Menu } from 'semantic-ui-react';\n\nimport { Form, Toolbar } from '../../../components';\nimport languages from '../../../constants/Languages';\nimport { addMessage } from '../../../actions';\nimport { getBaseUrl } from '../../../helpers';\n\nconst messages = defineMessages({\n  personalPreferences: {\n    id: 'Personal Preferences',\n    defaultMessage: 'Personal Preferences',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  language: {\n    id: 'Language',\n    defaultMessage: 'Language',\n  },\n  languageDescription: {\n    id: 'Your preferred language',\n    defaultMessage: 'Your preferred language',\n  },\n  saved: {\n    id: 'Changes saved',\n    defaultMessage: 'Changes saved',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n});\n\n@injectIntl\n@connect(\n  (state, props) => ({\n    pathname: props.location.pathname,\n  }),\n  dispatch => bindActionCreators({ updateIntl, addMessage }, dispatch),\n)\n/**\n * PersonalPreferences class.\n * @class PersonalPreferences\n * @extends Component\n */\nexport default class PersonalPreferences extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    updateIntl: PropTypes.func.isRequired,\n    addMessage: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs PersonalPreferences\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    cookie.save('lang', data.language || '', {\n      expires: new Date((2 ** 31 - 1) * 1000),\n      path: '/',\n    });\n    request('GET', `/assets/locales/${data.language || 'en'}.json`).then(\n      locale => {\n        this.props.updateIntl({\n          locale: locale.language || 'en',\n          messages: locale.body,\n        });\n        this.props.addMessage(\n          null,\n          this.props.intl.formatMessage(messages.saved),\n          'success',\n        );\n      },\n    );\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    Router.goBack();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Container id=\"page-personal-preferences\">\n        <Helmet\n          title={this.props.intl.formatMessage(messages.personalPreferences)}\n        />\n        <Menu attached=\"top\" tabular stackable>\n          <Link to=\"/personal-information\" className=\"item\">\n            <FormattedMessage\n              id=\"Personal Information\"\n              defaultMessage=\"Personal Information\"\n            />\n          </Link>\n          <Menu.Item\n            name={this.props.intl.formatMessage(messages.personalPreferences)}\n            active\n          />\n          <Link to=\"/change-password\" className=\"item\">\n            <FormattedMessage id=\"Password\" defaultMessage=\"Password\" />\n          </Link>\n        </Menu>\n        <Form\n          formData={{ language: cookie.load('lang') || '' }}\n          schema={{\n            fieldsets: [\n              {\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n                fields: ['language'],\n              },\n            ],\n            properties: {\n              language: {\n                description: this.props.intl.formatMessage(\n                  messages.languageDescription,\n                ),\n                title: this.props.intl.formatMessage(messages.language),\n                type: 'string',\n                choices: map(keys(languages), lang => [lang, languages[lang]]),\n              },\n            },\n            required: [],\n          }}\n          onSubmit={this.onSubmit}\n          onCancel={this.onCancel}\n        />{' '}\n        <Portal node={__CLIENT__ && document.getElementById('toolbar')}>\n          <Toolbar\n            pathname={this.props.pathname}\n            inner={\n              <Link to={`${getBaseUrl(this.props.pathname)}`} className=\"item\">\n                <Icon\n                  name=\"arrow left\"\n                  size=\"big\"\n                  color=\"blue\"\n                  title={this.props.intl.formatMessage(messages.back)}\n                />\n              </Link>\n            }\n          />\n        </Portal>\n      </Container>\n    );\n  }\n}\n","/**\n * Sharing container.\n * @module components/manage/Sharing/Sharing\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Router, Link } from 'react-router-dom';\nimport { find, isEqual, map } from 'lodash';\nimport { Portal } from 'react-portal';\nimport {\n  Button,\n  Checkbox,\n  Container,\n  Form,\n  Icon,\n  Input,\n  Segment,\n  Table,\n} from 'semantic-ui-react';\nimport jwtDecode from 'jwt-decode';\nimport {\n  FormattedMessage,\n  defineMessages,\n  injectIntl,\n  intlShape,\n} from 'react-intl';\n\nimport { updateSharing, getSharing } from '../../../actions';\nimport { getBaseUrl } from '../../../helpers';\nimport { Toolbar } from '../../../components';\n\nconst messages = defineMessages({\n  searchForUserOrGroup: {\n    id: 'Search for user or group',\n    defaultMessage: 'Search for user or group',\n  },\n  inherit: {\n    id: 'Inherit permissions from higher levels',\n    defaultMessage: 'Inherit permissions from higher levels',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n});\n\n@injectIntl\n@connect(\n  (state, props) => ({\n    entries: state.sharing.data.entries,\n    inherit: state.sharing.data.inherit,\n    available_roles: state.sharing.data.available_roles,\n    updateRequest: state.sharing.update,\n    pathname: props.location.pathname,\n    title: state.content.data.title,\n    login: state.userSession.token\n      ? jwtDecode(state.userSession.token).sub\n      : '',\n  }),\n  dispatch => bindActionCreators({ updateSharing, getSharing }, dispatch),\n)\n/**\n * SharingComponent class.\n * @class SharingComponent\n * @extends Component\n */\nexport default class SharingComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    updateSharing: PropTypes.func.isRequired,\n    getSharing: PropTypes.func.isRequired,\n    updateRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    pathname: PropTypes.string.isRequired,\n    entries: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string,\n        login: PropTypes.string,\n        roles: PropTypes.object,\n        title: PropTypes.string,\n        type: PropTypes.string,\n      }),\n    ).isRequired,\n    available_roles: PropTypes.arrayOf(PropTypes.string).isRequired,\n    inherit: PropTypes.bool,\n    title: PropTypes.string.isRequired,\n    login: PropTypes.string,\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    inherit: null,\n    login: '',\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Sharing\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.onChangeSearch = this.onChangeSearch.bind(this);\n    this.onSearch = this.onSearch.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onToggleInherit = this.onToggleInherit.bind(this);\n    this.state = {\n      search: '',\n      inherit: props.inherit,\n      entries: props.entries,\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getSharing(getBaseUrl(this.props.pathname), this.state.search);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (this.props.updateRequest.loading && nextProps.updateRequest.loaded) {\n      this.props.getSharing(getBaseUrl(this.props.pathname), this.state.search);\n    }\n    this.setState({\n      inherit:\n        this.props.inherit === null ? nextProps.inherit : this.state.inherit,\n      entries: map(nextProps.entries, entry => {\n        const values = find(this.state.entries, { id: entry.id });\n        return {\n          ...entry,\n          roles: values ? values.roles : entry.roles,\n        };\n      }),\n    });\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n  onSubmit(event) {\n    const data = { entries: [] };\n    event.preventDefault();\n    if (this.props.inherit !== this.state.inherit) {\n      data.inherit = this.state.inherit;\n    }\n    for (let i = 0; i < this.props.entries.length; i += 1) {\n      if (!isEqual(this.props.entries[i].roles, this.state.entries[i].roles)) {\n        data.entries.push({\n          id: this.state.entries[i].id,\n          type: this.state.entries[i].type,\n          roles: this.state.entries[i].roles,\n        });\n      }\n    }\n    this.props.updateSharing(getBaseUrl(this.props.pathname), data);\n  }\n\n  /**\n   * Search handler\n   * @method onSearch\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n  onSearch(event) {\n    event.preventDefault();\n    this.props.getSharing(getBaseUrl(this.props.pathname), this.state.search);\n  }\n\n  /**\n   * On change search handler\n   * @method onChangeSearch\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n  onChangeSearch(event) {\n    this.setState({\n      search: event.target.value,\n    });\n  }\n\n  /**\n   * On toggle inherit handler\n   * @method onToggleInherit\n   * @returns {undefined}\n   */\n  onToggleInherit() {\n    this.setState({\n      inherit: !this.state.inherit,\n    });\n  }\n\n  /**\n   * On change handler\n   * @method onChange\n   * @param {object} event Event object\n   * @param {string} value Entry value\n   * @returns {undefined}\n   */\n  onChange(event, { value }) {\n    const [principal, role] = value.split('.');\n    this.setState({\n      entries: map(this.state.entries, entry => ({\n        ...entry,\n        roles:\n          entry.id === principal\n            ? {\n                ...entry.roles,\n                [role]: !entry.roles[role],\n              }\n            : entry.roles,\n      })),\n    });\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    Router.push(getBaseUrl(this.props.pathname));\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Container id=\"page-sharing\">\n        <Helmet title=\"Sharing\" />\n        <Segment.Group raised>\n          <Segment className=\"primary\">\n            <FormattedMessage\n              id=\"Sharing for {title}\"\n              defaultMessage=\"Sharing for {title}\"\n              values={{ title: <q>{this.props.title}</q> }}\n            />\n          </Segment>\n          <Segment secondary>\n            <FormattedMessage\n              id=\"You can control who can view and edit your item using the list below.\"\n              defaultMessage=\"You can control who can view and edit your item using the list below.\"\n            />\n          </Segment>\n          <Segment>\n            <Form onSubmit={this.onSearch}>\n              <Form.Field>\n                <Input\n                  name=\"SearchableText\"\n                  action={{ icon: 'search' }}\n                  placeholder={this.props.intl.formatMessage(\n                    messages.searchForUserOrGroup,\n                  )}\n                  onChange={this.onChangeSearch}\n                />\n              </Form.Field>\n            </Form>\n          </Segment>\n          <Form onSubmit={this.onSubmit}>\n            <Table celled padded striped attached>\n              <Table.Header>\n                <Table.Row>\n                  <Table.HeaderCell>\n                    <FormattedMessage id=\"Name\" defaultMessage=\"Name\" />\n                  </Table.HeaderCell>\n                  {this.props.available_roles.map(role => (\n                    <Table.HeaderCell key={role}>{role}</Table.HeaderCell>\n                  ))}\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {this.state.entries.map(entry => (\n                  <Table.Row key={entry.id}>\n                    <Table.Cell>\n                      <Icon\n                        name={entry.type === 'user' ? 'user' : 'users'}\n                        title={entry.type === 'user' ? 'User' : 'Group'}\n                      />{' '}\n                      {entry.title}\n                      {entry.login && ` (${entry.login})`}\n                    </Table.Cell>\n                    {this.props.available_roles.map(role => (\n                      <Table.Cell key={role}>\n                        {entry.roles[role] === 'global' && (\n                          <Icon\n                            name=\"check circle outline\"\n                            title=\"Global role\"\n                            color=\"blue\"\n                          />\n                        )}\n                        {entry.roles[role] === 'acquired' && (\n                          <Icon\n                            name=\"check circle outline\"\n                            color=\"green\"\n                            title=\"Inherited value\"\n                          />\n                        )}\n                        {typeof entry.roles[role] === 'boolean' && (\n                          <Checkbox\n                            onChange={this.onChange}\n                            value={`${entry.id}.${role}`}\n                            checked={entry.roles[role]}\n                            disabled={entry.login === this.props.login}\n                          />\n                        )}\n                      </Table.Cell>\n                    ))}\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n            <Segment attached>\n              <Form.Field>\n                <Checkbox\n                  checked={this.state.inherit}\n                  onChange={this.onToggleInherit}\n                  label={this.props.intl.formatMessage(messages.inherit)}\n                />\n              </Form.Field>\n              <p className=\"help\">\n                <FormattedMessage\n                  id=\"By default, permissions from the container of this item are inherited. If you disable this, only the explicitly defined sharing permissions will be valid. In the overview, the symbol {inherited} indicates an inherited value. Similarly, the symbol {global} indicates a global role, which is managed by the site administrator.\"\n                  defaultMessage=\"By default, permissions from the container of this item are inherited. If you disable this, only the explicitly defined sharing permissions will be valid. In the overview, the symbol {inherited} indicates an inherited value. Similarly, the symbol {global} indicates a global role, which is managed by the site administrator.\"\n                  values={{\n                    inherited: (\n                      <Icon name=\"check circle outline\" color=\"green\" />\n                    ),\n                    global: <Icon name=\"check circle outline\" color=\"blue\" />,\n                  }}\n                />\n              </p>\n            </Segment>\n            <Segment className=\"actions\" attached clearing>\n              <Button\n                basic\n                circular\n                primary\n                type=\"submit\"\n                floated=\"right\"\n                icon=\"arrow right\"\n                title={this.props.intl.formatMessage(messages.save)}\n                size=\"big\"\n                onClick={this.onSubmit}\n              />\n              <Button\n                basic\n                circular\n                secondary\n                icon=\"remove\"\n                title={this.props.intl.formatMessage(messages.cancel)}\n                floated=\"right\"\n                size=\"big\"\n                onClick={this.onCancel}\n              />\n            </Segment>\n          </Form>\n        </Segment.Group>\n        <Portal node={__CLIENT__ && document.getElementById('toolbar')}>\n          <Toolbar\n            pathname={this.props.pathname}\n            inner={\n              <Link to={`${getBaseUrl(this.props.pathname)}`} className=\"item\">\n                <Icon\n                  name=\"arrow left\"\n                  size=\"big\"\n                  color=\"blue\"\n                  title={this.props.intl.formatMessage(messages.back)}\n                />\n              </Link>\n            }\n          />\n        </Portal>\n      </Container>\n    );\n  }\n}\n","/**\n * Edit description tile.\n * @module components/manage/Tiles/Description/Edit\n */\n\nimport React, { Component } from 'react';\nimport { Map } from 'immutable';\nimport PropTypes from 'prop-types';\nimport { Button } from 'semantic-ui-react';\nimport { stateFromHTML } from 'draft-js-import-html';\nimport { Editor, DefaultDraftBlockRenderMap, EditorState } from 'draft-js';\nimport { defineMessages, injectIntl, intlShape } from 'react-intl';\nimport { Icon } from '../../../../components';\nimport trashSVG from '../../../../icons/delete.svg';\n\nconst messages = defineMessages({\n  description: {\n    id: 'Add a description…',\n    defaultMessage: 'Add a description…',\n  },\n});\n\nconst blockRenderMap = Map({\n  unstyled: {\n    element: 'p',\n  },\n});\n\nconst extendedBlockRenderMap = DefaultDraftBlockRenderMap.merge(blockRenderMap);\n\n@injectIntl\n/**\n * Edit description tile class.\n * @class Edit\n * @extends Component\n */\nexport default class Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    properties: PropTypes.objectOf(PropTypes.any).isRequired,\n    selected: PropTypes.bool.isRequired,\n    tile: PropTypes.string.isRequired,\n    intl: intlShape.isRequired,\n    index: PropTypes.number.isRequired,\n    onChangeField: PropTypes.func.isRequired,\n    onSelectTile: PropTypes.func.isRequired,\n    onDeleteTile: PropTypes.func.isRequired,\n    onAddTile: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n\n    if (!__SERVER__) {\n      let editorState;\n      if (props.properties && props.properties.description) {\n        const contentState = stateFromHTML(props.properties.description);\n        editorState = EditorState.createWithContent(contentState);\n      } else {\n        editorState = EditorState.createEmpty();\n      }\n      this.state = { editorState };\n    }\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (\n      nextProps.properties.description &&\n      this.props.properties.description !== nextProps.properties.description &&\n      !this.props.selected\n    ) {\n      const contentState = stateFromHTML(nextProps.properties.description);\n      this.setState({\n        editorState: nextProps.properties.description\n          ? EditorState.createWithContent(contentState)\n          : EditorState.createEmpty(),\n      });\n    }\n\n    if (!this.props.selected && nextProps.selected) {\n      this.node.focus();\n    }\n  }\n\n  /**\n   * Change handler\n   * @method onChange\n   * @param {object} editorState Editor state.\n   * @returns {undefined}\n   */\n  onChange(editorState) {\n    this.setState({ editorState }, () => {\n      this.props.onChangeField(\n        'description',\n        editorState.getCurrentContent().getPlainText(),\n      );\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (__SERVER__) {\n      return <div />;\n    }\n    return (\n      <div\n        onClick={() => this.props.onSelectTile(this.props.tile)}\n        className={`tile description${this.props.selected ? ' selected' : ''}`}\n      >\n        <Editor\n          onChange={this.onChange}\n          editorState={this.state.editorState}\n          blockRenderMap={extendedBlockRenderMap}\n          handleReturn={() => {\n            this.props.onSelectTile(\n              this.props.onAddTile('text', this.props.index + 1),\n            );\n            return 'handled';\n          }}\n          handleKeyCommand={(command, editorState) => {\n            if (\n              command === 'backspace' &&\n              editorState.getCurrentContent().getPlainText().length === 0\n            ) {\n              this.props.onDeleteTile(this.props.tile, true);\n            }\n          }}\n          placeholder={this.props.intl.formatMessage(messages.description)}\n          blockStyleFn={() => 'documentDescription'}\n          ref={node => {\n            this.node = node;\n          }}\n        />\n        {this.props.selected && (\n          <Button\n            icon\n            basic\n            onClick={() => this.props.onDeleteTile(this.props.tile)}\n            className=\"tile-delete-button\"\n          >\n            <Icon name={trashSVG} size=\"18px\" />\n          </Button>\n        )}\n      </div>\n    );\n  }\n}\n","/**\n * View description tile.\n * @module components/manage/Tiles/Description/View\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * View description tile class.\n * @class View\n * @extends Component\n */\nconst View = ({ properties }) => (\n  <p className=\"documentDescription\">{properties.description}</p>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  properties: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default View;\n","/**\n * Edit image tile.\n * @module components/manage/Tiles/Image/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { readAsDataURL } from 'promise-file-reader';\nimport {\n  Button,\n  Dimmer,\n  Image,\n  Input,\n  Loader,\n  Message,\n} from 'semantic-ui-react';\nimport { bindActionCreators } from 'redux';\nimport { defineMessages, injectIntl, intlShape } from 'react-intl';\nimport { settings } from '~/config';\n\nimport { Icon } from '../../../../components';\nimport trashSVG from '../../../../icons/delete.svg';\nimport clearSVG from '../../../../icons/clear.svg';\nimport folderSVG from '../../../../icons/folder.svg';\nimport imageSVG from '../../../../icons/image.svg';\nimport imageLeftSVG from '../../../../icons/image-left.svg';\nimport imageRightSVG from '../../../../icons/image-right.svg';\nimport imageFitSVG from '../../../../icons/image-fit.svg';\nimport imageFullSVG from '../../../../icons/image-full.svg';\n\nimport { createContent } from '../../../../actions';\nimport { getBaseUrl } from '../../../../helpers';\n\nconst messages = defineMessages({\n  ImageTileInputPlaceholder: {\n    id: 'Browse or type URL',\n    defaultMessage: 'Browse or type URL',\n  },\n});\n\n@injectIntl\n@connect(\n  state => ({\n    request: state.content.create,\n    content: state.content.data,\n  }),\n  dispatch => bindActionCreators({ createContent }, dispatch),\n)\n/**\n * Edit image tile class.\n * @class Edit\n * @extends Component\n */\nexport default class Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    selected: PropTypes.bool.isRequired,\n    tile: PropTypes.string.isRequired,\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    content: PropTypes.objectOf(PropTypes.any).isRequired,\n    request: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    pathname: PropTypes.string.isRequired,\n    onChangeTile: PropTypes.func.isRequired,\n    onSelectTile: PropTypes.func.isRequired,\n    onDeleteTile: PropTypes.func.isRequired,\n    createContent: PropTypes.func.isRequired,\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n\n    this.onUploadImage = this.onUploadImage.bind(this);\n    this.state = {\n      uploading: false,\n      url: '',\n    };\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (\n      this.props.request.loading &&\n      nextProps.request.loaded &&\n      this.state.uploading\n    ) {\n      this.setState({\n        uploading: false,\n      });\n      this.props.onChangeTile(this.props.tile, {\n        ...this.props.data,\n        url: nextProps.content['@id'],\n      });\n    }\n  }\n\n  /**\n   * Upload image handler\n   * @method onUploadImage\n   * @returns {undefined}\n   */\n  onUploadImage({ target }) {\n    const file = target.files[0];\n    this.setState({\n      uploading: true,\n    });\n    readAsDataURL(file).then(data => {\n      const fields = data.match(/^data:(.*);(.*),(.*)$/);\n      this.props.createContent(getBaseUrl(this.props.pathname), {\n        '@type': 'Image',\n        image: {\n          data: fields[3],\n          encoding: fields[2],\n          'content-type': fields[1],\n          filename: file.name,\n        },\n      });\n    });\n  }\n\n  /**\n   * Align tile handler\n   * @method onAlignTile\n   * @param {string} align Alignment option\n   * @returns {undefined}\n   */\n  onAlignTile(align) {\n    this.props.onChangeTile(this.props.tile, {\n      ...this.props.data,\n      align,\n    });\n  }\n\n  /**\n   * Change url handler\n   * @method onChangeUrl\n   * @param {Object} target Target object\n   * @returns {undefined}\n   */\n  onChangeUrl = ({ target }) => {\n    this.setState({\n      url: target.value,\n    });\n  };\n\n  /**\n   * Submit url handler\n   * @method onSubmitUrl\n   * @returns {undefined}\n   */\n  onSubmitUrl = e => {\n    e.preventDefault();\n    this.props.onChangeTile(this.props.tile, {\n      ...this.props.data,\n      url: this.state.url,\n    });\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <div\n        onClick={() => this.props.onSelectTile(this.props.tile)}\n        className={[\n          'tile',\n          'image',\n          'align',\n          this.props.selected && 'selected',\n          this.props.data.align,\n        ]\n          .filter(e => !!e)\n          .join(' ')}\n      >\n        {this.props.selected &&\n          !!this.props.data.url && (\n            <div className=\"toolbar\">\n              <Button.Group>\n                <Button\n                  icon\n                  basic\n                  onClick={this.onAlignTile.bind(this, 'left')}\n                  active={this.props.data.align === 'left'}\n                >\n                  <Icon name={imageLeftSVG} size=\"24px\" />\n                </Button>\n              </Button.Group>\n              <Button.Group>\n                <Button\n                  icon\n                  basic\n                  onClick={this.onAlignTile.bind(this, 'right')}\n                  active={this.props.data.align === 'right'}\n                >\n                  <Icon name={imageRightSVG} size=\"24px\" />\n                </Button>\n              </Button.Group>\n              <Button.Group>\n                <Button\n                  icon\n                  basic\n                  onClick={this.onAlignTile.bind(this, 'center')}\n                  active={\n                    this.props.data.align === 'center' || !this.props.data.align\n                  }\n                >\n                  <Icon name={imageFitSVG} size=\"24px\" />\n                </Button>\n              </Button.Group>\n              <Button.Group>\n                <Button\n                  icon\n                  basic\n                  onClick={this.onAlignTile.bind(this, 'full')}\n                  active={this.props.data.align === 'full'}\n                >\n                  <Icon name={imageFullSVG} size=\"24px\" />\n                </Button>\n              </Button.Group>\n              <div className=\"separator\" />\n              <Button.Group>\n                <Button\n                  icon\n                  basic\n                  onClick={() =>\n                    this.props.onChangeTile(this.props.tile, {\n                      ...this.props.data,\n                      url: '',\n                    })\n                  }\n                >\n                  <Icon name={clearSVG} size=\"24px\" color=\"#e40166\" />\n                </Button>\n              </Button.Group>\n            </div>\n          )}\n        {this.props.selected &&\n          !this.props.data.url && (\n            <div className=\"toolbar\">\n              <Icon name={imageSVG} size=\"24px\" />\n              <form onSubmit={e => this.onSubmitUrl(e)}>\n                <Input\n                  onChange={this.onChangeUrl}\n                  placeholder={this.props.intl.formatMessage(\n                    messages.ImageTileInputPlaceholder,\n                  )}\n                />\n              </form>\n              <Button.Group>\n                <label className=\"ui button basic icon\">\n                  <Icon name={folderSVG} size=\"24px\" />\n                  <input\n                    type=\"file\"\n                    onChange={this.onUploadImage}\n                    style={{ display: 'none' }}\n                  />\n                </label>\n              </Button.Group>\n            </div>\n          )}\n        {this.props.data.url ? (\n          <p>\n            <Image\n              src={\n                this.props.data.url.includes(settings.apiPath)\n                  ? `${this.props.data.url}/@@images/image`\n                  : this.props.data.url\n              }\n              alt=\"\"\n            />\n          </p>\n        ) : (\n          <div>\n            <Message>\n              {this.state.uploading && (\n                <Dimmer active>\n                  <Loader indeterminate>Uploading image</Loader>\n                </Dimmer>\n              )}\n              <center>\n                <Icon name={imageSVG} size=\"100px\" color=\"#b8c6c8\" />\n              </center>\n            </Message>\n          </div>\n        )}\n        {this.props.selected && (\n          <Button\n            icon\n            basic\n            onClick={() => this.props.onDeleteTile(this.props.tile)}\n            className=\"tile-delete-button\"\n          >\n            <Icon name={trashSVG} size=\"18px\" />\n          </Button>\n        )}\n      </div>\n    );\n  }\n}\n","/**\n * View image tile.\n * @module components/manage/Tiles/Image/View\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Image } from 'semantic-ui-react';\n\n/**\n * View image tile class.\n * @class View\n * @extends Component\n */\nconst View = ({ data }) => (\n  <p\n    className={['tile', 'image', 'align', data.align]\n      .filter(e => !!e)\n      .join(' ')}\n  >\n    <Image src={`${data.url}/@@images/image`} alt=\"\" />\n  </p>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default View;\n","/**\n * Edit text tile.\n * @module components/manage/Tiles/Title/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'semantic-ui-react';\nimport { doesNodeContainClick } from 'semantic-ui-react/dist/commonjs/lib';\nimport Editor from 'draft-js-plugins-editor';\nimport { convertFromRaw, convertToRaw, EditorState } from 'draft-js';\nimport createInlineToolbarPlugin from 'draft-js-inline-toolbar-plugin';\nimport { defineMessages, injectIntl, intlShape } from 'react-intl';\nimport { includes, isEqual } from 'lodash';\n\nimport { settings } from '~/config';\n\nimport { Icon } from '../../../../components';\nimport trashSVG from '../../../../icons/delete.svg';\nimport addSVG from '../../../../icons/circle-plus.svg';\nimport cameraSVG from '../../../../icons/camera.svg';\nimport videoSVG from '../../../../icons/videocamera.svg';\nimport TemplatedTilesSVG from '../../../../icons/theme.svg';\n\nconst messages = defineMessages({\n  text: {\n    id: 'Type text…',\n    defaultMessage: 'Type text…',\n  },\n});\n\n@injectIntl\n/**\n * Edit text tile class.\n * @class Edit\n * @extends Component\n */\nexport default class Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    selected: PropTypes.bool.isRequired,\n    tile: PropTypes.string.isRequired,\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    intl: intlShape.isRequired,\n    index: PropTypes.number.isRequired,\n    onChangeTile: PropTypes.func.isRequired,\n    onSelectTile: PropTypes.func.isRequired,\n    onDeleteTile: PropTypes.func.isRequired,\n    onAddTile: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n\n    if (!__SERVER__) {\n      let editorState;\n      if (props.data && props.data.text) {\n        editorState = EditorState.createWithContent(\n          convertFromRaw(props.data.text),\n        );\n      } else {\n        editorState = EditorState.createEmpty();\n      }\n\n      const inlineToolbarPlugin = createInlineToolbarPlugin({\n        structure: settings.inlineToolbarButtons,\n      });\n\n      this.state = {\n        editorState,\n        inlineToolbarPlugin,\n        addNewTileOpened: false,\n        customTilesOpened: false,\n      };\n    }\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (this.props.selected) {\n      this.node.focus();\n    }\n    document.addEventListener('mousedown', this.handleClickOutside, false);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (!this.props.selected && nextProps.selected) {\n      this.node.focus();\n      this.setState({\n        editorState: EditorState.moveFocusToEnd(this.state.editorState),\n      });\n    }\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillUnmount\n   * @returns {undefined}\n   */\n  componentWillUnmount() {\n    if (this.props.selected) {\n      this.node.focus();\n    }\n    document.removeEventListener('mousedown', this.handleClickOutside, false);\n  }\n\n  /**\n   * Change handler\n   * @method onChange\n   * @param {object} editorState Editor state.\n   * @returns {undefined}\n   */\n  onChange(editorState) {\n    if (\n      !isEqual(\n        convertToRaw(editorState.getCurrentContent()),\n        convertToRaw(this.state.editorState.getCurrentContent()),\n      )\n    ) {\n      this.props.onChangeTile(this.props.tile, {\n        ...this.props.data,\n        text: convertToRaw(editorState.getCurrentContent()),\n      });\n    }\n    this.setState({ editorState });\n  }\n\n  toggleAddNewTile = () =>\n    this.setState(state => ({ addNewTileOpened: !state.addNewTileOpened }));\n\n  handleClickOutside = e => {\n    if (this.ref && doesNodeContainClick(this.ref, e)) return;\n    this.setState(() => ({\n      addNewTileOpened: false,\n      customTilesOpened: false,\n    }));\n  };\n\n  openCustomTileMenu = () => this.setState(() => ({ customTilesOpened: true }));\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (__SERVER__) {\n      return <div />;\n    }\n\n    const { InlineToolbar } = this.state.inlineToolbarPlugin;\n\n    return (\n      <div\n        onClick={() => this.props.onSelectTile(this.props.tile)}\n        className={`tile text${this.props.selected ? ' selected' : ''}`}\n        ref={node => (this.ref = node)}\n      >\n        <Editor\n          onChange={this.onChange}\n          editorState={this.state.editorState}\n          plugins={[this.state.inlineToolbarPlugin, ...settings.richTextEditorPlugins]}\n          blockRenderMap={settings.extendedBlockRenderMap}\n          blockStyleFn={settings.blockStyleFn}\n          placeholder={this.props.intl.formatMessage(messages.text)}\n          handleReturn={() => {\n            const selectionState = this.state.editorState.getSelection();\n            const anchorKey = selectionState.getAnchorKey();\n            const currentContent = this.state.editorState.getCurrentContent();\n            const currentContentBlock = currentContent.getBlockForKey(\n              anchorKey,\n            );\n            const blockType = currentContentBlock.getType();\n            if (!includes(settings.listBlockTypes, blockType)) {\n              this.props.onSelectTile(\n                this.props.onAddTile('text', this.props.index + 1),\n              );\n              return 'handled';\n            }\n            return 'un-handled';\n          }}\n          handleKeyCommand={(command, editorState) => {\n            if (\n              command === 'backspace' &&\n              editorState.getCurrentContent().getPlainText().length === 0\n            ) {\n              this.props.onDeleteTile(this.props.tile, true);\n            }\n          }}\n          ref={node => {\n            this.node = node;\n          }}\n        />\n        <InlineToolbar />\n\n        {(!this.props.data.text ||\n          (this.props.data.text &&\n            this.props.data.text.blocks &&\n            this.props.data.text.blocks.length === 1 &&\n            this.props.data.text.blocks[0].text === '')) && (\n          <Button\n            basic\n            icon\n            onClick={this.toggleAddNewTile}\n            className=\"tile-add-button\"\n          >\n            <Icon name={addSVG} className=\"tile-add-button\" size=\"24px\" />\n          </Button>\n        )}\n        {this.state.addNewTileOpened &&\n          !this.state.customTilesOpened && (\n            <div className=\"add-tile toolbar\">\n              <Button.Group>\n                <Button\n                  icon\n                  basic\n                  onClick={this.props.onChangeTile.bind(this, this.props.tile, {\n                    '@type': 'image',\n                  })}\n                >\n                  <Icon name={cameraSVG} size=\"24px\" />\n                </Button>\n              </Button.Group>\n              <Button.Group>\n                <Button\n                  icon\n                  basic\n                  onClick={this.props.onChangeTile.bind(this, this.props.tile, {\n                    '@type': 'video',\n                  })}\n                >\n                  <Icon name={videoSVG} size=\"24px\" />\n                </Button>\n              </Button.Group>\n              {tiles.customTiles.length !== 0 && (\n                <React.Fragment>\n                  <div className=\"separator\" />\n                  <Button.Group>\n                    <Button icon basic onClick={this.openCustomTileMenu}>\n                      <Icon name={TemplatedTilesSVG} size=\"24px\" />\n                    </Button>\n                  </Button.Group>\n                </React.Fragment>\n              )}\n            </div>\n          )}\n        {this.state.addNewTileOpened &&\n          this.state.customTilesOpened && (\n            <div className=\"add-tile toolbar\">\n              {tiles.customTiles.map(tile => (\n                <Button.Group>\n                  <Button\n                    icon\n                    basic\n                    onClick={this.props.onChangeTile.bind(\n                      this,\n                      this.props.tile,\n                      {\n                        '@type': tile.title,\n                      },\n                    )}\n                  >\n                    <Icon name={tile.icon} size=\"24px\" />\n                  </Button>\n                </Button.Group>\n              ))}\n            </div>\n          )}\n        {this.props.selected && (\n          <Button\n            icon\n            basic\n            onClick={() => this.props.onDeleteTile(this.props.tile)}\n            className=\"tile-delete-button\"\n          >\n            <Icon name={trashSVG} size=\"18px\" />\n          </Button>\n        )}\n      </div>\n    );\n  }\n}\n","/**\n * View text tile.\n * @module components/manage/Tiles/Text/View\n */\n\nimport PropTypes from 'prop-types';\nimport redraft from 'redraft';\n\nimport { settings } from '~/config';\n\n/**\n * View text tile class.\n * @class View\n * @extends Component\n */\nconst View = ({ data }) => redraft(data.text, settings.ToHTMLRenderers, settings.ToHTMLOptions);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default View;\n","/**\n * Edit tile.\n * @module components/manage/Tiles/Tile/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { DragSource, DropTarget } from 'react-dnd';\nimport { findDOMNode } from 'react-dom';\nimport { tiles } from '~/config';\nimport Icon from '../../../../components/theme/Icon/Icon';\n\nimport dragSVG from '../../../../icons/drag.svg';\n\nconst itemSource = {\n  beginDrag(props) {\n    return {\n      id: props.id,\n      index: props.index,\n    };\n  },\n};\n\nconst ItemTypes = {\n  ITEM: 'tile',\n};\n\nconst itemTarget = {\n  hover(props, monitor, component) {\n    const dragIndex = monitor.getItem().index;\n    const hoverIndex = props.index;\n\n    // Don't replace items with themselves\n    if (dragIndex === hoverIndex) {\n      return;\n    }\n\n    // Determine rectangle on screen\n    const hoverBoundingRect = findDOMNode(component).getBoundingClientRect();\n\n    // Get vertical middle\n    const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n\n    // Determine mouse position\n    const clientOffset = monitor.getClientOffset();\n\n    // Get pixels to the top\n    const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n\n    // Only perform the move when the mouse has crossed half of the items height\n    // When dragging downwards, only move when the cursor is below 50%\n    // When dragging upwards, only move when the cursor is above 50%\n\n    // Dragging downwards\n    if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n      return;\n    }\n\n    // Dragging upwards\n    if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n      return;\n    }\n\n    // Time to actually perform the action\n    props.onMoveTile(dragIndex, hoverIndex);\n\n    // Note: we're mutating the monitor item here!\n    // Generally it's better to avoid mutations,\n    // but it's good here for the sake of performance\n    // to avoid expensive index searches.\n    monitor.getItem().index = hoverIndex;\n  },\n};\n\n@DropTarget(ItemTypes.ITEM, itemTarget, connect => ({\n  connectDropTarget: connect.dropTarget(),\n}))\n@DragSource(ItemTypes.ITEM, itemSource, (connect, monitor) => ({\n  connectDragSource: connect.dragSource(),\n  connectDragPreview: connect.dragPreview(),\n}))\n/**\n * Edit tile class.\n * @class Edit\n * @extends Component\n */\nexport default class Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    type: PropTypes.string.isRequired,\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    selected: PropTypes.bool.isRequired,\n    connectDragSource: PropTypes.func.isRequired,\n    connectDragPreview: PropTypes.func.isRequired,\n    connectDropTarget: PropTypes.func.isRequired,\n    index: PropTypes.number.isRequired,\n    id: PropTypes.string.isRequired,\n    onMoveTile: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const {\n      type,\n      selected,\n      connectDragSource,\n      connectDropTarget,\n      connectDragPreview,\n    } = this.props;\n\n    let Tile = null;\n    Tile = tiles.getDefaultEditTileView(type);\n\n    const hideHandler =\n      this.props.data['@type'] === 'text' &&\n      (!this.props.data.text ||\n        (this.props.data.text &&\n          this.props.data.text.blocks &&\n          this.props.data.text.blocks.length === 1 &&\n          this.props.data.text.blocks[0].text === ''));\n\n    const imageAlign =\n      this.props.data['@type'] === 'image' &&\n      !!this.props.data.align &&\n      this.props.data.align;\n\n    return connectDropTarget(\n      connectDragPreview(\n        <div\n          className={`ui drag tile inner ${type}${\n            !!imageAlign ? ` ${imageAlign}` : ''\n          }`}\n        >\n          {selected &&\n            connectDragSource(\n              <div\n                className={\n                  hideHandler\n                    ? 'drag handle wrapper hidden'\n                    : 'drag handle wrapper'\n                }\n              >\n                <Icon className=\"drag handle\" name={dragSVG} size=\"18px\" />\n              </div>,\n            )}\n          {Tile !== null ? <Tile {...this.props} /> : <div />}\n        </div>,\n      ),\n    );\n  }\n}\n","/**\n * Edit title tile.\n * @module components/manage/Tiles/Title/Edit\n */\n\nimport React, { Component } from 'react';\nimport { Map } from 'immutable';\nimport PropTypes from 'prop-types';\nimport { stateFromHTML } from 'draft-js-import-html';\nimport { Editor, DefaultDraftBlockRenderMap, EditorState } from 'draft-js';\nimport { defineMessages, injectIntl, intlShape } from 'react-intl';\nimport { Button } from 'semantic-ui-react';\n\nimport { Icon } from '../../../../components';\nimport trashSVG from '../../../../icons/delete.svg';\n\nconst messages = defineMessages({\n  title: {\n    id: 'Type the title…',\n    defaultMessage: 'Type the title…',\n  },\n});\n\nconst blockRenderMap = Map({\n  unstyled: {\n    element: 'h1',\n  },\n});\n\nconst extendedBlockRenderMap = DefaultDraftBlockRenderMap.merge(blockRenderMap);\n\n@injectIntl\n/**\n * Edit title tile class.\n * @class Edit\n * @extends Component\n */\nexport default class Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    properties: PropTypes.objectOf(PropTypes.any).isRequired,\n    selected: PropTypes.bool.isRequired,\n    intl: intlShape.isRequired,\n    index: PropTypes.number.isRequired,\n    onChangeField: PropTypes.func.isRequired,\n    onSelectTile: PropTypes.func.isRequired,\n    onDeleteTile: PropTypes.func.isRequired,\n    onAddTile: PropTypes.func.isRequired,\n    tile: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n\n    if (!__SERVER__) {\n      let editorState;\n      if (props.properties && props.properties.title) {\n        const contentState = stateFromHTML(props.properties.title);\n        editorState = EditorState.createWithContent(contentState);\n      } else {\n        editorState = EditorState.createEmpty();\n      }\n      this.state = { editorState };\n    }\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (\n      nextProps.properties.title &&\n      this.props.properties.title !== nextProps.properties.title &&\n      !this.props.selected\n    ) {\n      const contentState = stateFromHTML(nextProps.properties.title);\n      this.setState({\n        editorState: nextProps.properties.title\n          ? EditorState.createWithContent(contentState)\n          : EditorState.createEmpty(),\n      });\n    }\n\n    if (!this.props.selected && nextProps.selected) {\n      this.node.focus();\n    }\n  }\n\n  /**\n   * Change handler\n   * @method onChange\n   * @param {object} editorState Editor state.\n   * @returns {undefined}\n   */\n  onChange(editorState) {\n    this.setState({ editorState }, () => {\n      this.props.onChangeField(\n        'title',\n        editorState.getCurrentContent().getPlainText(),\n      );\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (__SERVER__) {\n      return <div />;\n    }\n    return (\n      <div\n        onClick={() => this.props.onSelectTile(this.props.tile)}\n        className={`tile title${this.props.selected ? ' selected' : ''}`}\n      >\n        <Editor\n          onChange={this.onChange}\n          editorState={this.state.editorState}\n          blockRenderMap={extendedBlockRenderMap}\n          handleReturn={() => {\n            this.props.onSelectTile(\n              this.props.onAddTile('text', this.props.index + 1),\n            );\n            return 'handled';\n          }}\n          placeholder={this.props.intl.formatMessage(messages.title)}\n          blockStyleFn={() => 'documentFirstHeading'}\n          ref={node => {\n            this.node = node;\n          }}\n        />\n        {this.props.selected && (\n          <Button\n            icon\n            basic\n            onClick={() => this.props.onDeleteTile(this.props.tile)}\n            className=\"tile-delete-button\"\n          >\n            <Icon name={trashSVG} size=\"18px\" />\n          </Button>\n        )}\n      </div>\n    );\n  }\n}\n","/**\n * View title tile.\n * @module components/manage/Tiles/Title/View\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * View title tile class.\n * @class View\n * @extends Component\n */\nconst View = ({ properties }) => (\n  <h1 className=\"documentFirstHeading\">{properties.title}</h1>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  properties: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default View;\n","/**\n * Edit video tile.\n * @module components/manage/Tiles/Title/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl, intlShape } from 'react-intl';\nimport { Button, Form, Input, Embed, Message } from 'semantic-ui-react';\n\nimport { Icon } from '../../../../components';\nimport trashSVG from '../../../../icons/delete.svg';\nimport clearSVG from '../../../../icons/clear.svg';\nimport imageLeftSVG from '../../../../icons/image-left.svg';\nimport imageRightSVG from '../../../../icons/image-right.svg';\nimport imageFitSVG from '../../../../icons/image-fit.svg';\nimport imageFullSVG from '../../../../icons/image-full.svg';\nimport videoSVG from '../../../../icons/videocamera.svg';\nimport folderSVG from '../../../../icons/folder.svg';\n\nconst messages = defineMessages({\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  VideoFormDescription: {\n    id: 'Specify a youtube video or playlist url',\n    defaultMessage: 'Specify a youtube video or playlist url',\n  },\n  VideoTileInputPlaceholder: {\n    id: 'Enter Video URL',\n    defaultMessage: 'Enter Video URL',\n  },\n});\n\n@injectIntl\n/**\n * Edit video tile class.\n * @class Edit\n * @extends Component\n */\nexport default class Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    selected: PropTypes.bool.isRequired,\n    tile: PropTypes.string.isRequired,\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    onChangeTile: PropTypes.func.isRequired,\n    onSelectTile: PropTypes.func.isRequired,\n    onDeleteTile: PropTypes.func.isRequired,\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n\n    this.onChangeUrl = this.onChangeUrl.bind(this);\n    this.onSubmitUrl = this.onSubmitUrl.bind(this);\n    this.state = {\n      url: '',\n    };\n  }\n\n  /**\n   * Change url handler\n   * @method onChangeUrl\n   * @param {Object} target Target object\n   * @returns {undefined}\n   */\n  onChangeUrl({ target }) {\n    this.setState({\n      url: target.value,\n    });\n  }\n\n  /**\n   * Submit url handler\n   * @method onSubmitUrl\n   * @returns {undefined}\n   */\n  onSubmitUrl() {\n    this.props.onChangeTile(this.props.tile, {\n      ...this.props.data,\n      url: this.state.url,\n    });\n  }\n\n  /**\n   * Align tile handler\n   * @method onAlignTile\n   * @param {string} align Alignment option\n   * @returns {undefined}\n   */\n  onAlignTile(align) {\n    this.props.onChangeTile(this.props.tile, {\n      ...this.props.data,\n      align,\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { data } = this.props;\n    return (\n      <div\n        onClick={() => this.props.onSelectTile(this.props.tile)}\n        className={[\n          'tile',\n          'video',\n          'align',\n          this.props.selected && 'selected',\n          data.align,\n        ]\n          .filter(e => !!e)\n          .join(' ')}\n      >\n        {this.props.selected &&\n          !!this.props.data.url && (\n            <div className=\"toolbar\">\n              <Button.Group>\n                <Button\n                  icon\n                  basic\n                  onClick={this.onAlignTile.bind(this, 'left')}\n                  active={data.align === 'left'}\n                >\n                  <Icon name={imageLeftSVG} size=\"24px\" />\n                </Button>\n              </Button.Group>\n              <Button.Group>\n                <Button\n                  icon\n                  basic\n                  onClick={this.onAlignTile.bind(this, 'right')}\n                  active={data.align === 'right'}\n                >\n                  <Icon name={imageRightSVG} size=\"24px\" />\n                </Button>\n              </Button.Group>\n              <Button.Group>\n                <Button\n                  icon\n                  basic\n                  onClick={this.onAlignTile.bind(this, 'center')}\n                  active={data.align === 'center' || !data.align}\n                >\n                  <Icon name={imageFitSVG} size=\"24px\" />\n                </Button>\n              </Button.Group>\n              <Button.Group>\n                <Button\n                  icon\n                  basic\n                  onClick={this.onAlignTile.bind(this, 'full')}\n                  active={data.align === 'full'}\n                >\n                  <Icon name={imageFullSVG} size=\"24px\" />\n                </Button>\n              </Button.Group>\n            </div>\n          )}\n        {this.props.selected &&\n          !this.props.data.url && (\n            <div className=\"toolbar\">\n              <Icon name={videoSVG} size=\"24px\" />\n              <form onSubmit={e => this.onSubmitUrl(e)}>\n                <Input\n                  onChange={this.onChangeUrl}\n                  placeholder={this.props.intl.formatMessage(\n                    messages.VideoTileInputPlaceholder,\n                  )}\n                />\n              </form>\n              {/* <Button.Group>\n                <label className=\"ui button basic icon\">\n                  <Icon name={folderSVG} size=\"24px\" />\n                  <input\n                    type=\"file\"\n                    onChange={this.onUploadImage}\n                    style={{ display: 'none' }}\n                  />\n                </label>\n              </Button.Group> */}\n            </div>\n          )}\n        {data.url ? (\n          <p>\n            <div className=\"ui blocker\" />\n            {data.url.match('list') ? (\n              <Embed\n                url={`https://www.youtube.com/embed/videoseries?list=${\n                  data.url.match(/^.*\\?list=(.*)$/)[1]\n                }`}\n                icon=\"arrow right\"\n                defaultActive\n                autoplay={false}\n              />\n            ) : (\n              <Embed\n                id={\n                  data.url.match(/.be\\//)\n                    ? data.url.match(/^.*\\.be\\/(.*)/)[1]\n                    : data.url.match(/^.*\\?v=(.*)$/)[1]\n                }\n                source=\"youtube\"\n                icon=\"arrow right\"\n                defaultActive\n                autoplay={false}\n              />\n            )}\n          </p>\n        ) : (\n          <div>\n            <Message>\n              <center>\n                <Icon name={videoSVG} size=\"100px\" color=\"#b8c6c8\" />\n              </center>\n            </Message>\n          </div>\n        )}\n        {this.props.selected && (\n          <Button\n            icon\n            basic\n            onClick={() => this.props.onDeleteTile(this.props.tile)}\n            className=\"tile-delete-button\"\n          >\n            <Icon name={trashSVG} size=\"18px\" />\n          </Button>\n        )}\n      </div>\n    );\n  }\n}\n","/**\n * View video tile.\n * @module components/manage/Tiles/Video/View\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Embed } from 'semantic-ui-react';\n\n/**\n * View video tile class.\n * @class View\n * @extends Component\n */\nconst View = ({ data }) => (\n  <p\n    className={['tile', 'image', 'align', data.align]\n      .filter(e => !!e)\n      .join(' ')}\n  >\n    {data.url.match('list') ? (\n      <Embed\n        url={`https://www.youtube.com/embed/videoseries?list=${\n          data.url.match(/^.*\\?list=(.*)$/)[1]\n        }`}\n        icon=\"arrow right\"\n        defaultActive\n        autoplay={false}\n      />\n    ) : (\n      <Embed\n        id={\n          data.url.match(/.be\\//)\n            ? data.url.match(/^.*\\.be\\/(.*)/)[1]\n            : data.url.match(/^.*\\?v=(.*)$/)[1]\n        }\n        source=\"youtube\"\n        icon=\"arrow right\"\n        defaultActive\n        autoplay={false}\n      />\n    )}\n  </p>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default View;\n","/**\n * Toolbar component.\n * @module components/manage/Toolbar/Toolbar\n */\n\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button, Divider, Menu } from 'semantic-ui-react';\nimport jwtDecode from 'jwt-decode';\nimport cookie from 'react-cookie';\nimport { injectIntl } from 'react-intl';\nimport { BodyClass } from '../../../helpers';\nimport LogoImage from './pastanaga.svg';\n\n@injectIntl\n@connect(state => ({\n  token: state.userSession.token,\n  fullname: state.userSession.token\n    ? jwtDecode(state.userSession.token).fullname\n    : '',\n  content: state.content.data,\n}))\n/**\n * Toolbar container class.\n * @class Toolbar\n * @extends Component\n */\nexport default class Toolbar extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    token: PropTypes.string,\n    content: PropTypes.shape({\n      '@type': PropTypes.string,\n      is_folderish: PropTypes.bool,\n      review_state: PropTypes.string,\n    }),\n    inner: PropTypes.element.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    token: null,\n    content: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Toolbar\n   */\n  constructor(props) {\n    super(props);\n    this.onToggleExpanded = this.onToggleExpanded.bind(this);\n    this.state = {\n      expanded: cookie.load('toolbar_expanded') !== 'false',\n    };\n  }\n\n  /**\n   * On toggle expanded handler\n   * @method onToggleExpanded\n   * @returns {undefined}\n   */\n  onToggleExpanded() {\n    cookie.save('toolbar_expanded', !this.state.expanded, {\n      expires: new Date((2 ** 31 - 1) * 1000),\n      path: '/',\n    });\n    this.setState({\n      expanded: !this.state.expanded,\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { expanded } = this.state;\n\n    return (\n      this.props.token && (\n        <Fragment>\n          <BodyClass className=\"has-toolbar\" />\n          <Menu\n            vertical\n            borderless\n            icon\n            fixed=\"left\"\n            className={!expanded ? 'collapsed' : ''}\n          >\n            {this.props.inner}\n            <Menu.Item className=\"logo\">\n              <Divider />\n              <div\n                className=\"image\"\n                style={{ backgroundImage: `url(${LogoImage})` }}\n              />\n            </Menu.Item>\n            <Button\n              className={\n                this.props.content && this.props.content.review_state\n                  ? `${this.props.content.review_state} trigger`\n                  : 'trigger'\n              }\n              onClick={this.onToggleExpanded}\n            />\n          </Menu>\n          <div className={this.state.expanded ? 'pusher expanded' : 'pusher'} />\n        </Fragment>\n      )\n    );\n  }\n}\n","module.exports = __webpack_public_path__ + \"static/media/pastanaga.08f24832.svg\";","/**\n * Types component.\n * @module components/manage/Types/Types\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport { filter, map } from 'lodash';\nimport { Dropdown, Icon } from 'semantic-ui-react';\n\nimport { getTypes } from '../../../actions';\nimport { getBaseUrl } from '../../../helpers';\n\n@connect(\n  state => ({\n    types: filter(state.types.types, 'addable'),\n    type: state.content.data['@type'],\n  }),\n  dispatch => bindActionCreators({ getTypes }, dispatch),\n)\n/**\n * Types container class.\n * @class Types\n * @extends Component\n */\nexport default class Types extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    pathname: PropTypes.string.isRequired,\n    getTypes: PropTypes.func.isRequired,\n    types: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        addable: PropTypes.bool,\n        title: PropTypes.string,\n      }),\n    ).isRequired,\n    type: PropTypes.string,\n    active: PropTypes.bool,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    active: false,\n    type: '',\n  };\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  componentWillMount() {\n    this.props.getTypes(getBaseUrl(this.props.pathname));\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.pathname !== this.props.pathname) {\n      this.props.getTypes(getBaseUrl(nextProps.pathname));\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return this.props.types.length > 0 ? (\n      <Dropdown\n        id=\"toolbar-add\"\n        item\n        trigger={<Icon size=\"big\" name=\"add\" />}\n        className={this.props.active ? 'active' : ''}\n      >\n        <Dropdown.Menu>\n          {map(filter(this.props.types), item => (\n            <Link\n              to={`${this.props.pathname}/add?type=${\n                item['@id'].split('@types/')[1]\n              }`.replace(/\\/\\//g, '/')}\n              id={`toolbar-add-${item['@id']\n                .split('@types/')[1]\n                .toLowerCase()\n                .replace(' ', '-')}`}\n              className=\"item\"\n              key={item.title}\n            >\n              {item.title}\n            </Link>\n          ))}\n        </Dropdown.Menu>\n      </Dropdown>\n    ) : (\n      <span />\n    );\n  }\n}\n","/**\n * ArrayWidget component.\n * @module components/manage/Widgets/ArrayWidget\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Grid, Label, Dropdown } from 'semantic-ui-react';\nimport { concat, map, uniqBy } from 'lodash';\nimport { defineMessages, injectIntl, intlShape } from 'react-intl';\n\nconst messages = defineMessages({\n  no_results_found: {\n    id: 'No results found.',\n    defaultMessage: 'No results found.',\n  },\n});\n\n@injectIntl\n/**\n * ArrayWidget component class.\n * @class ArrayWidget\n * @extends Component\n */\nexport default class ArrayWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    required: PropTypes.bool,\n    error: PropTypes.arrayOf(PropTypes.string),\n    items: PropTypes.shape({\n      choices: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\n    }),\n    value: PropTypes.arrayOf(PropTypes.string),\n    onChange: PropTypes.func.isRequired,\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    description: null,\n    required: false,\n    items: {\n      choices: [],\n    },\n    error: [],\n    value: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Actions\n   */\n  constructor(props) {\n    super(props);\n    this.onAddItem = this.onAddItem.bind(this);\n    this.state = {\n      choices: uniqBy(\n        concat(\n          props.items.choices\n            ? map(props.items.choices, choice => ({\n                key: choice[0],\n                text: choice[1],\n                value: choice[0],\n              }))\n            : [],\n          props.value\n            ? map(props.value, value => ({\n                key: value,\n                text: value,\n                value,\n              }))\n            : [],\n        ),\n        'key',\n      ),\n    };\n  }\n\n  /**\n   * On add item handler\n   * @method onAddItem\n   * @param {Object} event Event object.\n   * @param {string} value Value to add.\n   * @returns {undefined}\n   */\n  onAddItem(event, { value }) {\n    this.setState({\n      choices: [{ text: value, value, id: value }, ...this.state.choices],\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const {\n      id,\n      title,\n      required,\n      description,\n      error,\n      value,\n      onChange,\n    } = this.props;\n    return (\n      <Form.Field\n        inline\n        required={required}\n        error={error.length > 0}\n        className={description ? 'help' : ''}\n      >\n        <Grid>\n          <Grid.Row stretched>\n            <Grid.Column width=\"4\">\n              <div className=\"wrapper\">\n                <label htmlFor={`field-${id}`}>{title}</label>\n              </div>\n            </Grid.Column>\n            <Grid.Column width=\"8\">\n              <Dropdown\n                options={this.state.choices}\n                placeholder={title}\n                search\n                selection\n                multiple\n                fluid\n                noResultsMessage={this.props.intl.formatMessage(\n                  messages.no_results_found,\n                )}\n                allowAdditions\n                value={value || []}\n                onAddItem={this.onAddItem}\n                onChange={(event, data) => onChange(id, data.value)}\n              />\n              {map(error, message => (\n                <Label key={message} basic color=\"red\" pointing>\n                  {message}\n                </Label>\n              ))}\n            </Grid.Column>\n          </Grid.Row>\n          {description && (\n            <Grid.Row stretched>\n              <Grid.Column stretched width=\"12\">\n                <p className=\"help\">{description}</p>\n              </Grid.Column>\n            </Grid.Row>\n          )}\n        </Grid>\n      </Form.Field>\n    );\n  }\n}\n","/**\n * CheckboxWidget component.\n * @module components/manage/Widgets/CheckboxWidget\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Grid, Icon, Label, Checkbox } from 'semantic-ui-react';\nimport { map } from 'lodash';\nimport { defineMessages, injectIntl, intlShape } from 'react-intl';\n\nconst messages = defineMessages({\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  idTitle: {\n    id: 'Short Name',\n    defaultMessage: 'Short Name',\n  },\n  idDescription: {\n    id: 'Used for programmatic access to the fieldset.',\n    defaultMessage: 'Used for programmatic access to the fieldset.',\n  },\n  title: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  description: {\n    id: 'Description',\n    defaultMessage: 'Description',\n  },\n  required: {\n    id: 'Required',\n    defaultMessage: 'Required',\n  },\n});\n\n/**\n * CheckboxWidget component class.\n * @function CheckboxWidget\n * @returns {string} Markup of the component.\n */\nconst CheckboxWidget = ({\n  id,\n  title,\n  required,\n  description,\n  error,\n  value,\n  onChange,\n  onEdit,\n  onDelete,\n  intl,\n}) => {\n  const schema = {\n    fieldsets: [\n      {\n        id: 'default',\n        title: intl.formatMessage(messages.default),\n        fields: ['title', 'id', 'description', 'required'],\n      },\n    ],\n    properties: {\n      id: {\n        type: 'string',\n        title: intl.formatMessage(messages.idTitle),\n        description: intl.formatMessage(messages.idDescription),\n      },\n      title: {\n        type: 'string',\n        title: intl.formatMessage(messages.title),\n      },\n      description: {\n        type: 'string',\n        widget: 'textarea',\n        title: intl.formatMessage(messages.description),\n      },\n      required: {\n        type: 'boolean',\n        title: intl.formatMessage(messages.required),\n      },\n    },\n    required: ['id', 'title'],\n  };\n\n  return (\n    <Form.Field\n      inline\n      required={required}\n      error={error.length > 0}\n      className={description ? 'help' : ''}\n    >\n      <Grid>\n        <Grid.Row stretched>\n          <Grid.Column width=\"12\">\n            <div className=\"wrapper\">\n              {onEdit && (\n                <div className=\"toolbar\">\n                  <a className=\"item\" onClick={() => onEdit(id, schema)}>\n                    <Icon name=\"write square\" size=\"large\" color=\"blue\" />\n                  </a>\n                  <a className=\"item\" onClick={() => onDelete(id)}>\n                    <Icon name=\"close\" size=\"large\" color=\"red\" />\n                  </a>\n                </div>\n              )}\n              {onEdit && (\n                <i aria-hidden=\"true\" className=\"grey bars icon drag handle\" />\n              )}\n              <Checkbox\n                id={`field-${id}`}\n                name={id}\n                checked={value}\n                disabled={onEdit !== null}\n                onChange={(event, { checked }) => onChange(id, checked)}\n              />\n              <Label\n                basic\n                horizontal\n                as=\"label\"\n                htmlFor={`field-${id}`}\n                content={title}\n              />\n            </div>\n            {map(error, message => (\n              <Label key={message} basic color=\"red\" pointing>\n                {message}\n              </Label>\n            ))}\n          </Grid.Column>\n        </Grid.Row>\n        {description && (\n          <Grid.Row stretched>\n            <Grid.Column stretched width=\"12\">\n              <p className=\"help\">{description}</p>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n      </Grid>\n    </Form.Field>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nCheckboxWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  value: PropTypes.bool,\n  onChange: PropTypes.func,\n  onEdit: PropTypes.func,\n  onDelete: PropTypes.func,\n  intl: intlShape.isRequired,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nCheckboxWidget.defaultProps = {\n  description: null,\n  required: false,\n  error: [],\n  value: null,\n  onChange: null,\n  onEdit: null,\n  onDelete: null,\n};\n\nexport default injectIntl(CheckboxWidget);\n","/**\n * DatetimeWidget component.\n * @module components/manage/Widgets/DatetimeWidget\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Grid, Input, Label } from 'semantic-ui-react';\nimport { map } from 'lodash';\n\n/**\n * DatetimeWidget component class.\n * @function DatetimeWidget\n * @returns {string} Markup of the component.\n */\nconst DatetimeWidget = ({\n  id,\n  title,\n  required,\n  description,\n  error,\n  value,\n  onChange,\n}) => (\n  <Form.Field\n    inline\n    required={required}\n    error={error.length > 0}\n    className={description ? 'help' : ''}\n  >\n    <Grid>\n      <Grid.Row stretched>\n        <Grid.Column width=\"4\">\n          <div className=\"wrapper\">\n            <label htmlFor={`field-${id}`}>{title}</label>\n          </div>\n        </Grid.Column>\n        <Grid.Column width=\"8\">\n          <Input\n            id={`field-${id}`}\n            name={id}\n            type=\"datetime-local\"\n            value={value || ''}\n            onChange={({ target }) =>\n              onChange(id, target.value === '' ? undefined : target.value)\n            }\n          />\n          {map(error, message => (\n            <Label key={message} basic color=\"red\" pointing>\n              {message}\n            </Label>\n          ))}\n        </Grid.Column>\n      </Grid.Row>\n      {description && (\n        <Grid.Row stretched>\n          <Grid.Column stretched width=\"12\">\n            <p className=\"help\">{description}</p>\n          </Grid.Column>\n        </Grid.Row>\n      )}\n    </Grid>\n  </Form.Field>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nDatetimeWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nDatetimeWidget.defaultProps = {\n  description: null,\n  required: false,\n  error: [],\n  value: null,\n};\n\nexport default DatetimeWidget;\n","/**\n * FileWidget component.\n * @module components/manage/Widgets/FileWidget\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Grid, Input, Label } from 'semantic-ui-react';\nimport { map } from 'lodash';\nimport { readAsDataURL } from 'promise-file-reader';\n\n/**\n * FileWidget component class.\n * @function FileWidget\n * @returns {string} Markup of the component.\n */\nconst FileWidget = ({\n  id,\n  title,\n  required,\n  description,\n  error,\n  value,\n  onChange,\n}) => (\n  <Form.Field\n    inline\n    required={required}\n    error={error.length > 0}\n    className={description ? 'help' : ''}\n  >\n    <Grid>\n      <Grid.Row stretched>\n        <Grid.Column width=\"4\">\n          <div className=\"wrapper\">\n            <label htmlFor={`field-${id}`}>{title}</label>\n          </div>\n        </Grid.Column>\n        <Grid.Column width=\"8\">\n          <Input\n            id={`field-${id}`}\n            name={id}\n            type=\"file\"\n            onChange={({ target }) => {\n              const file = target.files[0];\n              readAsDataURL(file).then(data => {\n                const fields = data.match(/^data:(.*);(.*),(.*)$/);\n                onChange(id, {\n                  data: fields[3],\n                  encoding: fields[2],\n                  'content-type': fields[1],\n                  filename: file.name,\n                });\n              });\n            }}\n          />\n          {value && value.filename}\n          {map(error, message => (\n            <Label key={message} basic color=\"red\" pointing>\n              {message}\n            </Label>\n          ))}\n        </Grid.Column>\n      </Grid.Row>\n      {description && (\n        <Grid.Row stretched>\n          <Grid.Column stretched width=\"12\">\n            <p className=\"help\">{description}</p>\n          </Grid.Column>\n        </Grid.Row>\n      )}\n    </Grid>\n  </Form.Field>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nFileWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  value: PropTypes.shape({\n    '@type': PropTypes.string,\n    title: PropTypes.string,\n  }),\n  onChange: PropTypes.func.isRequired,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nFileWidget.defaultProps = {\n  description: null,\n  required: false,\n  error: [],\n  value: null,\n};\n\nexport default FileWidget;\n","/**\n * PasswordWidget component.\n * @module components/manage/Widgets/PassswordWidget\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Grid, Input, Label } from 'semantic-ui-react';\nimport { map } from 'lodash';\n\n/**\n * PasswordWidget component class.\n * @function PasswordWidget\n * @returns {string} Markup of the component.\n */\nconst PasswordWidget = ({\n  id,\n  title,\n  required,\n  description,\n  error,\n  value,\n  onChange,\n}) => (\n  <Form.Field\n    inline\n    required={required}\n    error={error.length > 0}\n    className={description ? 'help' : ''}\n  >\n    <Grid>\n      <Grid.Row stretched>\n        <Grid.Column width=\"4\">\n          <div className=\"wrapper\">\n            <label htmlFor={`field-${id}`}>{title}</label>\n          </div>\n        </Grid.Column>\n        <Grid.Column width=\"8\">\n          <Input\n            id={`field-${id}`}\n            name={id}\n            type=\"password\"\n            value={value || ''}\n            onChange={({ target }) =>\n              onChange(id, target.value === '' ? undefined : target.value)\n            }\n          />\n          {map(error, message => (\n            <Label key={message} basic color=\"red\" pointing>\n              {message}\n            </Label>\n          ))}\n        </Grid.Column>\n      </Grid.Row>\n      {description && (\n        <Grid.Row stretched>\n          <Grid.Column stretched width=\"12\">\n            <p className=\"help\">{description}</p>\n          </Grid.Column>\n        </Grid.Row>\n      )}\n    </Grid>\n  </Form.Field>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nPasswordWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nPasswordWidget.defaultProps = {\n  description: null,\n  required: false,\n  error: [],\n  value: null,\n};\n\nexport default PasswordWidget;\n","/**\n * SchemaWidget component.\n * @module components/manage/Widgets/SchemaWidget\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { concat, findIndex, map, omit, slice, without } from 'lodash';\nimport move from 'lodash-move';\nimport { Confirm, Form, Grid, Icon, Message, Segment } from 'semantic-ui-react';\nimport { defineMessages, injectIntl, intlShape } from 'react-intl';\nimport { DragDropContext } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\n\nimport { Field, ModalForm, SchemaWidgetFieldset } from '../../../components';\n\nconst messages = defineMessages({\n  addField: {\n    id: 'Add field',\n    defaultMessage: 'Add field',\n  },\n  addFieldset: {\n    id: 'Add fieldset',\n    defaultMessage: 'Add fieldset',\n  },\n  editField: {\n    id: 'Edit field',\n    defaultMessage: 'Edit field',\n  },\n  editFieldset: {\n    id: 'Edit fieldset',\n    defaultMessage: 'Edit fieldset',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  idTitle: {\n    id: 'Short Name',\n    defaultMessage: 'Short Name',\n  },\n  idDescription: {\n    id: 'Used for programmatic access to the fieldset.',\n    defaultMessage: 'Used for programmatic access to the fieldset.',\n  },\n  string: {\n    id: 'String',\n    defaultMessage: 'String',\n  },\n  text: {\n    id: 'Text',\n    defaultMessage: 'Text',\n  },\n  richtext: {\n    id: 'Richtext',\n    defaultMessage: 'Richtext',\n  },\n  checkbox: {\n    id: 'Checkbox',\n    defaultMessage: 'Checkbox',\n  },\n  selection: {\n    id: 'Selection',\n    defaultMessage: 'Selection',\n  },\n  type: {\n    id: 'Type',\n    defaultMessage: 'Type',\n  },\n  title: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  description: {\n    id: 'Description',\n    defaultMessage: 'Description',\n  },\n  required: {\n    id: 'Required',\n    defaultMessage: 'Required',\n  },\n  deleteFieldset: {\n    id: 'Are you sure you want to delete this fieldset including all fields?',\n    defaultMessage:\n      'Are you sure you want to delete this fieldset including all fields?',\n  },\n  deleteField: {\n    id: 'Are you sure you want to delete this field?',\n    defaultMessage: 'Are you sure you want to delete this field?',\n  },\n  error: {\n    id: 'Error',\n    defaultMessage: 'Error',\n  },\n});\n\n@DragDropContext(HTML5Backend)\n@injectIntl\n@connect((state, props) => ({\n  value: JSON.parse(props.value),\n}))\n/**\n * SchemaWidget component class.\n * @class SchemaWidget\n * @extends Component\n */\nexport default class SchemaWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    /**\n     * Id of the field\n     */\n    id: PropTypes.string.isRequired,\n    /**\n     * Title of the field\n     */\n    required: PropTypes.bool,\n    /**\n     * Value of the field\n     */\n    value: PropTypes.object,\n    /**\n     * List of error messages\n     */\n    error: PropTypes.arrayOf(PropTypes.string),\n    /**\n     * On change handler\n     */\n    onChange: PropTypes.func.isRequired,\n    /**\n     * Intl object\n     */\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    required: false,\n    value: {},\n    error: [],\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n    this.onAddField = this.onAddField.bind(this);\n    this.onAddFieldset = this.onAddFieldset.bind(this);\n    this.onEditField = this.onEditField.bind(this);\n    this.onEditFieldset = this.onEditFieldset.bind(this);\n    this.onDeleteFieldset = this.onDeleteFieldset.bind(this);\n    this.onDeleteField = this.onDeleteField.bind(this);\n    this.onShowAddField = this.onShowAddField.bind(this);\n    this.onShowAddFieldset = this.onShowAddFieldset.bind(this);\n    this.onShowEditFieldset = this.onShowEditFieldset.bind(this);\n    this.onShowEditField = this.onShowEditField.bind(this);\n    this.onShowDeleteFieldset = this.onShowDeleteFieldset.bind(this);\n    this.onShowDeleteField = this.onShowDeleteField.bind(this);\n    this.onSetCurrentFieldset = this.onSetCurrentFieldset.bind(this);\n    this.onOrderField = this.onOrderField.bind(this);\n    this.onOrderFieldset = this.onOrderFieldset.bind(this);\n    this.onCancel = this.onCancel.bind(this);\n    this.state = {\n      addField: null,\n      addFieldset: null,\n      editFieldset: null,\n      editField: null,\n      deleteFieldset: null,\n      deleteField: null,\n      currentFieldset: 0,\n    };\n  }\n\n  /**\n   * Add field handler\n   * @method onAddField\n   * @param {Object} values Form values\n   * @returns {undefined}\n   */\n  onAddField(values) {\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...slice(this.props.value.fieldsets, 0, this.state.currentFieldset),\n        {\n          ...this.props.value.fieldsets[this.state.currentFieldset],\n          fields: [\n            ...this.props.value.fieldsets[this.state.currentFieldset].fields,\n            values.id,\n          ],\n        },\n        ...slice(this.props.value.fieldsets, this.state.currentFieldset + 1),\n      ],\n      properties: {\n        ...this.props.value.properties,\n        [values.id]: {\n          title: values.title,\n          description: values.description,\n          ...(type => {\n            switch (type) {\n              case 'textarea':\n                return {\n                  type: 'string',\n                  widget: 'textarea',\n                };\n              case 'wysiwyg':\n                return {\n                  type: 'string',\n                  widget: 'richtext',\n                };\n              case 'checkbox':\n                return {\n                  type: 'boolean',\n                };\n              case 'selection':\n                return {\n                  type: 'string',\n                  choices: [],\n                };\n              default:\n                return {\n                  type: 'string',\n                };\n            }\n          })(values.type),\n        },\n      },\n      required: values.required\n        ? [...this.props.value.required, values.id]\n        : this.props.value.required,\n    });\n    this.onCancel();\n  }\n\n  /**\n   * Add fieldset handler\n   * @method onAddFieldset\n   * @param {Object} values Form values\n   * @returns {undefined}\n   */\n  onAddFieldset(values) {\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...this.props.value.fieldsets,\n        {\n          ...values,\n          fields: [],\n        },\n      ],\n    });\n    this.onCancel();\n  }\n\n  /**\n   * Edit fieldset handler\n   * @method onEditFieldset\n   * @param {Object} values Form values\n   * @returns {undefined}\n   */\n  onEditFieldset(values) {\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...slice(this.props.value.fieldsets, 0, this.state.editFieldset),\n        values,\n        ...slice(this.props.value.fieldsets, this.state.editFieldset + 1),\n      ],\n    });\n    this.onCancel();\n  }\n\n  /**\n   * Edit field handler\n   * @method onEditField\n   * @param {Object} values Field values\n   * @returns {undefined}\n   */\n  onEditField(values) {\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...slice(this.props.value.fieldsets, 0, this.state.currentFieldset),\n        {\n          ...this.props.value.fieldsets[this.state.currentFieldset],\n          fields: map(\n            this.props.value.fieldsets[this.state.currentFieldset].fields,\n            field => (field === this.state.editField.id ? values.id : field),\n          ),\n        },\n        ...slice(this.props.value.fieldsets, this.state.currentFieldset + 1),\n      ],\n      properties: {\n        ...omit(this.props.value.properties, [this.state.editField.id]),\n        [values.id]: {\n          ...this.props.value.properties[this.state.editField.id],\n          ...omit(values, ['id', 'required']),\n        },\n      },\n      required: values.required\n        ? concat(without(this.props.value.required, this.state.editField.id), [\n            values.id,\n          ])\n        : without(this.props.value.required, this.state.editField.id),\n    });\n    this.onCancel();\n  }\n\n  /**\n   * Delete fieldset handler\n   * @method onDeleteFieldset\n   * @returns {undefined}\n   */\n  onDeleteFieldset() {\n    if (this.state.currentFieldset > this.props.value.fieldsets.length - 2) {\n      this.setState({\n        currentFieldset: this.state.currentFieldset - 1,\n      });\n    }\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...slice(this.props.value.fieldsets, 0, this.state.deleteFieldset),\n        ...slice(this.props.value.fieldsets, this.state.deleteFieldset + 1),\n      ],\n      properties: omit(\n        this.props.value.properties,\n        this.props.value.fieldsets[this.state.deleteFieldset].fields,\n      ),\n    });\n    this.onCancel();\n  }\n\n  /**\n   * Delete field handler\n   * @method onDeleteField\n   * @returns {undefined}\n   */\n  onDeleteField() {\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...slice(this.props.value.fieldsets, 0, this.state.currentFieldset),\n        {\n          ...this.props.value.fieldsets[this.state.currentFieldset],\n          fields: without(\n            this.props.value.fieldsets[this.state.currentFieldset].fields,\n            this.state.deleteField,\n          ),\n        },\n        ...slice(this.props.value.fieldsets, this.state.currentFieldset + 1),\n      ],\n      properties: omit(this.props.value.properties, [this.state.deleteField]),\n    });\n    this.onCancel();\n  }\n\n  /**\n   * Change handler\n   * @method onChange\n   * @param {Object} value New schema\n   * @returns {undefined}\n   */\n  onChange(value) {\n    this.props.onChange(this.props.id, JSON.stringify(value));\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.setState({\n      addField: null,\n      addFieldset: null,\n      editFieldset: null,\n      editField: null,\n      deleteFieldset: null,\n      deleteField: null,\n    });\n  }\n\n  /**\n   * Show add field handler\n   * @method onShowAddField\n   * @returns {undefined}\n   */\n  onShowAddField() {\n    this.setState({\n      addField: true,\n    });\n  }\n\n  /**\n   * Show add fieldset handler\n   * @method onShowAddFieldset\n   * @returns {undefined}\n   */\n  onShowAddFieldset() {\n    this.setState({\n      addFieldset: true,\n    });\n  }\n\n  /**\n   * Show edit fieldset handler\n   * @method onShowEditFieldset\n   * @param {Number} index Index of fieldset\n   * @returns {undefined}\n   */\n  onShowEditFieldset(index) {\n    this.setState({\n      editFieldset: index,\n    });\n  }\n\n  /**\n   * Show edit field handler\n   * @method onShowEditField\n   * @param {string} id Id of field\n   * @param {Object} schema Schema of the field\n   * @returns {undefined}\n   */\n  onShowEditField(id, schema) {\n    this.setState({\n      editField: {\n        id,\n        schema,\n      },\n    });\n  }\n\n  /**\n   * Show delete fieldset handler\n   * @method onShowDeleteFieldset\n   * @param {Number} index Index of fieldset\n   * @param {Object} event Event object\n   * @returns {undefined}\n   */\n  onShowDeleteFieldset(index) {\n    this.setState({\n      deleteFieldset: index,\n    });\n  }\n\n  /**\n   * Show delete field handler\n   * @method onShowDeleteField\n   * @param {String} field Field to delete\n   * @param {Object} event Event object\n   * @returns {undefined}\n   */\n  onShowDeleteField(field) {\n    this.setState({\n      deleteField: field,\n    });\n  }\n\n  /**\n   * Set current fieldset handler\n   * @method onSetCurrentFieldset\n   * @param {Number} index Index of fieldset\n   * @returns {undefined}\n   */\n  onSetCurrentFieldset(index) {\n    this.setState({\n      currentFieldset: index,\n    });\n  }\n\n  /**\n   * On order fieldset\n   * @method onOrderField\n   * @param {number} index Index\n   * @param {number} delta Delta\n   * @returns {undefined}\n   */\n  onOrderField(index, delta) {\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...slice(this.props.value.fieldsets, 0, this.state.currentFieldset),\n        {\n          ...this.props.value.fieldsets[this.state.currentFieldset],\n          fields: move(\n            this.props.value.fieldsets[this.state.currentFieldset].fields,\n            index,\n            index + delta,\n          ),\n        },\n        ...slice(this.props.value.fieldsets, this.state.currentFieldset + 1),\n      ],\n    });\n  }\n\n  /**\n   * On order fieldset\n   * @method onOrderFieldset\n   * @param {number} index Index\n   * @param {number} delta Delta\n   * @returns {undefined}\n   */\n  onOrderFieldset(index, delta) {\n    const value = {\n      ...this.props.value,\n      fieldsets: move(this.props.value.fieldsets, index, index + delta),\n    };\n    this.setState({\n      currentFieldset: findIndex(value.fieldsets, {\n        id: this.props.value.fieldsets[this.state.currentFieldset].id,\n      }),\n    });\n    this.onChange(value);\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { value, error } = this.props;\n\n    return (\n      <div>\n        <Segment.Group raised>\n          {error.length > 0 &&\n            map(error, err => (\n              <Message\n                icon=\"warning\"\n                key={err}\n                negative\n                attached\n                header={this.props.intl.formatMessage(messages.error)}\n                content={err}\n              />\n            ))}\n          <div className=\"ui pointing secondary attached tabular menu\">\n            {map(value.fieldsets, (item, index) => (\n              <SchemaWidgetFieldset\n                key={item.id}\n                title={item.title}\n                order={index}\n                active={index === this.state.currentFieldset}\n                onClick={this.onSetCurrentFieldset}\n                onShowEditFieldset={this.onShowEditFieldset}\n                onShowDeleteFieldset={this.onShowDeleteFieldset}\n                onOrderFieldset={this.onOrderFieldset}\n              />\n            ))}\n            <a className=\"item\" onClick={this.onShowAddFieldset}>\n              <Icon name=\"plus\" size=\"large\" />\n            </a>\n          </div>\n          {map(\n            value.fieldsets[this.state.currentFieldset].fields,\n            (field, index) => (\n              <Field\n                {...value.properties[field]}\n                id={field}\n                required={value.required.indexOf(field) !== -1}\n                onOrder={this.onOrderField}\n                onEdit={this.onShowEditField}\n                order={index}\n                onDelete={this.onShowDeleteField}\n                key={field}\n              />\n            ),\n          )}\n          <Form.Field inline>\n            <Grid>\n              <Grid.Row stretched>\n                <Grid.Column width=\"12\">\n                  <div className=\"wrapper\">\n                    <label>Add new field</label>\n                  </div>\n                  <div className=\"toolbar\">\n                    <a className=\"item\" onClick={this.onShowAddField}>\n                      <Icon name=\"plus\" color=\"blue\" size=\"large\" />\n                    </a>\n                  </div>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </Form.Field>\n        </Segment.Group>\n        {this.state.addField !== null && (\n          <ModalForm\n            onSubmit={this.onAddField}\n            onCancel={this.onCancel}\n            title={this.props.intl.formatMessage(messages.addField)}\n            formData={{\n              type: '',\n              id: '',\n              title: '',\n            }}\n            schema={{\n              fieldsets: [\n                {\n                  id: 'default',\n                  title: this.props.intl.formatMessage(messages.default),\n                  fields: ['type', 'title', 'id', 'description', 'required'],\n                },\n              ],\n              properties: {\n                type: {\n                  type: 'string',\n                  title: this.props.intl.formatMessage(messages.type),\n                  choices: [\n                    ['text', this.props.intl.formatMessage(messages.string)],\n                    ['textarea', this.props.intl.formatMessage(messages.text)],\n                    [\n                      'wysiwyg',\n                      this.props.intl.formatMessage(messages.richtext),\n                    ],\n                    [\n                      'checkbox',\n                      this.props.intl.formatMessage(messages.checkbox),\n                    ],\n                    [\n                      'selection',\n                      this.props.intl.formatMessage(messages.selection),\n                    ],\n                  ],\n                },\n                id: {\n                  type: 'string',\n                  title: this.props.intl.formatMessage(messages.idTitle),\n                  description: this.props.intl.formatMessage(\n                    messages.idDescription,\n                  ),\n                },\n                title: {\n                  type: 'string',\n                  title: this.props.intl.formatMessage(messages.title),\n                },\n                description: {\n                  type: 'string',\n                  widget: 'textarea',\n                  title: this.props.intl.formatMessage(messages.description),\n                },\n                required: {\n                  type: 'boolean',\n                  title: this.props.intl.formatMessage(messages.required),\n                },\n              },\n              required: ['type', 'id', 'title'],\n            }}\n          />\n        )}\n        {this.state.addFieldset !== null && (\n          <ModalForm\n            onSubmit={this.onAddFieldset}\n            onCancel={this.onCancel}\n            title={this.props.intl.formatMessage(messages.addFieldset)}\n            formData={{\n              id: '',\n              title: '',\n            }}\n            schema={{\n              fieldsets: [\n                {\n                  id: 'default',\n                  title: this.props.intl.formatMessage(messages.default),\n                  fields: ['title', 'id'],\n                },\n              ],\n              properties: {\n                id: {\n                  type: 'string',\n                  title: this.props.intl.formatMessage(messages.idTitle),\n                  description: this.props.intl.formatMessage(\n                    messages.idDescription,\n                  ),\n                },\n                title: {\n                  type: 'string',\n                  title: this.props.intl.formatMessage(messages.title),\n                },\n              },\n              required: ['id', 'title'],\n            }}\n          />\n        )}\n        {this.state.editField !== null && (\n          <ModalForm\n            onSubmit={this.onEditField}\n            onCancel={this.onCancel}\n            title={this.props.intl.formatMessage(messages.editField)}\n            formData={{\n              ...this.props.value.properties[this.state.editField.id],\n              id: this.state.editField.id,\n              required:\n                this.props.value.required.indexOf(this.state.editField.id) !==\n                -1,\n            }}\n            schema={this.state.editField.schema}\n          />\n        )}\n        {this.state.editFieldset !== null && (\n          <ModalForm\n            onSubmit={this.onEditFieldset}\n            onCancel={this.onCancel}\n            title={this.props.intl.formatMessage(messages.editFieldset)}\n            formData={{\n              id: this.props.value.fieldsets[this.state.editFieldset].id,\n              title: this.props.value.fieldsets[this.state.editFieldset].title,\n            }}\n            schema={{\n              fieldsets: [\n                {\n                  id: 'default',\n                  title: this.props.intl.formatMessage(messages.default),\n                  fields: ['title', 'id'],\n                },\n              ],\n              properties: {\n                id: {\n                  type: 'string',\n                  title: this.props.intl.formatMessage(messages.idTitle),\n                  description: this.props.intl.formatMessage(\n                    messages.idDescription,\n                  ),\n                },\n                title: {\n                  type: 'string',\n                  title: this.props.intl.formatMessage(messages.title),\n                },\n              },\n              required: ['id', 'title'],\n            }}\n          />\n        )}\n        {this.state.deleteFieldset !== null && (\n          <Confirm\n            open\n            content={this.props.intl.formatMessage(messages.deleteFieldset)}\n            onCancel={this.onCancel}\n            onConfirm={this.onDeleteFieldset}\n          />\n        )}\n        {this.state.deleteField !== null && (\n          <Confirm\n            open\n            content={this.props.intl.formatMessage(messages.deleteField)}\n            onCancel={this.onCancel}\n            onConfirm={this.onDeleteField}\n          />\n        )}\n      </div>\n    );\n  }\n}\n","/**\n * Schema widget fieldset.\n * @module components/manage/Widgets/SchemaWidgetFieldset\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { DragSource, DropTarget } from 'react-dnd';\nimport { Icon } from 'semantic-ui-react';\n\n/**\n * Schema widget fieldset component.\n * @function SchemaWidgetFieldset\n * @returns {string} Markup of the component.\n */\nexport const SchemaWidgetFieldsetComponent = ({\n  connectDragSource,\n  connectDragPreview,\n  connectDropTarget,\n  isDragging,\n  title,\n  order,\n  active,\n  onShowEditFieldset,\n  onShowDeleteFieldset,\n  onClick,\n}) =>\n  connectDropTarget(\n    connectDragPreview(\n      <div\n        className={`item${active ? ' active' : ''}`}\n        style={{ opacity: isDragging ? 0.5 : 1 }}\n        onClick={() => onClick(order)}\n      >\n        {connectDragSource(\n          <i aria-hidden=\"true\" className=\"grey bars icon drag handle\" />,\n        )}\n        {title}\n        <a\n          onClick={event => {\n            event.stopPropagation();\n            onShowEditFieldset(order);\n          }}\n        >\n          <Icon name=\"write square\" size=\"large\" color=\"blue\" />\n        </a>\n        <a\n          onClick={event => {\n            event.stopPropagation();\n            onShowDeleteFieldset(order);\n          }}\n        >\n          <Icon name=\"close\" size=\"large\" color=\"red\" />\n        </a>\n      </div>,\n    ),\n  );\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nSchemaWidgetFieldsetComponent.propTypes = {\n  connectDragPreview: PropTypes.func.isRequired,\n  connectDragSource: PropTypes.func.isRequired,\n  connectDropTarget: PropTypes.func.isRequired,\n  isDragging: PropTypes.bool.isRequired,\n  order: PropTypes.number.isRequired,\n  active: PropTypes.bool.isRequired,\n  onOrderFieldset: PropTypes.func.isRequired,\n  onShowEditFieldset: PropTypes.func.isRequired,\n  onShowDeleteFieldset: PropTypes.func.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default DropTarget(\n  'fieldset',\n  {\n    hover(props, monitor) {\n      const dragOrder = monitor.getItem().order;\n      const hoverOrder = props.order;\n\n      if (dragOrder === hoverOrder) {\n        return;\n      }\n\n      props.onOrderFieldset(dragOrder, hoverOrder - dragOrder);\n\n      monitor.getItem().order = hoverOrder;\n    },\n  },\n  connect => ({\n    connectDropTarget: connect.dropTarget(),\n  }),\n)(\n  DragSource(\n    'fieldset',\n    {\n      beginDrag(props) {\n        return {\n          id: props.label,\n          order: props.order,\n        };\n      },\n    },\n    (connect, monitor) => ({\n      connectDragSource: connect.dragSource(),\n      connectDragPreview: connect.dragPreview(),\n      isDragging: monitor.isDragging(),\n    }),\n  )(SchemaWidgetFieldsetComponent),\n);\n","/**\n * SelectWidget component.\n * @module components/manage/Widgets/SelectWidget\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, Form, Grid, Select, Label } from 'semantic-ui-react';\nimport { map } from 'lodash';\nimport { defineMessages, injectIntl, intlShape } from 'react-intl';\n\nconst messages = defineMessages({\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  idTitle: {\n    id: 'Short Name',\n    defaultMessage: 'Short Name',\n  },\n  idDescription: {\n    id: 'Used for programmatic access to the fieldset.',\n    defaultMessage: 'Used for programmatic access to the fieldset.',\n  },\n  title: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  description: {\n    id: 'Description',\n    defaultMessage: 'Description',\n  },\n  choices: {\n    id: 'Choices',\n    defaultMessage: 'Choices',\n  },\n  required: {\n    id: 'Required',\n    defaultMessage: 'Required',\n  },\n});\n\n/**\n * SelectWidget component class.\n * @function SelectWidget\n * @returns {string} Markup of the component.\n */\nconst SelectWidget = ({\n  id,\n  title,\n  required,\n  description,\n  error,\n  value,\n  choices,\n  onChange,\n  onEdit,\n  onDelete,\n  intl,\n}) => {\n  const schema = {\n    fieldsets: [\n      {\n        id: 'default',\n        title: intl.formatMessage(messages.default),\n        fields: ['title', 'id', 'description', 'choices', 'required'],\n      },\n    ],\n    properties: {\n      id: {\n        type: 'string',\n        title: intl.formatMessage(messages.idTitle),\n        description: intl.formatMessage(messages.idDescription),\n      },\n      title: {\n        type: 'string',\n        title: intl.formatMessage(messages.title),\n      },\n      description: {\n        type: 'string',\n        widget: 'textarea',\n        title: intl.formatMessage(messages.description),\n      },\n      choices: {\n        type: 'array',\n        title: intl.formatMessage(messages.choices),\n      },\n      required: {\n        type: 'boolean',\n        title: intl.formatMessage(messages.required),\n      },\n    },\n    required: ['id', 'title', 'choices'],\n  };\n\n  return (\n    <Form.Field\n      inline\n      required={required}\n      error={error.length > 0}\n      className={description ? 'help' : ''}\n    >\n      <Grid>\n        <Grid.Row stretched>\n          <Grid.Column width=\"4\">\n            <div className=\"wrapper\">\n              <label htmlFor={`field-${id}`}>\n                {onEdit && (\n                  <i\n                    aria-hidden=\"true\"\n                    className=\"grey bars icon drag handle\"\n                  />\n                )}\n                {title}\n              </label>\n            </div>\n          </Grid.Column>\n          <Grid.Column width=\"8\">\n            {onEdit && (\n              <div className=\"toolbar\">\n                <a className=\"item\" onClick={() => onEdit(id, schema)}>\n                  <Icon name=\"write square\" size=\"large\" color=\"blue\" />\n                </a>\n                <a className=\"item\" onClick={() => onDelete(id)}>\n                  <Icon name=\"close\" size=\"large\" color=\"red\" />\n                </a>\n              </div>\n            )}\n            <Select\n              id={`field-${id}`}\n              name={id}\n              value={value || 'no-value'}\n              onChange={(event, { value }) =>\n                onChange(id, value === 'no-value' ? undefined : value)\n              }\n              disabled={onEdit !== null}\n              options={[\n                { key: 'no-value', text: 'No value', value: 'no-value' },\n                ...choices.map(option => ({\n                  key: option[0],\n                  text: option[1],\n                  value: option[0],\n                })),\n              ]}\n            />\n            {map(error, message => (\n              <Label key={message} basic color=\"red\" pointing>\n                {message}\n              </Label>\n            ))}\n          </Grid.Column>\n        </Grid.Row>\n        {description && (\n          <Grid.Row stretched>\n            <Grid.Column stretched width=\"12\">\n              <p className=\"help\">{description}</p>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n      </Grid>\n    </Form.Field>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nSelectWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  value: PropTypes.string,\n  choices: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\n  onChange: PropTypes.func,\n  onEdit: PropTypes.func,\n  onDelete: PropTypes.func,\n  intl: intlShape.isRequired,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nSelectWidget.defaultProps = {\n  description: null,\n  required: false,\n  error: [],\n  value: '',\n  choices: [],\n  onChange: null,\n  onEdit: null,\n  onDelete: null,\n};\n\nexport default injectIntl(SelectWidget);\n","/**\n * TextWidget component.\n * @module components/manage/Widgets/TextWidget\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Grid, Icon, Input, Label } from 'semantic-ui-react';\nimport { map } from 'lodash';\nimport { defineMessages, injectIntl, intlShape } from 'react-intl';\n\nconst messages = defineMessages({\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  idTitle: {\n    id: 'Short Name',\n    defaultMessage: 'Short Name',\n  },\n  idDescription: {\n    id: 'Used for programmatic access to the fieldset.',\n    defaultMessage: 'Used for programmatic access to the fieldset.',\n  },\n  title: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  description: {\n    id: 'Description',\n    defaultMessage: 'Description',\n  },\n  required: {\n    id: 'Required',\n    defaultMessage: 'Required',\n  },\n});\n\n/**\n * TextWidget component class.\n * @function TextWidget\n * @returns {string} Markup of the component.\n */\nconst TextWidget = ({\n  id,\n  title,\n  required,\n  description,\n  error,\n  value,\n  onChange,\n  onEdit,\n  onDelete,\n  intl,\n}) => {\n  const schema = {\n    fieldsets: [\n      {\n        id: 'default',\n        title: intl.formatMessage(messages.default),\n        fields: ['title', 'id', 'description', 'required'],\n      },\n    ],\n    properties: {\n      id: {\n        type: 'string',\n        title: intl.formatMessage(messages.idTitle),\n        description: intl.formatMessage(messages.idDescription),\n      },\n      title: {\n        type: 'string',\n        title: intl.formatMessage(messages.title),\n      },\n      description: {\n        type: 'string',\n        widget: 'textarea',\n        title: intl.formatMessage(messages.description),\n      },\n      required: {\n        type: 'boolean',\n        title: intl.formatMessage(messages.required),\n      },\n    },\n    required: ['id', 'title'],\n  };\n\n  return (\n    <Form.Field\n      inline\n      required={required}\n      error={error.length > 0}\n      className={description ? 'help' : ''}\n    >\n      <Grid>\n        <Grid.Row stretched>\n          <Grid.Column width=\"4\">\n            <div className=\"wrapper\">\n              <label htmlFor={`field-${id}`}>\n                {onEdit && (\n                  <i\n                    aria-hidden=\"true\"\n                    className=\"grey bars icon drag handle\"\n                  />\n                )}\n                {title}\n              </label>\n            </div>\n          </Grid.Column>\n          <Grid.Column width=\"8\">\n            {onEdit && (\n              <div className=\"toolbar\">\n                <a className=\"item\" onClick={() => onEdit(id, schema)}>\n                  <Icon name=\"write square\" size=\"large\" color=\"blue\" />\n                </a>\n                <a className=\"item\" onClick={() => onDelete(id)}>\n                  <Icon name=\"close\" size=\"large\" color=\"red\" />\n                </a>\n              </div>\n            )}\n            <Input\n              id={`field-${id}`}\n              name={id}\n              value={value || ''}\n              disabled={onEdit !== null}\n              onChange={({ target }) =>\n                onChange(id, target.value === '' ? undefined : target.value)\n              }\n            />\n            {map(error, message => (\n              <Label key={message} basic color=\"red\" pointing>\n                {message}\n              </Label>\n            ))}\n          </Grid.Column>\n        </Grid.Row>\n        {description && (\n          <Grid.Row stretched>\n            <Grid.Column stretched width=\"12\">\n              <p className=\"help\">{description}</p>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n      </Grid>\n    </Form.Field>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nTextWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  onEdit: PropTypes.func,\n  onDelete: PropTypes.func,\n  intl: intlShape.isRequired,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nTextWidget.defaultProps = {\n  description: null,\n  required: false,\n  error: [],\n  value: null,\n  onChange: null,\n  onEdit: null,\n  onDelete: null,\n};\n\nexport default injectIntl(TextWidget);\n","/**\n * TextareaWidget component.\n * @module components/manage/Widgets/TextareaWidget\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Grid, Icon, Label, TextArea } from 'semantic-ui-react';\nimport { map } from 'lodash';\nimport { defineMessages, injectIntl, intlShape } from 'react-intl';\n\nconst messages = defineMessages({\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  idTitle: {\n    id: 'Short Name',\n    defaultMessage: 'Short Name',\n  },\n  idDescription: {\n    id: 'Used for programmatic access to the fieldset.',\n    defaultMessage: 'Used for programmatic access to the fieldset.',\n  },\n  title: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  description: {\n    id: 'Description',\n    defaultMessage: 'Description',\n  },\n  required: {\n    id: 'Required',\n    defaultMessage: 'Required',\n  },\n});\n\n/**\n * TextareaWidget component class.\n * @function TextareaWidget\n * @returns {string} Markup of the component.\n */\nconst TextareaWidget = ({\n  id,\n  title,\n  required,\n  description,\n  error,\n  value,\n  onChange,\n  onEdit,\n  onDelete,\n  intl,\n}) => {\n  const schema = {\n    fieldsets: [\n      {\n        id: 'default',\n        title: intl.formatMessage(messages.default),\n        fields: ['title', 'id', 'description', 'required'],\n      },\n    ],\n    properties: {\n      id: {\n        type: 'string',\n        title: intl.formatMessage(messages.idTitle),\n        description: intl.formatMessage(messages.idDescription),\n      },\n      title: {\n        type: 'string',\n        title: intl.formatMessage(messages.title),\n      },\n      description: {\n        type: 'string',\n        widget: 'textarea',\n        title: intl.formatMessage(messages.description),\n      },\n      required: {\n        type: 'boolean',\n        title: intl.formatMessage(messages.required),\n      },\n    },\n    required: ['id', 'title'],\n  };\n\n  return (\n    <Form.Field\n      inline\n      required={required}\n      error={error.length > 0}\n      className={description ? 'help textarea' : 'textarea'}\n    >\n      <Grid>\n        <Grid.Row stretched>\n          <Grid.Column width=\"4\">\n            <div className=\"wrapper\">\n              <label htmlFor={`field-${id}`}>\n                {onEdit && (\n                  <i\n                    aria-hidden=\"true\"\n                    className=\"grey bars icon drag handle\"\n                  />\n                )}\n                {title}\n              </label>\n            </div>\n          </Grid.Column>\n          <Grid.Column width=\"8\">\n            {onEdit && (\n              <div className=\"toolbar\">\n                <a className=\"item\" onClick={() => onEdit(id, schema)}>\n                  <Icon name=\"write square\" size=\"large\" color=\"blue\" />\n                </a>\n                <a className=\"item\" onClick={() => onDelete(id)}>\n                  <Icon name=\"close\" size=\"large\" color=\"red\" />\n                </a>\n              </div>\n            )}\n            <TextArea\n              id={`field-${id}`}\n              name={id}\n              value={value || ''}\n              disabled={onEdit !== null}\n              onChange={({ target }) =>\n                onChange(id, target.value === '' ? undefined : target.value)\n              }\n            />\n            {map(error, message => (\n              <Label key={message} basic color=\"red\" pointing>\n                {message}\n              </Label>\n            ))}\n          </Grid.Column>\n        </Grid.Row>\n        {description && (\n          <Grid.Row stretched>\n            <Grid.Column stretched width=\"12\">\n              <p className=\"help\">{description}</p>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n      </Grid>\n    </Form.Field>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nTextareaWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  onEdit: PropTypes.func,\n  onDelete: PropTypes.func,\n  intl: intlShape.isRequired,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nTextareaWidget.defaultProps = {\n  description: null,\n  required: false,\n  error: [],\n  value: null,\n  onChange: null,\n  onEdit: null,\n  onDelete: null,\n};\n\nexport default injectIntl(TextareaWidget);\n","/**\n * WysiwygWidget container.\n * @module components/manage/WysiwygWidget/WysiwygWidget\n */\n\nimport React, { Component } from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport PropTypes from 'prop-types';\nimport Editor from 'draft-js-plugins-editor';\nimport { stateFromHTML } from 'draft-js-import-html';\nimport { convertToRaw, EditorState } from 'draft-js';\nimport redraft from 'redraft';\nimport { Form, Grid, Icon, Label, TextArea } from 'semantic-ui-react';\nimport { map } from 'lodash';\nimport createInlineToolbarPlugin from 'draft-js-inline-toolbar-plugin';\nimport { defineMessages, injectIntl, intlShape } from 'react-intl';\n\nimport { settings } from '~/config';\n\nconst messages = defineMessages({\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  idTitle: {\n    id: 'Short Name',\n    defaultMessage: 'Short Name',\n  },\n  idDescription: {\n    id: 'Used for programmatic access to the fieldset.',\n    defaultMessage: 'Used for programmatic access to the fieldset.',\n  },\n  title: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  description: {\n    id: 'Description',\n    defaultMessage: 'Description',\n  },\n  required: {\n    id: 'Required',\n    defaultMessage: 'Required',\n  },\n});\n\n@injectIntl\n/**\n * WysiwygWidget container class.\n * @class WysiwygWidget\n * @extends Component\n */\nexport default class WysiwygWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    /**\n     * Id of the field\n     */\n    id: PropTypes.string.isRequired,\n    /**\n     * Title of the field\n     */\n    title: PropTypes.string.isRequired,\n    /**\n     * Description of the field\n     */\n    description: PropTypes.string,\n    /**\n     * True if field is required\n     */\n    required: PropTypes.bool,\n    /**\n     * Value of the field\n     */\n    value: PropTypes.shape({\n      /**\n       * Content type of the value\n       */\n      'content-type': PropTypes.string,\n      /**\n       * Data of the value\n       */\n      data: PropTypes.string,\n      /**\n       * Encoding of the value\n       */\n      encoding: PropTypes.string,\n    }),\n    /**\n     * List of error messages\n     */\n    error: PropTypes.arrayOf(PropTypes.string),\n    /**\n     * On change handler\n     */\n    onChange: PropTypes.func,\n    /**\n     * On delete handler\n     */\n    onDelete: PropTypes.func,\n    /**\n     * On edit handler\n     */\n    onEdit: PropTypes.func,\n    /**\n     * Internationalization\n     */\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    description: null,\n    required: false,\n    value: {\n      'content-type': 'text/html',\n      data: '',\n      encoding: 'utf8',\n    },\n    error: [],\n    onEdit: null,\n    onDelete: null,\n    onChange: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygWidget\n   */\n  constructor(props) {\n    super(props);\n\n    if (!__SERVER__) {\n      let editorState;\n      if (props.value && props.value.data) {\n        const contentState = stateFromHTML(props.value.data, {\n          customBlockFn: settings.FromHTMLCustomBlockFn,\n        });\n        editorState = EditorState.createWithContent(contentState);\n      } else {\n        editorState = EditorState.createEmpty();\n      }\n\n      const inlineToolbarPlugin = createInlineToolbarPlugin({\n        structure: settings.richTextEditorInlineToolbarButtons,\n      });\n\n      this.state = { editorState, inlineToolbarPlugin };\n    }\n\n    this.schema = {\n      fieldsets: [\n        {\n          id: 'default',\n          title: props.intl.formatMessage(messages.default),\n          fields: ['title', 'id', 'description', 'required'],\n        },\n      ],\n      properties: {\n        id: {\n          type: 'string',\n          title: props.intl.formatMessage(messages.idTitle),\n          description: props.intl.formatMessage(messages.idDescription),\n        },\n        title: {\n          type: 'string',\n          title: props.intl.formatMessage(messages.title),\n        },\n        description: {\n          type: 'string',\n          widget: 'textarea',\n          title: props.intl.formatMessage(messages.description),\n        },\n        required: {\n          type: 'boolean',\n          title: props.intl.formatMessage(messages.required),\n        },\n      },\n      required: ['id', 'title'],\n    };\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  /**\n   * Change handler\n   * @method onChange\n   * @param {object} editorState Editor state.\n   * @returns {undefined}\n   */\n  onChange(editorState) {\n    this.setState({ editorState });\n    this.props.onChange(this.props.id, {\n      'content-type': this.props.value\n        ? this.props.value['content-type']\n        : 'text/html',\n      encoding: this.props.value ? this.props.value.encoding : 'utf8',\n      data: ReactDOMServer.renderToStaticMarkup(\n        redraft(\n          convertToRaw(editorState.getCurrentContent()),\n          settings.ToHTMLRenderers,\n          settings.ToHTMLOptions,\n        ),\n      ),\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const {\n      id,\n      title,\n      description,\n      required,\n      value,\n      error,\n      onEdit,\n      onDelete,\n    } = this.props;\n\n    if (__SERVER__) {\n      return (\n        <Form.Field\n          inline\n          required={required}\n          error={error.length > 0}\n          className={description ? 'help' : ''}\n        >\n          <div className=\"wrapper\">\n            <label htmlFor={`field-${id}`}>{title}</label>\n            <TextArea id={id} name={id} value={value.data} />\n            {description && <p className=\"help\">{description}</p>}\n            {map(error, message => (\n              <Label key={message} basic color=\"red\" pointing>\n                {message}\n              </Label>\n            ))}\n          </div>\n        </Form.Field>\n      );\n    }\n    const { InlineToolbar } = this.state.inlineToolbarPlugin;\n\n    return (\n      <Form.Field\n        inline\n        required={required}\n        error={error.length > 0}\n        className={description ? 'help wysiwyg' : 'wysiwyg'}\n      >\n        <Grid>\n          <Grid.Row stretched>\n            <Grid.Column width=\"4\">\n              <div className=\"wrapper\">\n                <label htmlFor={`field-${id}`}>\n                  {onEdit && (\n                    <i\n                      aria-hidden=\"true\"\n                      className=\"grey bars icon drag handle\"\n                    />\n                  )}\n                  {title}\n                </label>\n              </div>\n            </Grid.Column>\n            <Grid.Column width=\"8\">\n              {onEdit && (\n                <div className=\"toolbar\">\n                  <a className=\"item\" onClick={() => onEdit(id, this.schema)}>\n                    <Icon name=\"write square\" size=\"large\" color=\"blue\" />\n                  </a>\n                  <a className=\"item\" onClick={() => onDelete(id)}>\n                    <Icon name=\"close\" size=\"large\" color=\"red\" />\n                  </a>\n                </div>\n              )}\n              <div style={{ boxSizing: 'initial' }}>\n                {this.props.onChange ? (\n                  <Editor\n                    id={`field-${id}`}\n                    onChange={this.onChange}\n                    editorState={this.state.editorState}\n                    plugins={[this.state.inlineToolbarPlugin, ...settings.richTextEditorPlugins]}\n                    blockRenderMap={settings.extendedBlockRenderMap}\n                    blockStyleFn={settings.blockStyleFn}\n                  />\n                ) : (\n                  <div className=\"DraftEditor-root\" />\n                )}\n              </div>\n              {map(error, message => (\n                <Label key={message} basic color=\"red\" pointing>\n                  {message}\n                </Label>\n              ))}\n            </Grid.Column>\n          </Grid.Row>\n          {description && (\n            <Grid.Row stretched>\n              <Grid.Column stretched width=\"12\">\n                <span className=\"help\">{description}</span>\n              </Grid.Column>\n            </Grid.Row>\n          )}\n          {this.props.onChange && <InlineToolbar />}\n        </Grid>\n      </Form.Field>\n    );\n  }\n}\n","/**\n * Workflow component.\n * @module components/manage/Workflow/Workflow\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { last } from 'lodash';\nimport { Dropdown, Icon } from 'semantic-ui-react';\nimport { FormattedMessage } from 'react-intl';\nimport { settings } from '~/config';\n\nimport { getWorkflow, transitionWorkflow } from '../../../actions';\n\n@connect(\n  state => ({\n    loaded: state.workflow.transition.loaded,\n    history: state.workflow.history,\n    transitions: state.workflow.transitions,\n  }),\n  dispatch => bindActionCreators({ getWorkflow, transitionWorkflow }, dispatch),\n)\n/**\n * Workflow container class.\n * @class Workflow\n * @extends Component\n */\nexport default class Workflow extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getWorkflow: PropTypes.func.isRequired,\n    transitionWorkflow: PropTypes.func.isRequired,\n    loaded: PropTypes.bool.isRequired,\n    pathname: PropTypes.string.isRequired,\n    history: PropTypes.arrayOf(\n      PropTypes.shape({\n        review_state: PropTypes.string,\n      }),\n    ),\n    transitions: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        title: PropTypes.string,\n      }),\n    ),\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    history: [],\n    transitions: [],\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Workflow\n   */\n  constructor(props) {\n    super(props);\n    this.transition = this.transition.bind(this);\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  componentWillMount() {\n    this.props.getWorkflow(this.props.pathname);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.pathname !== this.props.pathname) {\n      this.props.getWorkflow(nextProps.pathname);\n    }\n    if (!this.props.loaded && nextProps.loaded) {\n      this.props.getWorkflow(nextProps.pathname);\n    }\n  }\n\n  /**\n   * On transition handler\n   * @method transition\n   * @param {string} event Event object\n   * @returns {undefined}\n   */\n  transition(event, { value }) {\n    this.props.transitionWorkflow(value.replace(settings.apiPath, ''));\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const lastEntry = last(this.props.history);\n    const current =\n      this.props.history.length > 0 &&\n      (lastEntry.data ? lastEntry.data.review_state : lastEntry.review_state);\n\n    return this.props.history.length > 0 ? (\n      <Dropdown\n        item\n        trigger={\n          <span>\n            <Icon name=\"random\" size=\"big\" />{' '}\n            <FormattedMessage\n              id=\"State: {current}\"\n              defaultMessage=\"State: {current}\"\n              values={{ current }}\n            />\n          </span>\n        }\n      >\n        <Dropdown.Menu>\n          {this.props.transitions.map(item => (\n            <Dropdown.Item\n              text={item.title}\n              value={item['@id']}\n              key={item['@id']}\n              onClick={this.transition}\n            />\n          ))}\n        </Dropdown.Menu>\n      </Dropdown>\n    ) : (\n      <span />\n    );\n  }\n}\n","/**\n * Column component.\n * @module components/Column\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid } from 'semantic-ui-react';\n\nimport { Tile } from '../../../components';\n\n/**\n * Column component class.\n * @function Column\n * @param {Object} props Component properties.\n * @param {number} props.width Column width.\n * @param {Array} props.tiles Array of tiles.\n * @param {number} props.row Row index.\n * @param {number} props.column Column index.\n * @param {string} props.hovered Hovered state.\n * @param {func} props.selectTile Select tile method.\n * @param {func} props.deleteTile Delete tile method.\n * @param {func} props.setHovered Set hovered tile method.\n * @param {func} props.handleDrop Handle tile drop event.\n * @param {func} props.setTileContent Set tile content method.\n * @returns {string} Markup of the row.\n */\nconst Column = ({\n  width,\n  tiles,\n  row,\n  column,\n  hovered,\n  selectTile,\n  deleteTile,\n  setHovered,\n  handleDrop,\n  setTileContent,\n}) => (\n  <Grid.Column width={width} className={hovered || ''}>\n    {tiles.map((tile, index) => (\n      <Tile\n        key={tile.url}\n        row={row}\n        column={column}\n        tile={index}\n        first={index === 0}\n        last={index === tiles.length - 1}\n        selectTile={selectTile}\n        deleteTile={deleteTile}\n        setHovered={setHovered}\n        handleDrop={handleDrop}\n        setTileContent={setTileContent}\n        url={tile.url}\n        content={tile.content}\n        type={tile.type}\n        label={tile.label}\n        selected={tile.selected}\n        hovered={tile.hovered}\n      />\n    ))}\n  </Grid.Column>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nColumn.propTypes = {\n  width: PropTypes.number.isRequired,\n  tiles: PropTypes.arrayOf(\n    PropTypes.shape({\n      url: PropTypes.string,\n      content: PropTypes.object,\n      type: PropTypes.string,\n      label: PropTypes.string,\n    }),\n  ).isRequired,\n  column: PropTypes.number.isRequired,\n  row: PropTypes.number.isRequired,\n  hovered: PropTypes.string,\n  selectTile: PropTypes.func.isRequired,\n  deleteTile: PropTypes.func.isRequired,\n  setHovered: PropTypes.func.isRequired,\n  handleDrop: PropTypes.func.isRequired,\n  setTileContent: PropTypes.func.isRequired,\n};\n\n/**\n * Default props.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nColumn.defaultProps = {\n  hovered: null,\n};\n\nexport default Column;\n","/**\n * Column resize.\n * @module components/mosaic/ColumnResize\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { DragSource } from 'react-dnd';\nimport { findDOMNode } from 'react-dom';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport { map } from 'lodash';\n\n/**\n * ColumnResize component class.\n * @class ColumnResize\n * @extends Component\n */\n@DragSource(\n  'column',\n  {\n    beginDrag(props, monitor, component) {\n      const column = findDOMNode(component);\n      const grid = column.parentNode.parentNode;\n      const gridRect = grid.getBoundingClientRect();\n      props.startResize(props.row);\n      return {\n        row: props.row,\n        column: props.column,\n        columns: props.columns,\n        columnHeight: column.getBoundingClientRect().height,\n        gridWidth: gridRect.width,\n        gridX: gridRect.left,\n        gridY: gridRect.top,\n      };\n    },\n    endDrag(props, monitor) {\n      const item = monitor.getItem();\n      const currentOffset = monitor.getSourceClientOffset();\n\n      const threeColOptions =\n        props.column === 0 ? [0.25, 0.33, 0.5] : [0.5, 0.67, 0.75];\n      const options =\n        props.columns === 2 ? [0.25, 0.33, 0.5, 0.67, 0.75] : threeColOptions;\n\n      const percentage = (currentOffset.x - item.gridX) / item.gridWidth;\n      const diff = map(options, option => Math.abs(percentage - option));\n      const index = diff.indexOf(Math.min(...diff));\n\n      props.endResize(props.row, props.column, index);\n    },\n  },\n  (connect, monitor) => ({\n    connectDragSource: connect.dragSource(),\n    connectDragPreview: connect.dragPreview(),\n    isDragging: monitor.isDragging(),\n  }),\n)\nexport default class ColumnResize extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    row: PropTypes.number.isRequired,\n    column: PropTypes.number.isRequired,\n    columns: PropTypes.number.isRequired,\n    isDragging: PropTypes.bool.isRequired,\n    startResize: PropTypes.func.isRequired,\n    endResize: PropTypes.func.isRequired,\n    connectDragSource: PropTypes.func.isRequired,\n    connectDragPreview: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.connectDragPreview(getEmptyImage(), {\n      captureDraggingState: true,\n    });\n  }\n\n  /**\n   * Render method.\n   * @function render\n   * @returns {string} Markup of the container.\n   */\n  render() {\n    return this.props.connectDragSource(\n      <div className={`divider${this.props.isDragging ? ' resizing' : ''}`}>\n        <div className=\"inner\" />\n      </div>,\n    );\n  }\n}\n","/**\n * Column resize helper.\n * @module components/mosaic/ColumnResizeHelper\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { DragLayer } from 'react-dnd';\nimport { map } from 'lodash';\n\n@DragLayer(monitor => ({\n  item: monitor.getItem(),\n  itemType: monitor.getItemType(),\n  initialOffset: monitor.getInitialSourceClientOffset(),\n  currentOffset: monitor.getSourceClientOffset(),\n  isDragging: monitor.isDragging(),\n}))\n/**\n * ColumnResizeHelper component class.\n * @function ColumnResizeHelper\n * @param {Object} props Component properties.\n * @param {Object} props.item Item to be dragged.\n * @param {string} props.itemType Item type to be dragged.\n * @param {Object} props.initialOffset Initial offset.\n * @param {Object} props.currentOffset Current offset.\n * @param {bool} props.isDragging Is dragging.\n * @returns {string} Markup of the component.\n */\nexport default class ColumnResizeHelper extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    item: PropTypes.shape(PropTypes.any),\n    itemType: PropTypes.string,\n    initialOffset: PropTypes.shape({\n      x: PropTypes.number,\n      y: PropTypes.number,\n    }),\n    currentOffset: PropTypes.shape({\n      x: PropTypes.number,\n      y: PropTypes.number,\n    }),\n    isDragging: PropTypes.bool.isRequired,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    item: null,\n    itemType: null,\n    initialOffset: null,\n    currentOffset: null,\n  };\n\n  /**\n   * Render method.\n   * @function render\n   * @returns {string} Markup of the container.\n   */\n  render() {\n    const {\n      isDragging,\n      initialOffset,\n      currentOffset,\n      item,\n      itemType,\n    } = this.props;\n\n    if (!isDragging || itemType !== 'column') {\n      return <span />;\n    }\n\n    // Determine possible options\n    const threeColOptions =\n      item.column === 0 ? [0.25, 0.33, 0.5] : [0.5, 0.66, 0.75];\n    const options =\n      item.columns === 2 ? [0.25, 0.33, 0.5, 0.66, 0.75] : threeColOptions;\n\n    // Calc percentage\n    const percentage = (currentOffset.x - item.gridX) / item.gridWidth;\n\n    // Calc difference for each option\n    const diff = map(options, option => Math.abs(percentage - option));\n\n    // Find best match\n    const index = diff.indexOf(Math.min(...diff));\n\n    return (\n      <div\n        className=\"resize helper\"\n        style={{\n          top: initialOffset.y,\n          left: item.gridX + options[index] * item.gridWidth,\n          height: item.columnHeight,\n        }}\n      />\n    );\n  }\n}\n","/**\n * Editbar component.\n * @module components/Mosaic/Editbar/Editbar\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, Menu } from 'semantic-ui-react';\n\n/**\n * Editbar component class.\n * @function Editbar\n * @param {Object} props Component properties.\n * @param {func} props.insertTile Insert tile method.\n * @returns {string} Markup of the component.\n */\nconst Editbar = ({ insertTile }) => (\n  <Menu compact icon=\"labeled\" className=\"editbar\">\n    <Menu.Item name=\"font\" onClick={() => insertTile('text')}>\n      <Icon name=\"font\" />\n      Text\n    </Menu.Item>\n\n    <Menu.Item name=\"image\">\n      <Icon name=\"image\" />\n      Media\n    </Menu.Item>\n\n    <Menu.Item name=\"checkmark box\">\n      <Icon name=\"checkmark box\" />\n      Field\n    </Menu.Item>\n\n    <Menu.Item name=\"browser\">\n      <Icon name=\"browser\" />\n      App\n    </Menu.Item>\n\n    <Menu.Item name=\"cancel\">\n      <Icon name=\"cancel\" color=\"red\" />\n      Cancel\n    </Menu.Item>\n\n    <Menu.Item name=\"save\">\n      <Icon name=\"save\" color=\"blue\" />\n      Save\n    </Menu.Item>\n  </Menu>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nEditbar.propTypes = {\n  insertTile: PropTypes.func.isRequired,\n};\n\nexport default Editbar;\n","/**\n * Grid component.\n * @module components/Grid\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid as UIGrid } from 'semantic-ui-react';\nimport { join, map } from 'lodash';\n\nimport { ColumnResizeHelper, Row } from '../../../components';\n\n/**\n * Grid component class.\n * @function Grid\n * @param {Object} props Component properties.\n * @param {Object[]} props.rows Rows in the grid.\n * @param {func} props.selectTile Select tile method.\n * @param {func} props.deleteTile Delete tile method.\n * @param {func} props.setHovered Set hovered tile method.\n * @param {func} props.handleDrop Handle drop tile event.\n * @param {func} props.setTileContent Set tile content method.\n * @param {func} props.startResize Start resize method.\n * @param {func} props.endResize Start resize method.\n * @returns {string} Markup of the row.\n */\nconst Grid = ({\n  rows,\n  selectTile,\n  deleteTile,\n  setHovered,\n  handleDrop,\n  setTileContent,\n  startResize,\n  endResize,\n}) => (\n  <UIGrid className=\"mosaic\">\n    {rows.map((row, index) => (\n      <Row\n        key={join(\n          map(row.columns, column =>\n            join(map(column.tiles, tile => tile.url), '|'),\n          ),\n          '-',\n        )}\n        row={index}\n        selectTile={selectTile}\n        deleteTile={deleteTile}\n        setHovered={setHovered}\n        handleDrop={handleDrop}\n        setTileContent={setTileContent}\n        columns={row.columns}\n        hovered={row.hovered}\n        resize={row.resize}\n        startResize={startResize}\n        endResize={endResize}\n      />\n    ))}\n    <ColumnResizeHelper />\n  </UIGrid>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nGrid.propTypes = {\n  rows: PropTypes.arrayOf(PropTypes.shape({ columns: PropTypes.array }))\n    .isRequired,\n  selectTile: PropTypes.func.isRequired,\n  deleteTile: PropTypes.func.isRequired,\n  setHovered: PropTypes.func.isRequired,\n  handleDrop: PropTypes.func.isRequired,\n  setTileContent: PropTypes.func.isRequired,\n  startResize: PropTypes.func.isRequired,\n  endResize: PropTypes.func.isRequired,\n};\n\nexport default Grid;\n","/**\n * Layout container.\n * @module containers/Layout\n */\n\n/* eslint react/prefer-stateless-function: 0 */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { convertFromHTML, EditorState, ContentState } from 'draft-js';\nimport { DragDropContext } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport { isEqual, map, reduce, remove } from 'lodash';\nimport move from 'lodash-move';\nimport { v4 as uuid } from 'uuid';\n\nimport { Grid, Editbar } from '../../../components';\n\nconst tileTypes = {\n  title: {\n    label: 'Title',\n    content: content => `<h1>${content}</h1>`,\n  },\n  description: {\n    label: 'Description',\n    content: content => `<p class=\"description\">${content}</p>`,\n  },\n  text: {\n    label: 'Text',\n    content: content => content,\n  },\n};\n\n/**\n * Layout component class.\n * @class Layout\n * @extends Component\n */\n@DragDropContext(HTML5Backend)\nexport default class Layout extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    layout: PropTypes.shape({\n      rows: PropTypes.arrayOf(\n        PropTypes.shape({\n          columns: PropTypes.arrayOf(\n            PropTypes.shape({\n              width: PropTypes.number,\n              tiles: PropTypes.arrayOf(\n                PropTypes.shape({\n                  content: PropTypes.string,\n                  url: PropTypes.string,\n                  type: PropTypes.string,\n                }),\n              ),\n            }),\n          ),\n        }),\n      ),\n    }),\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    layout: {\n      rows: [\n        {\n          columns: [\n            {\n              width: 16,\n              tiles: [\n                {\n                  content: 'My first blog post',\n                  url: './@@plone.app.standardtiles.html/1',\n                  type: 'title',\n                },\n                {\n                  content:\n                    'Fusce imperdiet risus turpis, a facilisis dui pharetra sit amet. Maecenas ut malesuada diam. Nulla porta ut dui in ultrices. Maecenas eget dictum tortor, vulputate vulputate mi. Aenean pulvinar a est et sagittis. Nam at venenatis nunc. Pellentesque quis porta enim.',\n                  url: './@@plone.app.standardtiles.html/2',\n                  type: 'description',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          columns: [\n            {\n              width: 8,\n              tiles: [\n                {\n                  content:\n                    '<h2>Nam et convallis lorem</h2><p>Suspendisse vestibulum quis lorem in luctus. Cras consequat sit amet elit aliquam rhoncus. Nunc quis faucibus orci, vitae gravida risus. Nulla semper nisi velit, et ullamcorper magna volutpat eget. Nam euismod libero sit amet arcu imperdiet, quis malesuada metus congue. Sed magna massa, gravida a ornare eu, suscipit auctor nisl. Nulla laoreet dolor ut viverra consectetur. Praesent aliquet ante sit amet ante maximus aliquet. Integer a ex vel nisl cursus interdum. Donec sollicitudin venenatis leo at rutrum. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum dignissim augue ac neque ornare, sed venenatis augue dignissim. Pellentesque gravida vel arcu quis venenatis.</p><p></p><p>Fusce imperdiet risus turpis, a facilisis dui pharetra sit amet. Maecenas ut malesuada diam. Nulla porta ut dui in ultrices. Maecenas eget dictum tortor, vulputate vulputate mi. Aenean pulvinar a est et sagittis. Nam at venenatis nunc. Pellentesque quis porta enim.</p>',\n                  url: './@@plone.app.standardtiles.html/4',\n                  type: 'text',\n                },\n              ],\n            },\n            {\n              width: 8,\n              tiles: [\n                {\n                  content:\n                    '<h2>Nam euismod libero sit amet</h2><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam a augue eget dui dignissim hendrerit vitae eget velit. Aenean nec rhoncus turpis. Nullam varius magna metus, nec elementum leo ornare ac. Nam tincidunt vel ex id consectetur. Curabitur faucibus et ante nec molestie. Sed eget fringilla mi. Sed sed tristique tellus.</p><p>Nam et convallis lorem. Suspendisse finibus erat quis erat consectetur ultricies. Nulla mattis arcu nec dignissim pharetra. Ut fermentum ipsum eget ante consectetur eleifend. Nulla commodo pellentesque rhoncus. Nunc vitae odio sed dui aliquam gravida gravida sit amet ante. Integer aliquam aliquet cursus. Nam convallis laoreet nunc ut dictum.</p><p>Quisque fermentum, ligula quis venenatis sagittis, eros nisl scelerisque lorem, eget mollis tellus ex ut purus. Vivamus ut imperdiet odio. Integer sodales suscipit mauris eget tristique. Proin non tellus tempus felis lacinia blandit a at erat. Suspendisse at elit sodales, malesuada eros at, pulvinar nisl. Mauris at odio lacinia, placerat tellus sit amet, luctus est. Ut sit amet ligula pharetra, dignissim augue nec, volutpat eros.</p>',\n                  url: './@@plone.app.standardtiles.html/3',\n                  type: 'text',\n                },\n              ],\n            },\n          ],\n        },\n        {\n          columns: [\n            {\n              width: 16,\n              tiles: [\n                {\n                  content:\n                    '<h2>Quisque fermentum</h2><ul><li>Ligula quis venenatis sagittis</li><li>Eros nisl scelerisque lorem</li><li>Eget mollis tellus ex ut purus</li><li>Vivamus ut imperdiet odio</li><li>Integer sodales suscipit mauris eget tristique.</li><li>Proin non tellus tempus felis lacinia blandit a at erat</li><li>Suspendisse at elit sodales</li><li>Malesuada eros at, pulvinar nisl.</li><li>Mauris at odio lacinia, placerat tellus sit amet, luctus est.</li><li>Ut sit amet ligula pharetra, dignissim augue nec, volutpat eros.</li></ul>',\n                  url: './@@plone.app.standardtiles.html/10',\n                  type: 'text',\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    },\n  };\n\n  /**\n   * Construcor\n   * @param {Object} props Properties.\n   * @constructs\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      layout: {\n        rows: map(this.props.layout.rows, (row, rowIndex) => ({\n          resize: false,\n          hovered: null,\n          columns: map(row.columns, (column, columnIndex) => ({\n            width: column.width,\n            hovered: null,\n            tiles: map(column.tiles, (tile, tileIndex) => ({\n              url: tile.url,\n              type: tile.type,\n              label: tileTypes[tile.type].label,\n              content: __SERVER__\n                ? tile.content\n                : EditorState.createWithContent(\n                    ContentState.createFromBlockArray(\n                      convertFromHTML(\n                        tileTypes[tile.type].content(tile.content),\n                      ),\n                    ),\n                  ),\n              selected: rowIndex === 0 && columnIndex === 0 && tileIndex === 0,\n              hovered: null,\n            })),\n          })),\n        })),\n      },\n      selected: {\n        row: 0,\n        column: 0,\n        tile: 0,\n      },\n      hovered: {\n        row: -1,\n        column: -1,\n        tile: -1,\n        type: '',\n        direction: '',\n      },\n    };\n    this.selectTile = this.selectTile.bind(this);\n    this.deleteTile = this.deleteTile.bind(this);\n    this.setHovered = this.setHovered.bind(this);\n    this.setTileContent = this.setTileContent.bind(this);\n    this.handleDrop = this.handleDrop.bind(this);\n    this.startResize = this.startResize.bind(this);\n    this.endResize = this.endResize.bind(this);\n    this.deselectOnDocumentClick = this.deselectOnDocumentClick.bind(this);\n    this.handleRef = this.handleRef.bind(this);\n    this.insertTile = this.insertTile.bind(this);\n  }\n\n  /**\n   * Component did mount\n   * @function componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    document.addEventListener('mousedown', this.deselectOnDocumentClick);\n  }\n\n  /**\n   * Component will unmount\n   * @function componentWillUnmount\n   * @returns {undefined}\n   */\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.deselectOnDocumentClick);\n  }\n\n  /**\n   * Set tile content.\n   * @function setTileContent\n   * @param {number} row Row index.\n   * @param {number} column Column index.\n   * @param {number} tile Tile index.\n   * @param {Object} content New content.\n   * @returns {undefined}\n   */\n  setTileContent(row, column, tile, content) {\n    this.state.layout.rows[row].columns[column].tiles[tile].content = content;\n\n    this.setState({\n      layout: this.state.layout,\n    });\n  }\n\n  /**\n   * Set hovered.\n   * @function setHovered\n   * @param {number} row Row index.\n   * @param {number} column Column index.\n   * @param {number} tile Column index.\n   * @param {string} type Selected type (row/column/tile).\n   * @param {string} direction Direction.\n   * @returns {undefined}\n   */\n  setHovered(row, column, tile, type, direction) {\n    if (\n      isEqual(this.state.hovered, {\n        row,\n        column,\n        tile,\n        type,\n        direction,\n      })\n    ) {\n      return;\n    }\n\n    // Deselect\n    if (this.state.hovered.row !== -1) {\n      switch (this.state.hovered.type) {\n        case 'tile':\n          this.state.layout.rows[this.state.hovered.row].columns[\n            this.state.hovered.column\n          ].tiles[this.state.hovered.tile].hovered = null;\n          break;\n        case 'column':\n          this.state.layout.rows[this.state.hovered.row].columns[\n            this.state.hovered.column\n          ].hovered = null;\n          break;\n        default:\n          this.state.layout.rows[this.state.hovered.row].hovered = null;\n          break;\n      }\n    }\n\n    // Select new\n    if (row !== -1) {\n      switch (type) {\n        case 'tile':\n          this.state.layout.rows[row].columns[column].tiles[\n            tile\n          ].hovered = direction;\n          break;\n        case 'column':\n          this.state.layout.rows[row].columns[column].hovered = direction;\n          break;\n        default:\n          this.state.layout.rows[row].hovered = direction;\n          break;\n      }\n    }\n\n    this.setState({\n      hovered: {\n        row,\n        column,\n        tile,\n        type,\n        direction,\n      },\n      layout: this.state.layout,\n    });\n  }\n\n  /**\n   * Handle drop.\n   * @function handleDrop\n   * @param {number} row Row index.\n   * @param {number} column Column index.\n   * @param {number} tile Tile index.\n   * @returns {undefined}\n   */\n  handleDrop(row, column, tile) {\n    const hovered = {\n      ...this.state.hovered,\n    };\n    const offset =\n      hovered.direction === 'bottom' || hovered.direction === 'right' ? 1 : 0;\n    let removed;\n\n    // Reset hovered\n    this.setHovered(-1, -1, -1, '', '');\n\n    switch (hovered.type) {\n      case 'tile':\n        // If source and target tile in the same column\n        if (hovered.row === row && hovered.column === column) {\n          // Move tile in column\n          this.state.layout.rows[hovered.row].columns[\n            hovered.column\n          ].tiles = move(\n            this.state.layout.rows[row].columns[column].tiles,\n            tile,\n            hovered.tile + offset,\n          );\n        } else {\n          // Insert tile in new column\n          this.state.layout.rows[hovered.row].columns[\n            hovered.column\n          ].tiles.splice(\n            hovered.tile + offset,\n            0,\n            this.state.layout.rows[row].columns[column].tiles[tile],\n          );\n          // Remove tile in old column\n          this.state.layout.rows[row].columns[column].tiles.splice(tile, 1);\n        }\n        break;\n      case 'column':\n        if (\n          this.state.layout.rows[hovered.row].columns.length < 4 ||\n          (hovered.row === row &&\n            this.state.layout.rows[row].columns[column].tiles.length === 1)\n        ) {\n          // Remove tile from old position\n          removed = this.state.layout.rows[row].columns[column].tiles.splice(\n            tile,\n            1,\n          );\n          // Add tile in new column\n          this.state.layout.rows[hovered.row].columns.splice(\n            hovered.column + offset,\n            0,\n            {\n              width: this.state.layout.rows[row].columns[column].width,\n              hovered: null,\n              tiles: removed,\n            },\n          );\n        }\n        break;\n      default:\n        // Remove tile from old position\n        removed = this.state.layout.rows[row].columns[column].tiles.splice(\n          tile,\n          1,\n        );\n        // Add tile in new column\n        this.state.layout.rows.splice(hovered.row + offset, 0, {\n          hovered: null,\n          columns: [\n            {\n              width: 16,\n              hovered: null,\n              tiles: removed,\n            },\n          ],\n        });\n        break;\n    }\n\n    // Clean up layout\n    this.cleanupLayout();\n\n    // Set new state\n    this.setState({\n      layout: this.state.layout,\n    });\n  }\n\n  /**\n   * Cleanup layout.\n   * @function cleanupLayout\n   * @returns {undefined}\n   */\n  cleanupLayout() {\n    // Clean up empty columns\n    for (let row = 0; row < this.state.layout.rows.length; row += 1) {\n      remove(\n        this.state.layout.rows[row].columns,\n        column => column.tiles.length === 0,\n      );\n    }\n\n    // Clean up empty rows\n    remove(this.state.layout.rows, row => row.columns.length === 0);\n\n    // Resize columns\n    for (let row = 0; row < this.state.layout.rows.length; row += 1) {\n      if (\n        reduce(\n          map(this.state.layout.rows[row].columns, column => column.width),\n          (x, y) => x + y,\n        ) !== 16\n      ) {\n        switch (this.state.layout.rows[row].columns.length) {\n          case 1:\n            this.state.layout.rows[row].columns[0].width = 16;\n            break;\n          case 2:\n            this.state.layout.rows[row].columns[0].width = 8;\n            this.state.layout.rows[row].columns[1].width = 8;\n            break;\n          case 3:\n            this.state.layout.rows[row].columns[0].width = 5;\n            this.state.layout.rows[row].columns[1].width = 6;\n            this.state.layout.rows[row].columns[2].width = 5;\n            break;\n          default:\n            this.state.layout.rows[row].columns[0].width = 4;\n            this.state.layout.rows[row].columns[1].width = 4;\n            this.state.layout.rows[row].columns[2].width = 4;\n            this.state.layout.rows[row].columns[3].width = 4;\n            break;\n        }\n      }\n    }\n\n    // Set new state\n    this.setState({\n      layout: this.state.layout,\n    });\n  }\n\n  /**\n   * Select tile.\n   * @function selectTile\n   * @param {number} row Row index.\n   * @param {number} column Column index.\n   * @param {number} tile Tile index.\n   * @returns {undefined}\n   */\n  selectTile(row, column, tile) {\n    if (this.state.selected.row !== -1) {\n      this.state.layout.rows[this.state.selected.row].columns[\n        this.state.selected.column\n      ].tiles[this.state.selected.tile].selected = false;\n    }\n    if (row !== -1) {\n      this.state.layout.rows[row].columns[column].tiles[tile].selected = true;\n    }\n    this.setState({\n      selected: {\n        row,\n        column,\n        tile,\n      },\n      layout: this.state.layout,\n    });\n  }\n\n  /**\n   * Delete tile.\n   * @function deleteTile\n   * @param {number} row Row index.\n   * @param {number} column Column index.\n   * @param {number} tile Tile index.\n   * @returns {undefined}\n   */\n  deleteTile(row, column, tile) {\n    this.selectTile(-1, -1, -1);\n    this.state.layout.rows[row].columns[column].tiles.splice(tile, 1);\n    this.cleanupLayout();\n  }\n\n  /**\n   * Start resize.\n   * @function startResize\n   * @param {number} row Row index.\n   * @returns {undefined}\n   */\n  startResize(row) {\n    this.selectTile(-1, -1, -1);\n    this.state.layout.rows[row].resize = true;\n    this.setState({\n      layout: this.state.layout,\n    });\n  }\n\n  /**\n   * End resize.\n   * @function endResize\n   * @param {number} row Row index.\n   * @param {number} column Column index.\n   * @param {number} position New position.\n   * @returns {undefined}\n   */\n  endResize(row, column, position) {\n    let layout;\n\n    if (this.state.layout.rows[row].columns.length === 2) {\n      layout = [[4, 12], [5, 11], [8, 8], [11, 5], [12, 4]][position];\n    } else if (column === 0) {\n      layout = [[4, 8, 4], [5, 6, 5], [8, 4, 4]][position];\n    } else {\n      layout = [[4, 4, 8], [5, 6, 5], [4, 8, 4]][position];\n    }\n    map(layout, (width, index) => {\n      this.state.layout.rows[row].columns[index].width = width;\n    });\n\n    this.state.layout.rows[row].resize = false;\n    this.setState({\n      layout: this.state.layout,\n    });\n  }\n\n  /**\n   * Handle ref\n   * @function handleRef\n   * @param {Object} node Ref object.\n   * @returns {undefined}\n   */\n  handleRef(node) {\n    this.ref = node;\n  }\n\n  /**\n   * Deselect on document click method.\n   * @function deselectOnDocumentClick\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n  deselectOnDocumentClick(event) {\n    if (this.ref && !this.ref.contains(event.target)) {\n      this.selectTile(-1, -1, -1);\n    }\n  }\n\n  /**\n   * Insert a tile.\n   * @function insertTile\n   * @param {string} type Type of tile.\n   * @returns {undefined}\n   */\n  insertTile(type) {\n    this.state.layout.rows.push({\n      resize: false,\n      hovered: null,\n      columns: [\n        {\n          width: 16,\n          hovered: null,\n          tiles: [\n            {\n              url: uuid(),\n              type,\n              label: tileTypes[type].label,\n              content: EditorState.createWithContent(\n                ContentState.createFromBlockArray(convertFromHTML('<p></p>')),\n              ),\n              selected: true,\n              hovered: null,\n            },\n          ],\n        },\n      ],\n    });\n    this.setState({\n      layout: this.state.layout,\n    });\n    this.selectTile(this.state.layout.rows.length - 1, 0, 0);\n  }\n\n  /**\n   * Render method.\n   * @function render\n   * @returns {string} Markup of the container.\n   */\n  render() {\n    return (\n      <div ref={this.handleRef}>\n        <Grid\n          rows={this.state.layout.rows}\n          selectTile={this.selectTile}\n          deleteTile={this.deleteTile}\n          setHovered={this.setHovered}\n          handleDrop={this.handleDrop}\n          setTileContent={this.setTileContent}\n          startResize={this.startResize}\n          endResize={this.endResize}\n        />\n        <Editbar insertTile={this.insertTile} />\n      </div>\n    );\n  }\n}\n","/**\n * Row component.\n * @module components/Row\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid } from 'semantic-ui-react';\nimport { join, map } from 'lodash';\n\nimport { Column, ColumnResize } from '../../../components';\n\n/**\n * Row component class.\n * @function Row\n * @param {Object} props Component properties.\n * @param {Object} props.columns Column data.\n * @param {number} props.row Row index.\n * @param {string} props.hovered Hovered state.\n * @param {string} props.resize Resize state.\n * @param {func} props.selectTile Select tile method.\n * @param {func} props.deleteTile Delete tile method.\n * @param {func} props.setHoverd Set hovered tile method.\n * @param {func} props.handleDrop Handle tile drop event.\n * @param {func} props.setTileContent Set tile content method.\n * @param {func} props.startResize Start resize method.\n * @param {func} props.endResize Start resize method.\n * @returns {string} Markup of the row.\n */\nconst Row = ({\n  columns,\n  row,\n  hovered,\n  resize,\n  selectTile,\n  deleteTile,\n  setHovered,\n  handleDrop,\n  setTileContent,\n  startResize,\n  endResize,\n}) => (\n  <Grid.Row className={`${hovered || ''}${resize ? ' resize' : ''}`}>\n    {columns.map((column, index) => [\n      <Column\n        key={`col-${join(map(column.tiles, tile => tile.url), '-')}`}\n        row={row}\n        column={index}\n        width={column.width}\n        tiles={column.tiles}\n        hovered={column.hovered}\n        selectTile={selectTile}\n        deleteTile={deleteTile}\n        setHovered={setHovered}\n        handleDrop={handleDrop}\n        setTileContent={setTileContent}\n      />,\n      index < columns.length - 1 &&\n        columns.length < 4 && (\n          <ColumnResize\n            key={`col-resize-${join(map(column.tiles, tile => tile.url), '-')}`}\n            row={row}\n            column={index}\n            columns={columns.length}\n            startResize={startResize}\n            endResize={endResize}\n          />\n        ),\n    ])}\n  </Grid.Row>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nRow.propTypes = {\n  columns: PropTypes.arrayOf(PropTypes.object).isRequired,\n  row: PropTypes.number.isRequired,\n  hovered: PropTypes.string,\n  resize: PropTypes.bool.isRequired,\n  selectTile: PropTypes.func.isRequired,\n  deleteTile: PropTypes.func.isRequired,\n  setHovered: PropTypes.func.isRequired,\n  handleDrop: PropTypes.func.isRequired,\n  setTileContent: PropTypes.func.isRequired,\n  startResize: PropTypes.func.isRequired,\n  endResize: PropTypes.func.isRequired,\n};\n\n/**\n * Default props.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nRow.defaultProps = {\n  hovered: null,\n};\n\nexport default Row;\n","/**\n * Tile component.\n * @module components/Tile\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, Label } from 'semantic-ui-react';\nimport { DragSource, DropTarget } from 'react-dnd';\nimport { findDOMNode } from 'react-dom';\nimport createInlineToolbarPlugin from 'draft-js-inline-toolbar-plugin';\nimport Editor from 'draft-js-plugins-editor';\n\nconst inlineToolbarPlugin = createInlineToolbarPlugin();\nconst { InlineToolbar } = inlineToolbarPlugin;\n\n/* eslint jsx-a11y/no-static-element-interactions: 0 */\n\n/**\n * Tile component class.\n * @function Tile\n * @param {Object} props Component properties.\n * @param {Object} props.content Content of the tile.\n * @param {string} props.type Type of the tile.\n * @param {string} props.label Label of the tile.\n * @param {bool} props.selected True if tile is selected.\n * @param {string} props.hovered Hovered direction.\n * @param {number} props.row Row index.\n * @param {number} props.column Column index.\n * @param {number} props.tile Tile index.\n * @param {bool} props.first True if first item.\n * @param {bool} props.last True if last item.\n * @param {func} props.selectTile Select tile method.\n * @param {func} props.deleteTile Delete tile method.\n * @param {func} props.setHovered Set hovered tile method.\n * @param {func} props.handleDrop Handle tile drop event.\n * @param {func} props.setTileContent Set tile content method.\n * @param {bool} props.isDragging Is dragging.\n * @returns {string} Markup of the tile.\n */\nconst Tile = ({\n  content,\n  type,\n  label,\n  selected,\n  hovered,\n  row,\n  column,\n  tile,\n  selectTile,\n  deleteTile,\n  setTileContent,\n  connectDragSource,\n  connectDropTarget,\n  isDragging,\n}) =>\n  connectDropTarget(\n    connectDragSource(\n      <div\n        className={`tile ${type}${hovered ? ` ${hovered}` : ''}${\n          selected ? ' selected' : ''\n        }${isDragging ? ' dragging' : ''}`}\n        onClick={() => selectTile(row, column, tile)}\n      >\n        {selected && (\n          <Label color=\"blue\" pointing=\"below\">\n            {label}\n          </Label>\n        )}\n        {selected && (\n          <Icon\n            name=\"close\"\n            onClick={event => {\n              event.stopPropagation();\n              deleteTile(row, column, tile);\n            }}\n          />\n        )}\n        {!__SERVER__ && (\n          <Editor\n            onChange={newContent =>\n              setTileContent(row, column, tile, newContent)\n            }\n            editorState={content}\n            plugins={[inlineToolbarPlugin]}\n          />\n        )}\n      </div>,\n    ),\n  );\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nTile.propTypes = {\n  /**\n   * Content of the tile\n   */\n  content: PropTypes.object.isRequired,\n  /**\n   * Type of the tile\n   */\n  type: PropTypes.string.isRequired,\n  /**\n   * Label of the tile\n   */\n  label: PropTypes.string.isRequired,\n  /**\n   * Selected state of the tile\n   */\n  selected: PropTypes.bool.isRequired,\n  /**\n   * Hovered state of the tile (left, right, top, bottom or none)\n   */\n  hovered: PropTypes.string,\n  /**\n   * Index of the row in the grid\n   */\n  row: PropTypes.number.isRequired,\n  /**\n   * Index of the column in the row\n   */\n  column: PropTypes.number.isRequired,\n  /**\n   * Index of the tile in the column\n   */\n  tile: PropTypes.number.isRequired,\n  /**\n   * Action to select a tile\n   */\n  selectTile: PropTypes.func.isRequired,\n  /**\n   * Action to delete a tile\n   */\n  deleteTile: PropTypes.func.isRequired,\n  /**\n   * Action to set the hovered state\n   */\n  setHovered: PropTypes.func.isRequired,\n  /**\n   * Action to handle a drop\n   */\n  handleDrop: PropTypes.func.isRequired,\n  /**\n   * Action to set the tile content\n   */\n  setTileContent: PropTypes.func.isRequired,\n};\n\n/**\n * Default props.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nTile.defaultProps = {\n  hovered: null,\n};\n\nexport default DropTarget(\n  'tile',\n  {\n    hover(props, monitor, component) {\n      if (\n        monitor.getItem().row === props.row &&\n        monitor.getItem().column === props.column &&\n        monitor.getItem().tile === props.tile\n      ) {\n        return;\n      }\n\n      const hoverBoundingRect = findDOMNode(component).getBoundingClientRect();\n      const clientOffset = monitor.getClientOffset();\n\n      const height = hoverBoundingRect.top - hoverBoundingRect.bottom;\n      const y = clientOffset.y - hoverBoundingRect.bottom - height / 2;\n      const yFactor = y / (height / 2);\n\n      const width = hoverBoundingRect.right - hoverBoundingRect.left;\n      const x = clientOffset.x - hoverBoundingRect.left - width / 2;\n      const xFactor = x / (width / 2);\n\n      let direction;\n      let type;\n      if (Math.abs(xFactor) > Math.abs(yFactor)) {\n        direction = xFactor > 0 ? 'right' : 'left';\n        type = 'column';\n      } else {\n        direction = yFactor > 0 ? 'top' : 'bottom';\n        type =\n          (props.first && yFactor > 0.8) || (props.last && yFactor < -0.8)\n            ? 'row'\n            : 'tile';\n      }\n      props.setHovered(props.row, props.column, props.tile, type, direction);\n    },\n  },\n  connect => ({\n    connectDropTarget: connect.dropTarget(),\n  }),\n)(\n  DragSource(\n    'tile',\n    {\n      beginDrag(props) {\n        props.selectTile(-1, -1, -1);\n        return {\n          row: props.row,\n          column: props.column,\n          tile: props.tile,\n        };\n      },\n      endDrag(props) {\n        props.handleDrop(props.row, props.column, props.tile);\n      },\n    },\n    (connect, monitor) => ({\n      connectDragSource: connect.dragSource(),\n      connectDragPreview: connect.dragPreview(),\n      isDragging: monitor.isDragging(),\n    }),\n  )(Tile),\n);\n","/**\n * Anontools component.\n * @module components/theme/Anontools/Anontools\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { List } from 'semantic-ui-react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { settings } from '~/config';\n\n@connect(state => ({\n  token: state.userSession.token,\n  content: state.content.data,\n}))\n/**\n * Anontools container class.\n * @class Anontools\n * @extends Component\n */\nexport default class Anontools extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    token: PropTypes.string,\n    content: PropTypes.shape({\n      '@id': PropTypes.string,\n    }),\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    token: null,\n    content: {\n      '@id': null,\n    },\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      !this.props.token && (\n        <List floated=\"right\" horizontal>\n          <Link\n            className=\"item\"\n            to={`/login${\n              this.props.content\n                ? `?return_url=${this.props.content['@id'].replace(\n                    settings.apiPath,\n                    '',\n                  )}`\n                : ''\n            }`}\n          >\n            <FormattedMessage id=\"Log in\" defaultMessage=\"Log in\" />\n          </Link>\n          <Link className=\"item\" to=\"/register\">\n            <FormattedMessage id=\"Register\" defaultMessage=\"Register\" />\n          </Link>\n        </List>\n      )\n    );\n  }\n}\n","/**\n * App container.\n * @module components/theme/App/App\n */\n\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { asyncConnect } from 'redux-connect';\nimport { Segment } from 'semantic-ui-react';\nimport { bindActionCreators } from 'redux';\nimport Raven from 'raven-js';\nimport renderRoutes from 'react-router-config/renderRoutes';\n\nimport Error from '../../../error';\n\nimport { Breadcrumbs, Footer, Header, Messages } from '../../../components';\nimport { BodyClass, getBaseUrl, getView } from '../../../helpers';\nimport {\n  getBreadcrumbs,\n  getContent,\n  getNavigation,\n  getTypes,\n  getWorkflow,\n  purgeMessages,\n} from '../../../actions';\n\n@connect(\n  (state, props) => ({ pathname: props.location.pathname }),\n  dispatch => bindActionCreators({ purgeMessages }, dispatch),\n)\n/**\n * @export\n * @class AppComponent\n * @extends {Component}\n */\nexport class AppComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    pathname: PropTypes.string.isRequired,\n    purgeMessages: PropTypes.func.isRequired,\n  };\n\n  state = {\n    hasError: false,\n    error: null,\n    errorInfo: null,\n  };\n\n  /**\n   * ComponentDidMount\n   * @method ComponentDidMount\n   * @param {string} error  The error\n   * @param {string} info The info\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (__CLIENT__ && process.env.SENTRY_DSN) {\n      Raven.config(process.env.SENTRY_DSN).install();\n    }\n  }\n\n  /**\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.pathname !== this.props.pathname) {\n      this.props.purgeMessages();\n\n      if (this.state.hasError) {\n        this.setState({ hasError: false });\n      }\n    }\n  }\n\n  /**\n   * ComponentDidCatch\n   * @method ComponentDidCatch\n   * @param {string} error  The error\n   * @param {string} info The info\n   * @returns {undefined}\n   */\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true, error, errorInfo: info });\n    if (__CLIENT__ && process.env.SENTRY_DSN) {\n      Raven.captureException(error, { extra: info });\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const path = getBaseUrl(this.props.pathname);\n    const action = getView(this.props.pathname);\n\n    return (\n      <Fragment>\n        <BodyClass className={`view-${action}view`} />\n        <Header pathname={path} />\n        <Breadcrumbs pathname={path} />\n        <Segment basic className=\"content-area\">\n          <main>\n            <Messages />\n            {this.state.hasError ? (\n              <Error\n                message={this.state.error.message}\n                stackTrace={this.state.errorInfo.componentStack}\n              />\n            ) : (\n              renderRoutes(this.props.route.routes)\n            )}\n          </main>\n        </Segment>\n        <Footer />\n      </Fragment>\n    );\n  }\n}\n\nexport default asyncConnect([\n  {\n    key: 'breadcrumbs',\n    promise: ({ location, store: { dispatch } }) =>\n      dispatch(getBreadcrumbs(getBaseUrl(location.pathname))),\n  },\n  {\n    key: 'content',\n    promise: ({ location, store: { dispatch } }) =>\n      dispatch(getContent(getBaseUrl(location.pathname))),\n  },\n  {\n    key: 'navigation',\n    promise: ({ location, store: { dispatch } }) =>\n      dispatch(getNavigation(getBaseUrl(location.pathname))),\n  },\n  {\n    key: 'types',\n    promise: ({ location, store: { dispatch } }) =>\n      dispatch(getTypes(getBaseUrl(location.pathname))),\n  },\n  {\n    key: 'workflow',\n    promise: ({ location, store: { dispatch } }) =>\n      dispatch(getWorkflow(getBaseUrl(location.pathname))),\n  },\n])(AppComponent);\n","/**\n * Breadcrumbs components.\n * @module components/theme/Breadcrumbs/Breadcrumbs\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { Breadcrumb, Container, Icon, Segment } from 'semantic-ui-react';\nimport { defineMessages, injectIntl, intlShape } from 'react-intl';\n\nimport { getBreadcrumbs } from '../../../actions';\nimport { getBaseUrl } from '../../../helpers';\n\nconst messages = defineMessages({\n  home: {\n    id: 'Home',\n    defaultMessage: 'Home',\n  },\n});\n\n@injectIntl\n@connect(\n  state => ({\n    items: state.breadcrumbs.items,\n  }),\n  dispatch => bindActionCreators({ getBreadcrumbs }, dispatch),\n)\n/**\n * Breadcrumbs container class.\n * @class Breadcrumbs\n * @extends Component\n */\nexport default class Breadcrumbs extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getBreadcrumbs: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n        url: PropTypes.string,\n      }),\n    ).isRequired,\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  componentWillMount() {\n    this.props.getBreadcrumbs(getBaseUrl(this.props.pathname));\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.pathname !== this.props.pathname) {\n      this.props.getBreadcrumbs(getBaseUrl(nextProps.pathname));\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Segment className=\"breadcrumbs\" secondary vertical>\n        <Container>\n          <Breadcrumb>\n            <Link\n              to=\"/\"\n              className=\"section\"\n              title={this.props.intl.formatMessage(messages.home)}\n            >\n              <Icon name=\"home\" />\n            </Link>\n            {this.props.items.map((item, index, items) => [\n              <Breadcrumb.Divider key={`divider-${item.url}`} />,\n              index < items.length - 1 ? (\n                <Link key={item.url} to={item.url} className=\"section\">\n                  {item.title}\n                </Link>\n              ) : (\n                <Breadcrumb.Section key={item.url} active>\n                  {item.title}\n                </Breadcrumb.Section>\n              ),\n            ])}\n          </Breadcrumb>\n        </Container>\n      </Segment>\n    );\n  }\n}\n","/**\n * Comment edit modal.\n * @module components/theme/Comments/CommentEditModal\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { defineMessages, injectIntl, intlShape } from 'react-intl';\n\nimport { updateComment } from '../../../actions';\nimport { ModalForm } from '../../../components';\n\nconst messages = defineMessages({\n  editComment: {\n    id: 'Edit comment',\n    defaultMessage: 'Edit comment',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  comment: {\n    id: 'Comment',\n    defaultMessage: 'Comment',\n  },\n});\n\n@injectIntl\n@connect(\n  state => ({\n    request: state.comments.update,\n  }),\n  dispatch => bindActionCreators({ updateComment }, dispatch),\n)\n/**\n * CommentEditModal class.\n * @class CommentEditModal\n * @extends Component\n */\nexport default class CommentEditModal extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    updateComment: PropTypes.func.isRequired,\n    id: PropTypes.string,\n    text: PropTypes.string,\n    request: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    open: PropTypes.bool.isRequired,\n    onOk: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    id: '',\n    text: '',\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs CommentEditModal\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded) {\n      this.props.onOk();\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {Object} data Form data\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.updateComment(this.props.id, data.text);\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      this.props.open && (\n        <ModalForm\n          open={this.props.open}\n          onSubmit={this.onSubmit}\n          onCancel={this.props.onCancel}\n          formData={{ text: this.props.text }}\n          title={this.props.intl.formatMessage(messages.editComment)}\n          schema={{\n            fieldsets: [\n              {\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n                fields: ['text'],\n              },\n            ],\n            properties: {\n              text: {\n                title: this.props.intl.formatMessage(messages.comment),\n                type: 'string',\n                description: '',\n              },\n            },\n            required: ['text'],\n          }}\n        />\n      )\n    );\n  }\n}\n","/**\n * Comments components.\n * @module components/theme/Comments/Comments\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport {\n  FormattedMessage,\n  defineMessages,\n  injectIntl,\n  intlShape,\n} from 'react-intl';\nimport moment from 'moment';\nimport { Button, Grid, Segment } from 'semantic-ui-react';\nimport { settings } from '~/config';\n\nimport { addComment, deleteComment, listComments } from '../../../actions';\nimport { getBaseUrl } from '../../../helpers';\nimport { CommentEditModal, Form } from '../../../components';\n\nconst messages = defineMessages({\n  comment: {\n    id: 'Comment',\n    defaultMessage: 'Comment',\n  },\n  commentDescription: {\n    id:\n      'You can add a comment by filling out the form below. Plain text formatting.',\n    defaultMessage:\n      'You can add a comment by filling out the form below. Plain text formatting.',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n});\n\n@injectIntl\n@connect(\n  state => ({\n    items: state.comments.items,\n    addRequest: state.comments.add,\n    deleteRequest: state.comments.delete,\n  }),\n  dispatch =>\n    bindActionCreators({ addComment, deleteComment, listComments }, dispatch),\n)\n/**\n * Comments container class.\n * @class Comments\n * @extends Component\n */\nexport default class Comments extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    addComment: PropTypes.func.isRequired,\n    deleteComment: PropTypes.func.isRequired,\n    listComments: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        author_name: PropTypes.string,\n        creation_date: PropTypes.string,\n        text: PropTypes.shape({\n          data: PropTypes.string,\n          'mime-type': PropTypes.string,\n        }),\n        is_deletable: PropTypes.bool,\n        is_editable: PropTypes.bool,\n      }),\n    ).isRequired,\n    addRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    deleteRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Comments\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onDelete = this.onDelete.bind(this);\n    this.onEdit = this.onEdit.bind(this);\n    this.onEditOk = this.onEditOk.bind(this);\n    this.onEditCancel = this.onEditCancel.bind(this);\n    this.state = {\n      showEdit: false,\n      editId: null,\n      editText: null,\n    };\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  componentWillMount() {\n    this.props.listComments(getBaseUrl(this.props.pathname));\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (\n      nextProps.pathname !== this.props.pathname ||\n      (this.props.addRequest.loading && nextProps.addRequest.loaded) ||\n      (this.props.deleteRequest.loading && nextProps.deleteRequest.loaded)\n    ) {\n      this.props.listComments(getBaseUrl(nextProps.pathname));\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {Object} formData Form data.\n   * @returns {undefined}\n   */\n  onSubmit(formData) {\n    this.props.addComment(getBaseUrl(this.props.pathname), formData.comment);\n  }\n\n  /**\n   * Delete handler\n   * @method onDelete\n   * @param {Object} event Event object.\n   * @param {string} value Delete value.\n   * @returns {undefined}\n   */\n  onDelete(event, { value }) {\n    this.props.deleteComment(value);\n  }\n\n  /**\n   * Edit handler\n   * @method onEdit\n   * @param {Object} event Event object.\n   * @param {string} value Delete value.\n   * @returns {undefined}\n   */\n  onEdit(event, { value }) {\n    this.setState({\n      showEdit: true,\n      editId: value.id,\n      editText: value.text,\n    });\n  }\n\n  /**\n   * On edit ok\n   * @method onEditOk\n   * @returns {undefined}\n   */\n  onEditOk() {\n    this.setState({\n      showEdit: false,\n      editId: null,\n      editText: null,\n    });\n    this.props.listComments(getBaseUrl(this.props.pathname));\n  }\n\n  /**\n   * On edit cancel\n   * @method onEditCancel\n   * @returns {undefined}\n   */\n  onEditCancel() {\n    this.setState({\n      showEdit: false,\n      editId: null,\n      editText: null,\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <div className=\"comments\">\n        <CommentEditModal\n          open={this.state.showEdit}\n          onCancel={this.onEditCancel}\n          onOk={this.onEditOk}\n          id={this.state.editId}\n          text={this.state.editText}\n        />\n        {this.props.items.map(item => [\n          <div className=\"comment\" key={item['@id']}>\n            <Grid stackable>\n              <Grid.Column width={6}>\n                <FormattedMessage\n                  id=\"{user} says:\"\n                  defaultMessage=\"{user} says:\"\n                  values={{\n                    user: <span>{item.author_name}</span>,\n                  }}\n                />\n              </Grid.Column>\n              <Grid.Column width={6} textAlign=\"right\">\n                <span title={moment(item.creation_date).format('LLLL')}>\n                  {moment(item.creation_date).fromNow()}\n                </span>\n              </Grid.Column>\n            </Grid>\n            <Segment clearing>\n              {item.text.data}\n              {item.is_deletable && (\n                <Button\n                  onClick={this.onDelete}\n                  value={item['@id'].replace(settings.apiPath, '')}\n                  color=\"red\"\n                  floated=\"right\"\n                >\n                  <FormattedMessage id=\"Delete\" defaultMessage=\"Delete\" />\n                </Button>\n              )}\n              {item.is_editable && (\n                <Button\n                  onClick={this.onEdit}\n                  floated=\"right\"\n                  value={{\n                    id: item['@id'].replace(settings.apiPath, ''),\n                    text: item.text.data,\n                  }}\n                >\n                  <FormattedMessage id=\"Edit\" defaultMessage=\"Edit\" />\n                </Button>\n              )}\n            </Segment>\n            <br />\n          </div>,\n        ])}\n        <Form\n          onSubmit={this.onSubmit}\n          submitLabel={this.props.intl.formatMessage(messages.comment)}\n          resetAfterSubmit\n          title={this.props.intl.formatMessage(messages.comment)}\n          schema={{\n            fieldsets: [\n              {\n                fields: ['comment'],\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n              },\n            ],\n            properties: {\n              comment: {\n                title: this.props.intl.formatMessage(messages.comment),\n                type: 'string',\n                widget: 'textarea',\n              },\n            },\n            required: ['comment'],\n          }}\n        />\n      </div>\n    );\n  }\n}\n","/**\n * Footer component.\n * @module components/theme/Footer/Footer\n */\n\nimport React from 'react';\nimport { Container, Divider, List, Segment } from 'semantic-ui-react';\nimport {\n  FormattedMessage,\n  defineMessages,\n  injectIntl,\n  intlShape,\n} from 'react-intl';\n\nconst messages = defineMessages({\n  copyright: {\n    id: 'Copyright',\n    defaultMessage: 'Copyright',\n  },\n});\n\n/**\n * Component to display the footer.\n * @function Footer\n * @param {Object} intl Intl object\n * @returns {string} Markup of the component\n */\nconst Footer = ({ intl }) => (\n  <Segment vertical padded inverted color=\"grey\" textAlign=\"center\">\n    <Container>\n      <Segment basic inverted color=\"grey\" className=\"discreet\">\n        <FormattedMessage\n          id=\"The {plonecms} is {copyright} 2000-{current_year} by the {plonefoundation} and friends.\"\n          defaultMessage=\"The {plonecms} is {copyright} 2000-{current_year} by the {plonefoundation} and friends.\"\n          values={{\n            plonecms: (\n              <FormattedMessage\n                id=\"Plone{reg} Open Source CMS/WCM\"\n                defaultMessage=\"Plone{reg} Open Source CMS/WCM\"\n                values={{ reg: <sup>®</sup> }}\n              />\n            ),\n            copyright: (\n              <abbr title={intl.formatMessage(messages.copyright)}>©</abbr>\n            ),\n            current_year: new Date().getFullYear(),\n            plonefoundation: (\n              <a className=\"item\" href=\"http://plone.org/foundation\">\n                <FormattedMessage\n                  id=\"Plone Foundation\"\n                  defaultMessage=\"Plone Foundation\"\n                />\n              </a>\n            ),\n          }}\n        />{' '}\n        <FormattedMessage\n          id=\"Distributed under the {license}.\"\n          defaultMessage=\"Distributed under the {license}.\"\n          values={{\n            license: (\n              <a\n                className=\"item\"\n                href=\"http://creativecommons.org/licenses/GPL/2.0/\"\n              >\n                <FormattedMessage\n                  id=\"GNU GPL license\"\n                  defaultMessage=\"GNU GPL license\"\n                />\n              </a>\n            ),\n          }}\n        />\n      </Segment>\n      <List horizontal inverted>\n        <List.Item href=\"/sitemap\">\n          <FormattedMessage id=\"Site Map\" defaultMessage=\"Site Map\" />\n        </List.Item>\n        <List.Item href=\"/accessibility-info\">\n          <FormattedMessage id=\"Accessibility\" defaultMessage=\"Accessibility\" />\n        </List.Item>\n        <List.Item href=\"/contact\">\n          <FormattedMessage id=\"Contact\" defaultMessage=\"Contact\" />\n        </List.Item>\n        <List.Item href=\"http://plone.com\">\n          <FormattedMessage\n            id=\"Powered by Plone & Python\"\n            defaultMessage=\"Powered by Plone & Python\"\n          />\n        </List.Item>\n      </List>\n    </Container>\n  </Segment>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nFooter.propTypes = {\n  /**\n   * i18n object\n   */\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(Footer);\n","/**\n * Header component.\n * @module components/theme/Header/Header\n */\n\nimport React, { Component } from 'react';\nimport { Container, Grid, Segment } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Anontools, Logo, Navigation, SearchWidget } from '../../../components';\n\n@connect(state => ({\n  token: state.userSession.token,\n}))\n/**\n * Header component class.\n * @class Header\n * @extends Component\n */\nexport default class Header extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    token: PropTypes.string,\n    pathname: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    token: null,\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Segment basic className=\"header-wrapper\">\n        <Container>\n          <div className=\"header\">\n            <div className=\"logo-nav-wrapper\">\n              <div className=\"logo\">\n                <Logo />\n              </div>\n              <div className=\"navigation\">\n                <Navigation pathname={this.props.pathname} />\n              </div>\n            </div>\n            {!this.props.token && (\n              <div className=\"tools\">\n                <Anontools />\n              </div>\n            )}\n            <div className=\"search\">\n              <SearchWidget pathname={this.props.pathname} />\n            </div>\n          </div>\n        </Container>\n      </Segment>\n    );\n  }\n}\n","/**\n * Icon component.\n * @module components/theme/Icon/Icon\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst defaultSize = '36px';\n\n/**\n * Component to display an Icon.\n * @function Field\n * @param {Object} props Component properties.\n * @param {string} props.name Name source object.\n * @param {string} props.size Size of the Icon (in px).\n * @param {string} props.color Color of the Icon.\n * @param {string} props.className className to add to the component.\n * @param {string} props.title Title (a11y).\n * @returns {string} Markup of the component.\n */\nconst Icon = ({ name, size, color, className, title, onClick }) => (\n  <svg\n    xmlns={name.attributes.xmlns}\n    viewBox={name.attributes.viewBox}\n    style={{ height: size, width: 'auto', fill: color || 'currentColor' }}\n    className={className ? `icon ${className}` : 'icon'}\n    onClick={onClick}\n    dangerouslySetInnerHTML={{\n      __html: title ? `<title>${title}</title>${name.content}` : name.content,\n    }}\n  />\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nIcon.propTypes = {\n  name: PropTypes.shape({\n    xmlns: PropTypes.string,\n    viewBox: PropTypes.string,\n    content: PropTypes.string,\n  }).isRequired,\n  size: PropTypes.string,\n  color: PropTypes.string,\n  className: PropTypes.string,\n  title: PropTypes.string,\n  onClick: PropTypes.func,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nIcon.defaultProps = {\n  size: defaultSize,\n  color: null,\n  className: null,\n  title: null,\n  onClick: null,\n};\n\nexport default Icon;\n","/**\n * Login container.\n * @module components/theme/Login/Login\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { asyncConnect } from 'redux-connect';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Router, Link } from 'react-router-dom';\nimport { isEmpty } from 'lodash';\nimport {\n  Container,\n  Button,\n  Form,\n  Input,\n  Message,\n  Segment,\n  Grid,\n} from 'semantic-ui-react';\nimport {\n  FormattedMessage,\n  defineMessages,\n  injectIntl,\n  intlShape,\n} from 'react-intl';\nimport qs from 'query-string';\nimport { withRouter } from 'react-router-dom';\n\nimport { login, purgeMessages } from '../../../actions';\n\nconst messages = defineMessages({\n  login: {\n    id: 'Log in',\n    defaultMessage: 'Log in',\n  },\n  loginName: {\n    id: 'Login Name',\n    defaultMessage: 'Login Name',\n  },\n  password: {\n    id: 'Password',\n    defaultMessage: 'Password',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  error: {\n    id: 'Error',\n    defaultMessage: 'Error',\n  },\n});\n\n@injectIntl\n@connect(\n  (state, props) => ({\n    error: state.userSession.login.error,\n    loading: state.userSession.login.loading,\n    token: state.userSession.token,\n    returnUrl: qs.parse(props.location.search).return_url || '/',\n  }),\n  dispatch => bindActionCreators({ login, purgeMessages }, dispatch),\n)\n/**\n * LoginComponent class.\n * @class LoginComponent\n * @extends Component\n */\nexport class LoginComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    login: PropTypes.func.isRequired,\n    purgeMessages: PropTypes.func.isRequired,\n    error: PropTypes.shape({\n      message: PropTypes.string,\n    }),\n    loading: PropTypes.bool,\n    token: PropTypes.string, // eslint-disable-line react/no-unused-prop-types\n    intl: intlShape.isRequired,\n    returnUrl: PropTypes.string,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    error: null,\n    loading: null,\n    token: null,\n    returnUrl: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.onLogin = this.onLogin.bind(this);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.token) {\n      this.props.history.push(this.props.returnUrl || '/');\n      this.props.purgeMessages();\n    }\n  }\n\n  /**\n   * On login handler\n   * @method onLogin\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n  onLogin(event) {\n    this.props.login(\n      document.getElementsByName('login')[0].value,\n      document.getElementsByName('password')[0].value,\n    );\n    event.preventDefault();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <div id=\"page-login\">\n        <Helmet title=\"Login\" />\n        <Container text>\n          <Form method=\"post\" onSubmit={this.onLogin}>\n            <Segment.Group raised>\n              <Segment className=\"primary\">\n                <FormattedMessage id=\"Log In\" defaultMessage=\"Login Name\" />\n              </Segment>\n              {this.props.error && (\n                <Message\n                  icon=\"warning\"\n                  negative\n                  attached\n                  header={this.props.intl.formatMessage(messages.error)}\n                  content={this.props.error.message}\n                />\n              )}\n              <Segment secondary>\n                <FormattedMessage\n                  id=\"Sign in to start session\"\n                  defaultMessage=\"Sign in to start session\"\n                />\n              </Segment>\n              <Segment className=\"form\">\n                <Form.Field inline className=\"help\">\n                  <Grid>\n                    <Grid.Row stretched>\n                      <Grid.Column width=\"4\">\n                        <div className=\"wrapper\">\n                          <label htmlFor=\"login\">\n                            <FormattedMessage\n                              id=\"Login Name\"\n                              defaultMessage=\"Login Name\"\n                            />\n                          </label>\n                        </div>\n                      </Grid.Column>\n                      <Grid.Column width=\"8\">\n                        <Input\n                          id=\"login\"\n                          name=\"login\"\n                          placeholder={this.props.intl.formatMessage(\n                            messages.loginName,\n                          )}\n                          tabIndex={1}\n                        />\n                      </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row stretched>\n                      <Grid.Column stretched width=\"12\">\n                        <p className=\"help\">\n                          <FormattedMessage\n                            id=\"If you you do not have an account here, head over to the {registrationform}.\"\n                            defaultMessage=\"If you you do not have an account here, head over to the {registrationform}.\"\n                            values={{\n                              registrationform: (\n                                <Link to=\"/register\">\n                                  <FormattedMessage\n                                    id=\"registration form\"\n                                    defaultMessage=\"registration form\"\n                                  />\n                                </Link>\n                              ),\n                            }}\n                          />\n                        </p>\n                      </Grid.Column>\n                    </Grid.Row>\n                  </Grid>\n                </Form.Field>\n                <Form.Field inline className=\"help\">\n                  <Grid>\n                    <Grid.Row stretched>\n                      <Grid.Column stretched width=\"4\">\n                        <div className=\"wrapper\">\n                          <label htmlFor=\"password\">\n                            <FormattedMessage\n                              id=\"Password\"\n                              defaultMessage=\"Password\"\n                            />\n                          </label>\n                        </div>\n                      </Grid.Column>\n                      <Grid.Column stretched width=\"8\">\n                        <Input\n                          type=\"password\"\n                          id=\"password\"\n                          name=\"password\"\n                          placeholder={this.props.intl.formatMessage(\n                            messages.password,\n                          )}\n                          tabIndex={2}\n                        />\n                      </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row stretched>\n                      <Grid.Column stretched width=\"12\">\n                        <p className=\"help\">\n                          <FormattedMessage\n                            id=\"If you have forgotten your password, {forgotpassword}\"\n                            defaultMessage=\"If you have forgotten your password, {forgotpassword}\"\n                            values={{\n                              forgotpassword: (\n                                <Link to=\"/password-reset\">\n                                  <FormattedMessage\n                                    id=\"we can send you a new one\"\n                                    defaultMessage=\"we can send you a new one\"\n                                  />\n                                </Link>\n                              ),\n                            }}\n                          />\n                        </p>\n                      </Grid.Column>\n                    </Grid.Row>\n                  </Grid>\n                </Form.Field>\n              </Segment>\n              <Segment clearing className=\"actions\">\n                <Button\n                  basic\n                  circular\n                  primary\n                  id=\"login-form-submit\"\n                  icon=\"arrow right\"\n                  floated=\"right\"\n                  size=\"big\"\n                  type=\"submit\"\n                  title={this.props.intl.formatMessage(messages.login)}\n                  loading={this.props.loading}\n                />\n                <Button\n                  basic\n                  circular\n                  secondary\n                  as={Link}\n                  to=\"/\"\n                  id=\"login-form-cancel\"\n                  icon=\"remove\"\n                  floated=\"right\"\n                  size=\"big\"\n                  title={this.props.intl.formatMessage(messages.cancel)}\n                />\n              </Segment>\n            </Segment.Group>\n          </Form>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default asyncConnect([\n  {\n    key: 'userSession',\n    promise: ({ store: { dispatch, getState } }) => {\n      const { form } = getState();\n      if (!isEmpty(form)) {\n        return dispatch(login(form.login, form.password));\n      }\n      return Promise.resolve({});\n    },\n  },\n])(withRouter(LoginComponent));\n","/**\n * Logo component.\n * @module components/theme/Logo/Logo\n */\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { defineMessages, injectIntl, intlShape } from 'react-intl';\nimport { Image } from 'semantic-ui-react';\n\nimport LogoImage from './Logo.svg';\n\nconst messages = defineMessages({\n  site: {\n    id: 'Site',\n    defaultMessage: 'Site',\n  },\n  plonesite: {\n    id: 'Plone Site',\n    defaultMessage: 'Plone Site',\n  },\n});\n\n/**\n * Logo component class.\n * @function Logo\n * @param {Object} intl Intl object\n * @returns {string} Markup of the component.\n */\nconst Logo = ({ intl }) => (\n  <Link to=\"/\" title={intl.formatMessage(messages.site)}>\n    <Image\n      src={LogoImage}\n      alt={intl.formatMessage(messages.plonesite)}\n      title={intl.formatMessage(messages.plonesite)}\n      height={32}\n    />\n  </Link>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nLogo.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(Logo);\n","module.exports = __webpack_public_path__ + \"static/media/Logo.912d8f6d.svg\";","/**\n * Login container.\n * @module components/theme/Logout/Logout\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { asyncConnect } from 'redux-connect';\nimport qs from 'query-string';\n\nimport { Login } from '../../../components';\nimport { logout, purgeMessages } from '../../../actions';\n\n@connect(\n  (state, props) => ({\n    query: qs.parse(props.location.search),\n  }),\n  dispatch => bindActionCreators({ logout, purgeMessages }, dispatch),\n)\n/**\n * LogoutComponent class.\n * @class LogoutComponent\n * @extends Component\n */\nexport class LogoutComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    logout: PropTypes.func.isRequired,\n    purgeMessages: PropTypes.func.isRequired,\n    query: PropTypes.shape({\n      return_url: PropTypes.string,\n    }),\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    query: null,\n  };\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  componentWillMount() {\n    this.props.logout();\n    this.props.purgeMessages();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return <Login location={{ query: this.props.location.query }} />;\n  }\n}\n\nexport default asyncConnect([\n  {\n    key: 'userSession',\n    promise: ({ store: { dispatch } }) => dispatch(logout()),\n  },\n])(LogoutComponent);\n","/**\n * Navigation components.\n * @module components/theme/Navigation/Navigation\n */\n\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { isMatch } from 'lodash';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { defineMessages, injectIntl, intlShape } from 'react-intl';\nimport { Menu, Segment } from 'semantic-ui-react';\n\nimport { Anontools } from '../../../components';\nimport { getNavigation } from '../../../actions';\nimport { BodyClass, getBaseUrl } from '../../../helpers';\n\nconst messages = defineMessages({\n  closeMobileMenu: {\n    id: 'Close menu',\n    defaultMessage: 'Close menu',\n  },\n  openMobileMenu: {\n    id: 'Open menu',\n    defaultMessage: 'Open menu',\n  },\n});\n\n@injectIntl\n@connect(\n  state => ({\n    items: state.navigation.items,\n  }),\n  dispatch => bindActionCreators({ getNavigation }, dispatch),\n)\n/**\n * Navigation container class.\n * @class Navigation\n * @extends Component\n */\nexport default class Navigation extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getNavigation: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n        url: PropTypes.string,\n      }),\n    ).isRequired,\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Navigation\n   */\n  constructor(props) {\n    super(props);\n    this.toggleMobileMenu = this.toggleMobileMenu.bind(this);\n    this.closeMobileMenu = this.closeMobileMenu.bind(this);\n    this.state = {\n      isMobileMenuOpen: false,\n    };\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  componentWillMount() {\n    this.props.getNavigation(getBaseUrl(this.props.pathname));\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.pathname !== this.props.pathname) {\n      this.props.getNavigation(getBaseUrl(nextProps.pathname));\n    }\n  }\n\n  /**\n   * Check if menu is active\n   * @method isActive\n   * @param {string} url Url of the navigation item.\n   * @returns {bool} Is menu active?\n   */\n  isActive(url) {\n    return (\n      (url === '' && this.props.pathname === '/') ||\n      (url !== '' && isMatch(this.props.pathname.split('/'), url.split('/')))\n    );\n  }\n\n  /**\n   * Toggle mobile menu's open state\n   * @method toggleMobileMenu\n   * @returns {undefined}\n   */\n  toggleMobileMenu() {\n    this.setState({ isMobileMenuOpen: !this.state.isMobileMenuOpen });\n  }\n\n  /**\n   * Close mobile menu\n   * @method closeMobileMenu\n   * @returns {undefined}\n   */\n  closeMobileMenu() {\n    if (!this.state.isMobileMenuOpen) {\n      return;\n    }\n    this.setState({ isMobileMenuOpen: false });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Fragment>\n        <div className=\"hamburger-wrapper mobile only\">\n          <button\n            className={\n              this.state.isMobileMenuOpen ? 'hamburger active' : 'hamburger'\n            }\n            title={\n              this.state.isMobileMenuOpen\n                ? this.props.intl.formatMessage(messages.closeMobileMenu, {\n                    type: this.props.type,\n                  })\n                : this.props.intl.formatMessage(messages.openMobileMenu, {\n                    type: this.props.type,\n                  })\n            }\n            type=\"button\"\n            onClick={this.toggleMobileMenu}\n          >\n            <span className=\"hamburger-box\">\n              <span className=\"hamburger-inner\" />\n            </span>\n          </button>\n        </div>\n        <Menu\n          stackable\n          pointing\n          secondary\n          className={\n            this.state.isMobileMenuOpen\n              ? 'open'\n              : 'tablet computer large screen widescreen only'\n          }\n          onClick={this.closeMobileMenu}\n        >\n          {this.props.items.map(item => (\n            <Link\n              to={item.url === '' ? '/' : item.url}\n              key={item.url}\n              className={this.isActive(item.url) ? 'item active' : 'item'}\n            >\n              {item.title}\n            </Link>\n          ))}\n        </Menu>\n      </Fragment>\n    );\n  }\n}\n","/**\n * Home container.\n * @module components/theme/NotFound/NotFound\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { Container } from 'semantic-ui-react';\n\n/**\n * Not found function.\n * @function NotFound\n * @returns {string} Markup of the not found page.\n */\nconst NotFound = () => (\n  <Container className=\"view-wrapper\">\n    <h1>\n      <FormattedMessage\n        id=\"This page does not seem to exist…\"\n        defaultMessage=\"This page does not seem to exist…\"\n      />\n    </h1>\n    <p className=\"description\">\n      <FormattedMessage\n        id=\"We apologize for the inconvenience, but the page you were trying to access is not at this address. You can use the links below to help you find what you are looking for.\"\n        defaultMessage=\"We apologize for the inconvenience, but the page you were trying to access is not at this address. You can use the links below to help you find what you are looking for.\"\n      />\n    </p>\n    <p>\n      <FormattedMessage\n        id=\"If you are certain you have the correct web address but are encountering an error, please contact the {site_admin}.\"\n        defaultMessage=\"If you are certain you have the correct web address but are encountering an error, please contact the {site_admin}.\"\n        values={{\n          site_admin: (\n            <Link to=\"/contact-info\">\n              <FormattedMessage\n                id=\"Site Administration\"\n                defaultMessage=\"Site Administration\"\n              />\n            </Link>\n          ),\n        }}\n      />\n    </p>\n    <p>\n      <FormattedMessage id=\"Thank you.\" defaultMessage=\"Thank you.\" />\n    </p>\n  </Container>\n);\n\nexport default NotFound;\n","/**\n * Pagination component.\n * @module components/theme/Pagination/Pagination\n */\n\nimport React from 'react';\nimport { Menu } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\nimport { map } from 'lodash';\n\n/**\n * Component to display pagination.\n * @function Pagination\n * @param {number} current Current page\n * @param {number} total Total amount of pages\n * @param {number} pageSize Current page size\n * @param {Array} pageSizes Available page sizes\n * @param {function} onChangePage On page change handler\n * @param {function} onChangePageSize On page size change handler\n * @returns {string} Markup of the component.\n */\nconst Pagination = ({\n  current,\n  total,\n  pageSize,\n  pageSizes,\n  onChangePage,\n  onChangePageSize,\n}) => (\n  <Menu secondary attached>\n    <Menu.Menu>\n      {current > 0 && (\n        <Menu.Item\n          value={current - 1}\n          icon=\"chevron left\"\n          onClick={onChangePage}\n        />\n      )}\n      {current > 2 && (\n        <Menu.Item value={0} onClick={onChangePage}>\n          1\n        </Menu.Item>\n      )}\n      {current > 3 && <Menu.Item disabled>...</Menu.Item>}\n      {current > 1 && (\n        <Menu.Item value={current - 2} onClick={onChangePage}>\n          {current - 1}\n        </Menu.Item>\n      )}\n      {current > 0 && (\n        <Menu.Item value={current - 1} onClick={onChangePage}>\n          {current}\n        </Menu.Item>\n      )}\n      {total > 1 && (\n        <Menu.Item value={current} active onClick={onChangePage}>\n          {current + 1}\n        </Menu.Item>\n      )}\n      {total > current + 1 && (\n        <Menu.Item value={current + 1} onClick={onChangePage}>\n          {current + 2}\n        </Menu.Item>\n      )}\n      {total > current + 2 && (\n        <Menu.Item value={current + 2} onClick={onChangePage}>\n          {current + 3}\n        </Menu.Item>\n      )}\n      {total > current + 4 && <Menu.Item disabled>...</Menu.Item>}\n      {total > current + 3 && (\n        <Menu.Item value={total - 1} onClick={onChangePage}>\n          {total}\n        </Menu.Item>\n      )}\n      {current < total - 1 && (\n        <Menu.Item\n          value={current + 1}\n          icon=\"chevron right\"\n          onClick={onChangePage}\n        />\n      )}\n    </Menu.Menu>\n    {pageSize && (\n      <Menu.Menu position=\"right\">\n        <Menu.Item>Show:</Menu.Item>\n        {map(pageSizes, size => (\n          <Menu.Item\n            key={size}\n            value={size}\n            active={size === pageSize}\n            onClick={onChangePageSize}\n          >\n            {size}\n          </Menu.Item>\n        ))}\n      </Menu.Menu>\n    )}\n  </Menu>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nPagination.propTypes = {\n  /**\n   * Current page\n   */\n  current: PropTypes.number.isRequired,\n  /**\n   * Total number of pages\n   */\n  total: PropTypes.number.isRequired,\n  /**\n   * Number of items per page\n   */\n  pageSize: PropTypes.number,\n  /**\n   * Page sizes to choose from\n   */\n  pageSizes: PropTypes.arrayOf(PropTypes.number),\n  /**\n   * Handler called when changing the page\n   */\n  onChangePage: PropTypes.func.isRequired,\n  /**\n   * Handler called when changing the pagesize\n   */\n  onChangePageSize: PropTypes.func,\n};\n\n/**\n * Default props.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nPagination.defaultProps = {\n  pageSize: null,\n  pageSizes: [],\n  onChangePageSize: null,\n};\n\nexport default Pagination;\n","/**\n * PasswordReset component.\n * @module components/theme/PasswordReset/PasswordReset\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Router, Link } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport Helmet from 'react-helmet';\nimport { Container } from 'semantic-ui-react';\nimport {\n  FormattedMessage,\n  defineMessages,\n  injectIntl,\n  intlShape,\n} from 'react-intl';\n\nimport { Form } from '../../../components';\nimport { addMessage, setInitialPassword } from '../../../actions';\n\nconst messages = defineMessages({\n  title: {\n    id: 'Set your password',\n    defaultMessage: 'Set your password',\n  },\n  description: {\n    id: 'Please fill out the form below to set your password.',\n    defaultMessage: 'Please fill out the form below to set your password.',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  fullnameTitle: {\n    id: 'Full Name',\n    defaultMessage: 'Full Name',\n  },\n  fullnameDescription: {\n    id: 'Enter full name, e.g. John Smith.',\n    defaultMessage: 'Enter full name, e.g. John Smith.',\n  },\n  emailTitle: {\n    id: 'My email address is',\n    defaultMessage: 'My email address is',\n  },\n  emailDescription: {\n    id: 'Enter your email address for verification.',\n    defaultMessage: 'Enter your email address for verification.',\n  },\n  passwordTitle: {\n    id: 'New password',\n    defaultMessage: 'New password',\n  },\n  passwordDescription: {\n    id: 'Enter your new password. Minimum 5 characters.',\n    defaultMessage: 'Enter your new password. Minimum 5 characters.',\n  },\n  passwordRepeatTitle: {\n    id: 'Confirm password',\n    defaultMessage: 'Confirm password',\n  },\n  passwordsDoNotMatch: {\n    id: 'Passwords do not match.',\n    defaultMessage: 'Passwords do not match.',\n  },\n  mailDoNotMatch: {\n    id: 'E-mail addresses do not match.',\n    defaultMessage: 'E-mail addresses do not match.',\n  },\n  passwordRepeatDescription: {\n    id: 'Re-enter the password. Make sure the passwords are identical.',\n    defaultMessage:\n      'Re-enter the password. Make sure the passwords are identical.',\n  },\n  setMyPassword: {\n    id: 'Set my password',\n    defaultMessage: 'Set my password',\n  },\n  successRedirectToLoginTitle: {\n    id: 'Account activation completed',\n    defaultMessage: 'Account activation completed',\n  },\n  successRedirectToLoginBody: {\n    id:\n      'Your password has been set successfully. You may now {link} with your new password.',\n    defaultMessage:\n      'Your password has been set successfully. You may now {link} with your new password.',\n  },\n});\n\n@injectIntl\n@connect(\n  (state, props) => ({\n    loading: state.users.initial.loading,\n    loaded: state.users.initial.loaded,\n    error: state.users.initial.error,\n    token: props.match.params.token,\n  }),\n  dispatch => bindActionCreators({ addMessage, setInitialPassword }, dispatch),\n)\n/**\n * PasswordReset class.\n * @class PasswordReset\n * @extends Component\n */\nexport default class PasswordReset extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    loaded: PropTypes.bool.isRequired,\n    error: PropTypes.string,\n    token: PropTypes.string.isRequired,\n    addMessage: PropTypes.func.isRequired,\n    setInitialPassword: PropTypes.func.isRequired,\n    location: PropTypes.shape({ search: PropTypes.string }).isRequired,\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    error: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Controlpanel\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      error: null,\n      isSuccessful: false,\n    };\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  componentWillMount() {}\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (this.props.loading && nextProps.loaded) {\n      this.setState({ isSuccessful: true });\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @param {object} event Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    if (data.password === data.passwordRepeat) {\n      this.props.setInitialPassword(\n        data.email,\n        this.props.token,\n        data.password,\n      );\n      this.setState({\n        error: null,\n      });\n    } else {\n      this.setState({\n        error: {\n          message: this.props.intl.formatMessage(messages.passwordsDoNotMatch),\n        },\n      });\n    }\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    Router.goBack();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.state.isSuccessful) {\n      return (\n        <Container>\n          <h1 className=\"documentFirstHeading\">\n            <FormattedMessage\n              id=\"Account activation completed\"\n              defaultMessage=\"Account activation completed\"\n            />\n          </h1>\n          <p className=\"description\">\n            <FormattedMessage\n              id=\"Your password has been set successfully. You may now {link} with your new password.\"\n              defaultMessage=\"Your password has been set successfully. You may now {link} with your new password.\"\n              values={{\n                link: (\n                  <Link to=\"/login\">\n                    {this.props.intl.formatMessage({ id: 'Log In' })}\n                  </Link>\n                ),\n              }}\n            />\n          </p>\n        </Container>\n      );\n    }\n    if (this.props.token) {\n      return (\n        <div id=\"page-password-reset\">\n          <Helmet title=\"Password reset\" />\n          <Container>\n            <Form\n              title={this.props.intl.formatMessage(messages.title)}\n              description={this.props.intl.formatMessage(messages.description)}\n              onSubmit={this.onSubmit}\n              onCancel={this.onCancel}\n              error={this.state.error || this.props.error}\n              schema={{\n                fieldsets: [\n                  {\n                    id: 'default',\n                    title: this.props.intl.formatMessage(messages.default),\n                    fields: ['email', 'password', 'passwordRepeat'],\n                  },\n                ],\n                properties: {\n                  email: {\n                    type: 'string',\n                    title: this.props.intl.formatMessage(messages.emailTitle),\n                    description: this.props.intl.formatMessage(\n                      messages.emailDescription,\n                    ),\n                  },\n                  password: {\n                    description: this.props.intl.formatMessage(\n                      messages.passwordDescription,\n                    ),\n                    title: this.props.intl.formatMessage(\n                      messages.passwordTitle,\n                    ),\n                    type: 'string',\n                    widget: 'password',\n                  },\n                  passwordRepeat: {\n                    description: this.props.intl.formatMessage(\n                      messages.passwordRepeatDescription,\n                    ),\n                    title: this.props.intl.formatMessage(\n                      messages.passwordRepeatTitle,\n                    ),\n                    type: 'string',\n                    widget: 'password',\n                  },\n                },\n                submitLabel: this.props.intl.formatMessage(\n                  messages.setMyPassword,\n                ),\n                required: ['fullname', 'password', 'passwordRepeat'],\n              }}\n            />\n          </Container>\n        </div>\n      );\n    }\n    return <div />;\n  }\n}\n","/**\n * RequestPasswordReset component.\n * @module components/theme/RequestPasswordReset/RequestPasswordReset\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Router } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport Helmet from 'react-helmet';\nimport { Container } from 'semantic-ui-react';\nimport {\n  FormattedMessage,\n  defineMessages,\n  injectIntl,\n  intlShape,\n} from 'react-intl';\n\nimport { Form } from '../../../components';\nimport { resetPassword } from '../../../actions';\n\nconst messages = defineMessages({\n  title: {\n    id: 'box_forgot_password_option',\n    defaultMessage: 'Forgot your password?',\n  },\n  description: {\n    id: 'description_lost_password',\n    defaultMessage:\n      'For security reasons, we store your password encrypted, and cannot mail it to you. If you would like to reset your password, fill out the form below and we will send you an email at the address you gave when you registered to start the process of resetting your password.',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  emailTitle: {\n    id: 'label_my_email_address_is',\n    defaultMessage: 'My email address is',\n  },\n  sendEmail: {\n    id: 'Start password reset',\n    defaultMessage: 'Start password reset',\n  },\n  emailrequired: {\n    id: 'Your email is required for reset your password.',\n    defaultMessage: 'Your email is required for reset your password.',\n  },\n});\n\n@injectIntl\n@connect(\n  state => ({\n    loading: state.users.reset.loading,\n    loaded: state.users.reset.loaded,\n    error: state.users.reset.error,\n  }),\n  dispatch => bindActionCreators({ resetPassword }, dispatch),\n)\n/**\n * RequestPasswordReset class.\n * @class RequestPasswordReset\n * @extends Component\n */\nexport default class RequestPasswordReset extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    loaded: PropTypes.bool.isRequired,\n    error: PropTypes.string,\n    resetPassword: PropTypes.func.isRequired,\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    error: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Controlpanel\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      error: null,\n      isSuccessful: false,\n    };\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  componentWillMount() {}\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (this.props.loading && nextProps.loaded) {\n      this.setState({ isSuccessful: true });\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @param {object} event Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    if (data.email) {\n      this.props.resetPassword(data.email);\n      this.setState({\n        error: null,\n      });\n    } else {\n      this.setState({\n        error: {\n          message: this.props.intl.formatMessage(messages.emailrequired),\n        },\n      });\n    }\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    Router.goBack();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.state.isSuccessful) {\n      return (\n        <Container>\n          <h1 className=\"documentFirstHeading\">\n            <FormattedMessage\n              id=\"heading_sent_password\"\n              defaultMessage=\"Password reset confirmation sent\"\n            />\n          </h1>\n          <p className=\"description\">\n            <FormattedMessage\n              id=\"description_sent_password\"\n              defaultMessage=\"Your password reset request has been mailed. It should arrive in your mailbox shortly. When you receive the message, visit the address it contains to reset your password.\"\n            />\n          </p>\n        </Container>\n      );\n    }\n\n    return (\n      <div id=\"page-password-reset\">\n        <Helmet title=\"Password reset\" />\n        <Container>\n          <Form\n            title={this.props.intl.formatMessage(messages.title)}\n            description={this.props.intl.formatMessage(messages.description)}\n            onSubmit={this.onSubmit}\n            onCancel={this.onCancel}\n            error={this.state.error || this.props.error}\n            schema={{\n              fieldsets: [\n                {\n                  id: 'default',\n                  title: this.props.intl.formatMessage(messages.default),\n                  fields: ['email'],\n                },\n              ],\n              properties: {\n                email: {\n                  type: 'string',\n                  title: this.props.intl.formatMessage(messages.emailTitle),\n                },\n              },\n              submitLabel: this.props.intl.formatMessage(messages.sendEmail),\n              required: ['email'],\n            }}\n          />\n        </Container>\n      </div>\n    );\n  }\n}\n","/**\n * Register container.\n * @module components/theme/Register/Register\n */\n\nimport React, { Component } from 'react';\nimport Helmet from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { defineMessages, injectIntl, intlShape } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Router } from 'react-router-dom';\n\nimport { Form } from '../../../components';\nimport { createUser, addMessage } from '../../../actions';\n\nconst messages = defineMessages({\n  title: {\n    id: 'Registration form',\n    defaultMessage: 'Registration form',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  fullnameTitle: {\n    id: 'Full Name',\n    defaultMessage: 'Full Name',\n  },\n  fullnameDescription: {\n    id: 'Enter full name, e.g. John Smith.',\n    defaultMessage: 'Enter full name, e.g. John Smith.',\n  },\n  emailTitle: {\n    id: 'E-mail',\n    defaultMessage: 'E-mail',\n  },\n  emailDescription: {\n    id:\n      'Enter an email address. This will be your login name. We respect your privacy, and will not give the address away to any third parties or expose it anywhere.',\n    defaultMessage:\n      'Enter an email address. This will be your login name. We respect your privacy, and will not give the address away to any third parties or expose it anywhere.',\n  },\n  successRegisterCompletedTitle: {\n    id: 'Account Registration Completed',\n    defaultMessage: 'Account Registration Completed',\n  },\n  successRegisterCompletedBody: {\n    id:\n      'The registration process has been successful. Please check your e-mail inbox for information on how activate your account.',\n    defaultMessage:\n      'The registration process has been successful. Please check your e-mail inbox for information on how activate your account.',\n  },\n  register: {\n    id: 'Register',\n    defaultMessage: 'Register',\n  },\n});\n\n@injectIntl\n@connect(\n  state => ({\n    loading: state.users.create.loading,\n    loaded: state.users.create.loaded,\n    error: state.users.create.error,\n  }),\n  dispatch => bindActionCreators({ createUser, addMessage }, dispatch),\n)\n/**\n * Register class.\n * @class Register\n * @extends Component\n */\nexport default class Register extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    createUser: PropTypes.func.isRequired,\n    addMessage: PropTypes.func.isRequired,\n    loading: PropTypes.bool.isRequired,\n    loaded: PropTypes.bool.isRequired,\n    error: PropTypes.shape({\n      message: PropTypes.string,\n    }),\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    error: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      error: null,\n    };\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (this.props.loading && nextProps.loaded) {\n      this.props.addMessage(\n        this.props.intl.formatMessage(messages.successRegisterCompletedTitle),\n        this.props.intl.formatMessage(messages.successRegisterCompletedBody),\n        'success',\n      );\n      Router.push('/login');\n    }\n  }\n\n  /**\n   * On submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.createUser({\n      fullname: data.fullname,\n      email: data.email,\n      password: data.password,\n    });\n    this.setState({\n      error: null,\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <div id=\"page-register\">\n        <Helmet title=\"Register\" />\n        <Form\n          onSubmit={this.onSubmit}\n          title={this.props.intl.formatMessage(messages.title)}\n          error={this.state.error || this.props.error}\n          loading={this.props.loading}\n          submitLabel={this.props.intl.formatMessage(messages.register)}\n          schema={{\n            fieldsets: [\n              {\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n                fields: ['fullname', 'email'],\n              },\n            ],\n            properties: {\n              fullname: {\n                type: 'string',\n                title: this.props.intl.formatMessage(messages.fullnameTitle),\n                description: this.props.intl.formatMessage(\n                  messages.fullnameDescription,\n                ),\n              },\n              email: {\n                type: 'string',\n                title: this.props.intl.formatMessage(messages.emailTitle),\n                description: this.props.intl.formatMessage(\n                  messages.emailDescription,\n                ),\n              },\n            },\n            required: ['fullname', 'email'],\n          }}\n        />\n      </div>\n    );\n  }\n}\n","/**\n * Search component.\n * @module components/theme/Search/Search\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport Helmet from 'react-helmet';\nimport { Link } from 'react-router-dom';\nimport { asyncConnect } from 'redux-connect';\nimport { FormattedMessage } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport qs from 'query-string';\n\nimport { searchContent } from '../../../actions';\n\nimport { SearchTags, Toolbar } from '../../../components';\n\n@connect(\n  (state, props) => ({\n    items: state.search.items,\n    searchableText: qs.parse(props.location.search).SearchableText,\n    subject: qs.parse(props.location.search).Subject,\n    path: qs.parse(props.location.search).path,\n    pathname: props.location.pathname,\n  }),\n  dispatch => bindActionCreators({ searchContent }, dispatch),\n)\n/**\n * SearchComponent class.\n * @class SearchComponent\n * @extends Component\n */\nexport class SearchComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    searchContent: PropTypes.func.isRequired,\n    searchableText: PropTypes.string,\n    subject: PropTypes.string,\n    path: PropTypes.string,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        '@type': PropTypes.string,\n        title: PropTypes.string,\n        description: PropTypes.string,\n      }),\n    ),\n    pathname: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    items: [],\n    searchableText: null,\n    subject: null,\n    path: null,\n  };\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  componentWillMount() {\n    this.props.searchContent('', {\n      SearchableText: this.props.searchableText,\n      Subject: this.props.subject,\n      path: this.props.path,\n    });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.searchableText !== this.props.searchableText) {\n      this.props.searchContent('', {\n        SearchableText: nextProps.searchableText,\n        Subject: this.props.subject,\n        path: this.props.path,\n      });\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <div id=\"page-search\">\n        <Helmet title=\"Search\" />\n        <div className=\"container\">\n          <article id=\"content\">\n            <header>\n              <h1 className=\"documentFirstHeading\">\n                {this.props.searchableText ? (\n                  <FormattedMessage\n                    id=\"Search results for {term}\"\n                    defaultMessage=\"Search results for {term}\"\n                    values={{\n                      term: <q>{this.props.searchableText}</q>,\n                    }}\n                  />\n                ) : (\n                  <FormattedMessage\n                    id=\"Search results\"\n                    defaultMessage=\"Search results\"\n                  />\n                )}\n              </h1>\n              <SearchTags />\n            </header>\n            <section id=\"content-core\">\n              {this.props.items.map(item => (\n                <article className=\"tileItem\" key={item['@id']}>\n                  <h2 className=\"tileHeadline\">\n                    <Link\n                      to={item['@id']}\n                      className=\"summary url\"\n                      title={item['@type']}\n                    >\n                      {item.title}\n                    </Link>\n                  </h2>\n                  {item.description && (\n                    <div className=\"tileBody\">\n                      <span className=\"description\">{item.description}</span>\n                    </div>\n                  )}\n                  <div className=\"tileFooter\">\n                    <Link to={item['@id']}>\n                      <FormattedMessage\n                        id=\"Read More…\"\n                        defaultMessage=\"Read More…\"\n                      />\n                    </Link>\n                  </div>\n                  <div className=\"visualClear\" />\n                </article>\n              ))}\n            </section>\n          </article>\n        </div>\n        <Portal node={__CLIENT__ && document.getElementById('toolbar')}>\n          <Toolbar pathname={this.props.pathname} inner={<span />} />\n        </Portal>{' '}\n      </div>\n    );\n  }\n}\n\nexport default asyncConnect([\n  {\n    key: 'search',\n    promise: ({ location, store: { dispatch } }) =>\n      dispatch(\n        searchContent('', {\n          SearchableText: qs.parse(location.search).SearchableText,\n          Subject: qs.parse(location.search).Subject,\n        }),\n      ),\n  },\n])(SearchComponent);\n","/**\n * Search tags components.\n * @module components/theme/Search/SearchTags\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Link } from 'react-router-dom';\n\nimport { getVocabulary } from '../../../actions';\n\nconst vocabulary = 'plone.app.vocabularies.Keywords';\n\n@connect(\n  state => ({\n    terms: state.vocabularies[vocabulary]\n      ? state.vocabularies[vocabulary].terms\n      : [],\n  }),\n  dispatch => bindActionCreators({ getVocabulary }, dispatch),\n)\n/**\n * Search tags container class.\n * @class SearchTags\n * @extends Component\n */\nexport default class SearchTags extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getVocabulary: PropTypes.func.isRequired,\n    terms: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n      }),\n    ).isRequired,\n  };\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  componentWillMount() {\n    this.props.getVocabulary(vocabulary);\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return this.props.terms && this.props.terms.length > 0 ? (\n      <div>\n        {this.props.terms.map(term => (\n          <Link\n            className=\"ui label\"\n            to={`/search?Subject=${term.title}`}\n            key={term.title}\n          >\n            {term.title}\n          </Link>\n        ))}\n      </div>\n    ) : (\n      <span />\n    );\n  }\n}\n","/**\n * Search widget component.\n * @module components/theme/SearchWidget/SearchWidget\n */\n\nimport React, { Component } from 'react';\nimport { Router } from 'react-router-dom';\nimport { Form, Input } from 'semantic-ui-react';\nimport { PropTypes } from 'prop-types';\nimport { defineMessages, injectIntl, intlShape } from 'react-intl';\n\nconst messages = defineMessages({\n  search: {\n    id: 'Search',\n    defaultMessage: 'Search',\n  },\n  searchSite: {\n    id: 'Search Site',\n    defaultMessage: 'Search Site',\n  },\n});\n\n@injectIntl\n/**\n * SearchWidget component class.\n * @class SearchWidget\n * @extends Component\n */\nexport default class SearchWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    pathname: PropTypes.string.isRequired,\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.onChangeText = this.onChangeText.bind(this);\n    this.onChangeSection = this.onChangeSection.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      text: '',\n      section: false,\n    };\n  }\n\n  /**\n   * On change text\n   * @method onChangeText\n   * @param {object} event Event object.\n   * @param {string} value Text value.\n   * @returns {undefined}\n   */\n  onChangeText(event, { value }) {\n    this.setState({\n      text: value,\n    });\n  }\n\n  /**\n   * On change section\n   * @method onChangeSection\n   * @param {object} event Event object.\n   * @param {bool} checked Section checked.\n   * @returns {undefined}\n   */\n  onChangeSection(event, { checked }) {\n    this.setState({\n      section: checked,\n    });\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {event} event Event object.\n   * @returns {undefined}\n   */\n  onSubmit(event) {\n    const section = this.state.section ? `&path=${this.props.pathname}` : '';\n    Router.push(`/search?SearchableText=${this.state.text}${section}`);\n    event.preventDefault();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Form action=\"/search\" onSubmit={this.onSubmit}>\n        <Form.Field className=\"searchbox\">\n          <Input\n            onChange={this.onChangeText}\n            name=\"SearchableText\"\n            value={this.state.text}\n            action={{ icon: 'search' }}\n            transparent\n            placeholder={this.props.intl.formatMessage(messages.searchSite)}\n            title={this.props.intl.formatMessage(messages.search)}\n          />\n        </Form.Field>\n      </Form>\n    );\n  }\n}\n","/**\n * Social sharing component.\n * @module components/theme/SocialSharing/SocialSharing\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Container } from 'semantic-ui-react';\nimport { FacebookShareButton, TwitterShareButton } from 'react-share';\n\n/**\n * Social sharing component class.\n * @function SocialSharing\n * @param {string} url Url to share.\n * @param {string} title Title of the content.\n * @param {string} description Description of the content.\n * @returns {string} Markup of the component.\n */\nconst SocialSharing = ({ url, title, description }) => (\n  <Container style={{ clear: 'both' }}>\n    <br />\n    <FacebookShareButton url={url} quote={title}>\n      <Button color=\"facebook\" size=\"mini\">\n        Facebook\n      </Button>\n    </FacebookShareButton>\n    <TwitterShareButton url={url} title={title} description={description}>\n      <Button color=\"twitter\" size=\"mini\">\n        Twitter\n      </Button>\n    </TwitterShareButton>\n    <br />\n    <br />\n  </Container>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nSocialSharing.propTypes = {\n  url: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n};\n\nexport default SocialSharing;\n","/**\n * Tags component.\n * @module components/theme/Tags/Tags\n */\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\n/**\n * Tags component class.\n * @function Tags\n * @param {array} tags Array of tags.\n * @returns {string} Markup of the component.\n */\nconst Tags = ({ tags }) =>\n  tags && tags.length > 0 ? (\n    <div>\n      {tags.map(tag => (\n        <Link className=\"ui label\" to={`/search?Subject=${tag}`} key={tag}>\n          {tag}\n        </Link>\n      ))}\n    </div>\n  ) : (\n    <span />\n  );\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nTags.propTypes = {\n  tags: PropTypes.arrayOf(PropTypes.string),\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nTags.defaultProps = {\n  tags: null,\n};\n\nexport default Tags;\n","/**\n * Title component.\n * @module components/theme/Title/Title\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Component to display a title.\n * @function Field\n * @param {Object} props Component properties.\n * @param {string} props.title Title.\n * @returns {string} Markup of the component.\n */\nconst Title = ({ title }) => <h1 className=\"documentFirstHeading\">{title}</h1>;\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nTitle.propTypes = {\n  /**\n   * The title\n   */\n  title: PropTypes.string.isRequired,\n};\n\nexport default Title;\n","/**\n * Document view component.\n * @module components/theme/View/DocumentView\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { Container, Image } from 'semantic-ui-react';\nimport { map } from 'lodash';\n\nimport {\n  ViewTitleTile,\n  ViewDescriptionTile,\n  ViewTextTile,\n  ViewImageTile,\n  ViewVideoTile,\n} from '../../../components';\nimport {\n  getTilesFieldname,\n  getTilesLayoutFieldname,\n  hasTilesData,\n} from '../../../helpers';\n\n/**\n * Component to display the document view.\n * @function DocumentView\n * @param {Object} content Content object.\n * @returns {string} Markup of the component.\n */\nconst DocumentView = ({ content }) => {\n  const tilesFieldname = getTilesFieldname(content);\n  const tilesLayoutFieldname = getTilesLayoutFieldname(content);\n\n  return hasTilesData(content) ? (\n    <div id=\"page-document\" className=\"ui wrapper\">\n      <Helmet title={content.title} />\n      {map(content[tilesLayoutFieldname].items, tile => {\n        let Tile = null;\n        switch (content[tilesFieldname][tile]['@type']) {\n          case 'title':\n            Tile = ViewTitleTile;\n            break;\n          case 'description':\n            Tile = ViewDescriptionTile;\n            break;\n          case 'text':\n            Tile = ViewTextTile;\n            break;\n          case 'image':\n            Tile = ViewImageTile;\n            break;\n          case 'video':\n            Tile = ViewVideoTile;\n            break;\n          default:\n            break;\n        }\n        return Tile !== null ? (\n          <Tile\n            key={tile}\n            properties={content}\n            data={content[tilesFieldname][tile]}\n          />\n        ) : (\n          <div>{JSON.stringify(content[tilesFieldname][tile]['@type'])}</div>\n        );\n      })}\n    </div>\n  ) : (\n    <Container id=\"page-document\">\n      <Helmet title={content.title} />\n      <h1 className=\"documentFirstHeading\">{content.title}</h1>\n      {content.description && (\n        <p className=\"documentDescription\">{content.description}</p>\n      )}\n      {content.image && (\n        <Image\n          className=\"document-image\"\n          src={content.image.scales.thumb.download}\n          floated=\"right\"\n        />\n      )}\n      {content.text && (\n        <p dangerouslySetInnerHTML={{ __html: content.text.data }} />\n      )}\n    </Container>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nDocumentView.propTypes = {\n  /**\n   * Content of the object\n   */\n  content: PropTypes.shape({\n    /**\n     * Title of the object\n     */\n    title: PropTypes.string,\n    /**\n     * Description of the object\n     */\n    description: PropTypes.string,\n    /**\n     * Text of the object\n     */\n    text: PropTypes.shape({\n      /**\n       * Data of the text of the object\n       */\n      data: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default DocumentView;\n","/**\n * File view component.\n * @module components/theme/View/FileView\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { Container } from 'semantic-ui-react';\n\n/**\n * File view component class.\n * @function FileView\n * @params {object} content Content object.\n * @returns {string} Markup of the component.\n */\nconst FileView = ({ content }) => (\n  <Container className=\"view-wrapper\">\n    <Helmet title={content.title} />\n    <h1 className=\"documentFirstHeading\">\n      {content.title}\n      {content.subtitle && ` - ${content.subtitle}`}\n    </h1>\n    {content.description && (\n      <p className=\"documentDescription\">{content.description}</p>\n    )}\n    <a href={content.file.download}>{content.file.filename}</a>\n  </Container>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nFileView.propTypes = {\n  content: PropTypes.shape({\n    title: PropTypes.string,\n    description: PropTypes.string,\n    file: PropTypes.shape({\n      download: PropTypes.string,\n      filename: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default FileView;\n","/**\n * Image view component.\n * @module components/theme/View/ImageView\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { Container } from 'semantic-ui-react';\n\n/**\n * Image view component class.\n * @function ImageView\n * @params {object} content Content object.\n * @returns {string} Markup of the component.\n */\nconst ImageView = ({ content }) => (\n  <Container className=\"view-wrapper\">\n    <Helmet title={content.title} />\n    <h1 className=\"documentFirstHeading\">\n      {content.title}\n      {content.subtitle && ` - ${content.subtitle}`}\n    </h1>\n    {content.description && (\n      <p className=\"documentDescription\">{content.description}</p>\n    )}\n    <img alt={content.title} src={content.image.scales.preview.download} />\n  </Container>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nImageView.propTypes = {\n  content: PropTypes.shape({\n    title: PropTypes.string,\n    description: PropTypes.string,\n    image: PropTypes.shape({\n      scales: PropTypes.shape({\n        preview: PropTypes.shape({\n          download: PropTypes.string,\n        }),\n      }),\n    }),\n  }).isRequired,\n};\n\nexport default ImageView;\n","/**\n * Document view component.\n * @module components/theme/View/ListingView\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { Link } from 'react-router-dom';\nimport { Container } from 'semantic-ui-react';\n\n/**\n * List view component class.\n * @function ListingView\n * @params {object} content Content object.\n * @returns {string} Markup of the component.\n */\nconst ListingView = ({ content }) => (\n  <Container id=\"page-home\">\n    <Helmet title={content.title} />\n    <section id=\"content-core\">\n      {content.items.map(item => (\n        <article key={item.url}>\n          <h2>\n            <Link to={item.url} title={item['@type']}>\n              {item.title}\n            </Link>\n          </h2>\n          {item.description && <p>{item.description}</p>}\n        </article>\n      ))}\n    </section>\n  </Container>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nListingView.propTypes = {\n  content: PropTypes.shape({\n    title: PropTypes.string,\n    description: PropTypes.string,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        '@type': PropTypes.string,\n        description: PropTypes.string,\n        review_state: PropTypes.string,\n        title: PropTypes.string,\n        url: PropTypes.string,\n      }),\n    ),\n  }).isRequired,\n};\n\nexport default ListingView;\n","/**\n * NewsItemView view component.\n * @module components/theme/View/NewsItemView\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { Container, Image } from 'semantic-ui-react';\n\n/**\n * NewsItemView view component class.\n * @function NewsItemView\n * @params {object} content Content object.\n * @returns {string} Markup of the component.\n */\nconst NewsItemView = ({ content }) => (\n  <Container className=\"view-wrapper\">\n    <Helmet title={content.title} />\n    {content.title && (\n      <h1 className=\"documentFirstHeading\">\n        {content.title}\n        {content.subtitle && ` - ${content.subtitle}`}\n      </h1>\n    )}\n    {content.description && (\n      <p className=\"documentDescription\">{content.description}</p>\n    )}\n    {content.image && (\n      <Image\n        className=\"documentImage\"\n        alt={content.title}\n        title={content.title}\n        src={\n          content.image['content-type'] === 'image/svg+xml'\n            ? content.image.download\n            : content.image.scales.mini.download\n        }\n        floated=\"right\"\n      />\n    )}\n    {content.text && (\n      <p dangerouslySetInnerHTML={{ __html: content.text.data }} />\n    )}\n  </Container>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nNewsItemView.propTypes = {\n  content: PropTypes.shape({\n    title: PropTypes.string,\n    description: PropTypes.string,\n    text: PropTypes.shape({\n      data: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default NewsItemView;\n","/**\n * Summary view component.\n * @module components/theme/View/SummaryView\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { Link } from 'react-router-dom';\nimport { Container, Image } from 'semantic-ui-react';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * Summary view component class.\n * @function SummaryView\n * @param {Object} content Content object.\n * @returns {string} Markup of the component.\n */\nconst SummaryView = ({ content }) => (\n  <Container className=\"view-wrapper\">\n    <Helmet title={content.title} />\n    <article id=\"content\">\n      <header>\n        <h1 className=\"documentFirstHeading\">{content.title}</h1>\n        {content.description && (\n          <p className=\"documentDescription\">{content.description}</p>\n        )}\n      </header>\n      <section id=\"content-core\">\n        {content.items.map(item => (\n          <article key={item.url}>\n            <h2>\n              <Link to={item.url} title={item['@type']}>\n                {item.title}\n              </Link>\n            </h2>\n            {item.image && (\n              <Image\n                clearing\n                floated=\"right\"\n                alt={item.image_caption ? item.image_caption : item.title}\n                src={item.image.scales.thumb.download}\n              />\n            )}\n            {item.description && <p>{item.description}</p>}\n            <p>\n              <Link to={item.url}>\n                <FormattedMessage id=\"Read More…\" defaultMessage=\"Read More…\" />\n              </Link>\n            </p>\n          </article>\n        ))}\n      </section>\n    </article>\n  </Container>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nSummaryView.propTypes = {\n  /**\n   * Content of the object\n   */\n  content: PropTypes.shape({\n    /**\n     * Title of the object\n     */\n    title: PropTypes.string,\n    /**\n     * Description of the object\n     */\n    description: PropTypes.string,\n    /**\n     * Child items of the object\n     */\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        /**\n         * Title of the item\n         */\n        title: PropTypes.string,\n        /**\n         * Description of the item\n         */\n        description: PropTypes.string,\n        /**\n         * Url of the item\n         */\n        url: PropTypes.string,\n        /**\n         * Image of the item\n         */\n        image: PropTypes.object,\n        /**\n         * Image caption of the item\n         */\n        image_caption: PropTypes.string,\n        /**\n         * Type of the item\n         */\n        '@type': PropTypes.string,\n      }),\n    ),\n  }).isRequired,\n};\n\nexport default SummaryView;\n","/**\n * Tabular view component.\n * @module components/theme/View/TabularView\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { Link } from 'react-router-dom';\nimport { Container, Table } from 'semantic-ui-react';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * Tabular view component class.\n * @function TabularView\n * @param {Object} content Content object.\n * @returns {string} Markup of the component.\n */\nconst TabularView = ({ content }) => (\n  <Container className=\"view-wrapper\">\n    <Helmet title={content.title} />\n    <article id=\"content\">\n      <header>\n        <h1 className=\"documentFirstHeading\">{content.title}</h1>\n        {content.description && (\n          <p className=\"documentDescription\">{content.description}</p>\n        )}\n      </header>\n      <section id=\"content-core\">\n        <Table celled padded>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell>\n                <FormattedMessage id=\"Title\" defaultMessage=\"Title\" />\n              </Table.HeaderCell>\n              <Table.HeaderCell>\n                <FormattedMessage\n                  id=\"Description\"\n                  defaultMessage=\"Description\"\n                />\n              </Table.HeaderCell>\n              <Table.HeaderCell>\n                <FormattedMessage id=\"Type\" defaultMessage=\"Type\" />\n              </Table.HeaderCell>\n              <Table.HeaderCell>\n                <FormattedMessage id=\"State\" defaultMessage=\"State\" />\n              </Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {content.items.map(item => (\n              <Table.Row key={item.url}>\n                <Table.Cell>\n                  <Link\n                    to={item.url}\n                    className=\"summary url\"\n                    title={item['@type']}\n                  >\n                    {item.title}\n                  </Link>\n                </Table.Cell>\n                <Table.Cell>{item.description}</Table.Cell>\n                <Table.Cell>{item['@type']}</Table.Cell>\n                <Table.Cell>{item.review_state}</Table.Cell>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </section>\n    </article>\n  </Container>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nTabularView.propTypes = {\n  /**\n   * Content of the object\n   */\n  content: PropTypes.shape({\n    /**\n     * Title of the object\n     */\n    title: PropTypes.string,\n    /**\n     * Description of the object\n     */\n    description: PropTypes.string,\n    /**\n     * Child items of the object\n     */\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        /**\n         * Title of the item\n         */\n        title: PropTypes.string,\n        /**\n         * Description of the item\n         */\n        description: PropTypes.string,\n        /**\n         * Url of the item\n         */\n        url: PropTypes.string,\n        /**\n         * Review state of the item\n         */\n        review_state: PropTypes.string,\n        /**\n         * Type of the item\n         */\n        '@type': PropTypes.string,\n      }),\n    ),\n  }).isRequired,\n};\n\nexport default TabularView;\n","/**\n * View container.\n * @module components/theme/View/View\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Portal } from 'react-portal';\nimport { Link } from 'react-router-dom';\nimport { Dropdown, Icon } from 'semantic-ui-react';\nimport { injectIntl, intlShape } from 'react-intl';\nimport { find } from 'lodash';\nimport qs from 'query-string';\nimport { views } from '~/config';\n\nimport {\n  Comments,\n  SocialSharing,\n  Tags,\n  Toolbar,\n  Actions,\n  Display,\n  NotFound,\n  Types,\n  Workflow,\n} from '../../../components';\nimport { listActions, getContent } from '../../../actions';\nimport { BodyClass, getBaseUrl } from '../../../helpers';\n\n@injectIntl\n@connect(\n  (state, props) => ({\n    actions: state.actions.actions,\n    content: state.content.data,\n    error: state.content.get.error,\n    pathname: props.location.pathname,\n    versionId:\n      qs.parse(props.location.search) &&\n      qs.parse(props.location.search).version_id,\n  }),\n  {\n    listActions,\n    getContent,\n  },\n)\n/**\n * View container class.\n * @class View\n * @extends Component\n */\nexport default class View extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    actions: PropTypes.shape({\n      object: PropTypes.arrayOf(PropTypes.object),\n      object_buttons: PropTypes.arrayOf(PropTypes.object),\n      user: PropTypes.arrayOf(PropTypes.object),\n    }),\n    listActions: PropTypes.func.isRequired,\n    /**\n     * Action to get the content\n     */\n    getContent: PropTypes.func.isRequired,\n    /**\n     * Pathname of the object\n     */\n    pathname: PropTypes.string.isRequired,\n    location: PropTypes.shape({\n      search: PropTypes.string,\n      pathname: PropTypes.string,\n    }).isRequired,\n    /**\n     * Version id of the object\n     */\n    versionId: PropTypes.string,\n    /**\n     * Content of the object\n     */\n    content: PropTypes.shape({\n      /**\n       * Layout of the object\n       */\n      layout: PropTypes.string,\n      /**\n       * Allow discussion of the object\n       */\n      allow_discussion: PropTypes.bool,\n      /**\n       * Title of the object\n       */\n      title: PropTypes.string,\n      /**\n       * Description of the object\n       */\n      description: PropTypes.string,\n      /**\n       * Type of the object\n       */\n      '@type': PropTypes.string,\n      /**\n       * Subjects of the object\n       */\n      subjects: PropTypes.arrayOf(PropTypes.string),\n      is_folderish: PropTypes.bool,\n    }),\n    error: PropTypes.shape({\n      /**\n       * Error type\n       */\n      type: PropTypes.string,\n    }),\n    intl: intlShape.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    actions: null,\n    content: null,\n    versionId: null,\n    error: null,\n  };\n\n  state = {\n    hasObjectButtons: null,\n  };\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  componentWillMount() {\n    this.props.listActions(getBaseUrl(this.props.pathname));\n    this.props.getContent(\n      getBaseUrl(this.props.pathname),\n      this.props.versionId,\n    );\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.pathname !== this.props.pathname) {\n      this.props.listActions(getBaseUrl(nextProps.pathname));\n      this.props.getContent(\n        getBaseUrl(nextProps.pathname),\n        this.props.versionId,\n      );\n    }\n\n    if (nextProps.actions.object_buttons) {\n      const objectButtons = nextProps.actions.object_buttons;\n      this.setState({\n        hasObjectButtons: !!objectButtons.length,\n      });\n    }\n  }\n\n  /**\n   * Default fallback view\n   * @method getViewDefault\n   * @returns {string} Markup for component.\n   */\n  getViewDefault = () => views.defaultView;\n\n  /**\n   * Get view by content type\n   * @method getViewByType\n   * @returns {string} Markup for component.\n   */\n  getViewByType = () =>\n    views.contentTypesViews[this.props.content['@type']] || null;\n\n  /**\n   * Get view by content layout property\n   * @method getViewByLayout\n   * @returns {string} Markup for component.\n   */\n  getViewByLayout = () => views.layoutViews[this.props.content.layout] || null;\n\n  /**\n   * Cleans the component displayName (specially for connected components)\n   * which have the Connect(componentDisplayName)\n   * @method cleanViewName\n   * @param  {string} dirtyDisplayName The displayName\n   * @returns {string} Clean displayName (no Connect(...)).\n   */\n  cleanViewName = dirtyDisplayName =>\n    dirtyDisplayName\n      .replace('Connect(', '')\n      .replace(')', '')\n      .toLowerCase();\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.props.error) {\n      return (\n        <div id=\"view\">\n          <NotFound />\n        </div>\n      );\n    }\n    if (!this.props.content) {\n      return <span />;\n    }\n    const RenderedView =\n      this.getViewByType() || this.getViewByLayout() || this.getViewDefault();\n\n    const path = getBaseUrl(this.props.pathname);\n    const editAction = find(this.props.actions.object, { id: 'edit' });\n    const folderContentsAction = find(this.props.actions.object, {\n      id: 'folderContents',\n    });\n    const historyAction = find(this.props.actions.object, { id: 'history' });\n    const sharingAction = find(this.props.actions.object, {\n      id: 'local_roles',\n    });\n\n    return (\n      <div id=\"view\">\n        <BodyClass\n          className={\n            RenderedView.displayName\n              ? `view-${this.cleanViewName(RenderedView.displayName)}`\n              : null\n          }\n        />\n\n        <RenderedView\n          content={this.props.content}\n          location={this.props.location}\n        />\n\n        {this.props.content.subjects &&\n          this.props.content.subjects.length > 0 && (\n            <Tags tags={this.props.content.subjects} />\n          )}\n        <SocialSharing\n          url={typeof window === 'undefined' ? '' : window.location.href}\n          title={this.props.content.title}\n          description={this.props.content.description || ''}\n        />\n        {this.props.content.allow_discussion && (\n          <Comments pathname={this.props.pathname} />\n        )}\n\n        <Portal node={__CLIENT__ && document.getElementById('toolbar')}>\n          <Toolbar\n            pathname={this.props.pathname}\n            inner={\n              <div>\n                {editAction && (\n                  <Link to={`${path}/edit`} id=\"toolbar-edit\" className=\"item\">\n                    <Icon\n                      name=\"write\"\n                      size=\"big\"\n                      color=\"blue\"\n                      title={editAction.title}\n                    />\n                  </Link>\n                )}\n                {this.props.content &&\n                  this.props.content.is_folderish &&\n                  folderContentsAction && (\n                    <Link\n                      to={`${path}/contents`.replace(/\\/\\//g, '/')}\n                      id=\"toolbar-folder-contents\"\n                      className=\"item\"\n                    >\n                      <Icon\n                        name=\"folder open\"\n                        size=\"big\"\n                        title={folderContentsAction.title}\n                      />\n                    </Link>\n                  )}\n                <Types pathname={path} />\n\n                <Dropdown\n                  id=\"toolbar-more\"\n                  item\n                  trigger={<Icon name=\"ellipsis horizontal\" size=\"big\" />}\n                >\n                  <Dropdown.Menu>\n                    <Workflow pathname={path} />\n                    {this.state.hasObjectButtons && <Actions pathname={path} />}\n                    {editAction && <Display pathname={path} />}\n                    {historyAction && (\n                      <Link\n                        to={`${path}/history`}\n                        id=\"toolbar-history\"\n                        className=\"item\"\n                      >\n                        <Icon name=\"clock\" size=\"big\" /> {historyAction.title}\n                      </Link>\n                    )}\n                    {sharingAction && (\n                      <Link\n                        to={`${path}/sharing`}\n                        id=\"toolbar-sharing\"\n                        className=\"item\"\n                      >\n                        <Icon name=\"share\" size=\"big\" /> {sharingAction.title}\n                      </Link>\n                    )}\n                  </Dropdown.Menu>\n                </Dropdown>\n\n                <Dropdown\n                  id=\"toolbar-personal\"\n                  className=\"personal-bar\"\n                  item\n                  upward\n                  trigger={<Icon name=\"user\" size=\"big\" />}\n                >\n                  <Dropdown.Menu>\n                    {this.props.actions.user &&\n                      this.props.actions.user.map(item => {\n                        switch (item.id) {\n                          case 'preferences':\n                            return (\n                              <Link\n                                key={item.id}\n                                to=\"/personal-preferences\"\n                                className=\"item\"\n                              >\n                                <span>\n                                  <Icon name=\"setting\" /> {item.title}\n                                </span>\n                              </Link>\n                            );\n\n                          case 'plone_setup':\n                            return (\n                              <Link\n                                key={item.id}\n                                to=\"/controlpanel\"\n                                className=\"item\"\n                              >\n                                <span>\n                                  <Icon name=\"settings\" /> {item.title}\n                                </span>\n                              </Link>\n                            );\n\n                          case 'logout':\n                            return (\n                              <Link\n                                key={item.id}\n                                to=\"/logout\"\n                                id=\"toolbar-logout\"\n                                className=\"item\"\n                              >\n                                <span>\n                                  <Icon name=\"sign out\" /> {item.title}\n                                </span>\n                              </Link>\n                            );\n                          default: {\n                            return null;\n                          }\n                        }\n                      })}\n                  </Dropdown.Menu>\n                </Dropdown>\n              </div>\n            }\n          />\n        </Portal>\n      </div>\n    );\n  }\n}\n","// Non Content Routes/Views\nexport const nonContentRoutes = [\n  /\\?.*$/,\n  '/add',\n  '/contents',\n  '/delete',\n  '/diff',\n  '/edit',\n  '/history',\n  '/layout',\n  '/login',\n  '/logout',\n  '/register',\n  '/sharing',\n  '/search',\n  '/change-password',\n  /\\/controlpanel\\/.*$/,\n  '/controlpanel',\n  '/personal-information',\n  '/personal-preferences',\n  'register',\n  'password-reset',\n];\n","import { Map } from 'immutable';\nimport { DefaultDraftBlockRenderMap } from 'draft-js';\n\nconst blockRenderMap = Map({\n  callout: {\n    element: 'p',\n  },\n  unstyled: {\n    element: 'p',\n  },\n});\n\nconst extendedBlockRenderMap = DefaultDraftBlockRenderMap.merge(blockRenderMap);\n\nconst blockStyleFn = contentBlock => {\n  const type = contentBlock.getType();\n  if (type === 'callout') {\n    return 'callout';\n  }\n  return null;\n};\n\nconst listBlockTypes = ['unordered-list-item', 'ordered-list-item'];\n\nexport { extendedBlockRenderMap, blockStyleFn, listBlockTypes };\n","export default element => {\n  if (element.className === 'callout') {\n    return {\n      type: 'callout',\n    };\n  }\n  return null;\n};\n","import { Separator } from 'draft-js-inline-toolbar-plugin';\n\nimport createBlockBreakoutPlugin from 'draft-js-block-breakout-plugin';\nimport createLinkPlugin from '../../components/manage/AnchorPlugin';\nimport {\n  BlockquoteButton,\n  BoldButton,\n  CalloutButton,\n  ItalicButton,\n  HeadlineTwoButton,\n  HeadlineThreeButton,\n  OrderedListButton,\n  UnorderedListButton,\n} from './Styles';\n\nconst breakOutOptions = {\n  doubleBreakoutBlocks: [\n    'unordered-list-item',\n    'ordered-list-item',\n    'code-block',\n  ],\n  breakoutBlocks: [\n    'header-one',\n    'header-two',\n    'header-three',\n    'highlight',\n    'blockquote',\n    'callout',\n  ],\n};\n\nconst blockBreakoutPlugin = createBlockBreakoutPlugin(breakOutOptions);\nconst linkPlugin = createLinkPlugin();\n\nexport const inlineToolbarButtons = [\n  BoldButton,\n  ItalicButton,\n  linkPlugin.LinkButton,\n  Separator,\n  HeadlineTwoButton,\n  HeadlineThreeButton,\n  UnorderedListButton,\n  OrderedListButton,\n  BlockquoteButton,\n  CalloutButton,\n];\n\nconst plugins = [linkPlugin, blockBreakoutPlugin];\n\nexport default plugins;\n","import React from 'react';\nimport createInlineStyleButton from 'draft-js-buttons/lib/utils/createInlineStyleButton';\nimport createBlockStyleButton from 'draft-js-buttons/lib/utils/createBlockStyleButton';\n\nimport Icon from '../../components/theme/Icon/Icon';\n\nimport boldSVG from '../../icons/bold.svg';\nimport italicSVG from '../../icons/italic.svg';\nimport textSVG from '../../icons/text.svg';\nimport subtextSVG from '../../icons/subtext.svg';\nimport unorderedListSVG from '../../icons/list-bullet.svg';\nimport orderedListSVG from '../../icons/list-numbered.svg';\nimport blockquoteSVG from '../../icons/quote.svg';\nimport calloutSVG from '../../icons/megaphone.svg';\n\nconst BoldButton = createInlineStyleButton({\n  style: 'BOLD',\n  children: <Icon name={boldSVG} size=\"24px\" />,\n});\n\nconst ItalicButton = createInlineStyleButton({\n  style: 'ITALIC',\n  children: <Icon name={italicSVG} size=\"24px\" />,\n});\n\nconst HeadlineTwoButton = createBlockStyleButton({\n  blockType: 'header-two',\n  children: <Icon name={textSVG} size=\"24px\" />,\n});\n\nconst HeadlineThreeButton = createBlockStyleButton({\n  blockType: 'header-three',\n  children: <Icon name={subtextSVG} size=\"24px\" />,\n});\n\nconst UnorderedListButton = createBlockStyleButton({\n  blockType: 'unordered-list-item',\n  children: <Icon name={unorderedListSVG} size=\"24px\" />,\n});\n\nconst OrderedListButton = createBlockStyleButton({\n  blockType: 'ordered-list-item',\n  children: <Icon name={orderedListSVG} size=\"24px\" />,\n});\n\nconst BlockquoteButton = createBlockStyleButton({\n  blockType: 'blockquote',\n  children: <Icon name={blockquoteSVG} size=\"24px\" />,\n});\n\nconst CalloutButton = createBlockStyleButton({\n  blockType: 'callout',\n  children: <Icon name={calloutSVG} size=\"24px\" />,\n});\n\nexport {\n  BlockquoteButton,\n  BoldButton,\n  CalloutButton,\n  ItalicButton,\n  HeadlineTwoButton,\n  HeadlineThreeButton,\n  OrderedListButton,\n  UnorderedListButton,\n};\n","import React from 'react';\n\nconst styles = {\n  code: {\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 2,\n  },\n  codeBlock: {\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 20,\n  },\n};\n\n// Inline (not block) styles\nconst inline = {\n  BOLD: (children, { key }) => <strong key={key}>{children}</strong>,\n  ITALIC: (children, { key }) => <em key={key}>{children}</em>,\n  UNDERLINE: (children, { key }) => <u key={key}>{children}</u>,\n  CODE: (children, { key }) => (\n    <span key={key} style={styles.code}>\n      {children}\n    </span>\n  ),\n};\n\nconst addBreaklines = children => children.map(child => [child, <br />]);\n\n// Returns how the default lists should be rendered\nconst getList = ordered => (children, { depth, keys }) =>\n  ordered ? (\n    <ol key={keys[0]} keys={keys} depth={depth}>\n      {children.map((child, i) => <li key={keys[i]}>{child}</li>)}\n    </ol>\n  ) : (\n    <ul key={keys[0]} keys={keys} depth={depth}>\n      {children.map((child, i) => <li key={keys[i]}>{child}</li>)}\n    </ul>\n  );\n\n// Special function to deal with list clones\nconst getSpecialList = type => (children, { depth, keys }) => (\n  <ul key={keys[0]} keys={keys} depth={depth} className={type}>\n    {children.map((child, i) => (\n      <li key={keys[i]} className={`${type}-item`}>\n        {child}\n      </li>\n    ))}\n  </ul>\n);\n\nconst getAtomic = (children, { data, keys }) =>\n  data.map((item, i) => <div key={keys[i]} {...data[i]} />);\n\n/**\n * Note that children can be maped to render a list or do other cool stuff\n */\nconst blocks = {\n  // Rendering blocks like this along with cleanup results in a single p tag for each paragraph\n  // adding an empty block closes current paragraph and starts a new one\n  // unstyled: (children, { keys }) => (\n  //   <p key={keys[0]}>{addBreaklines(children)}</p>\n  // ),\n  unstyled: (children, { keys }) =>\n    children.map(child => <p key={keys[0]}>{child}</p>),\n  atomic: getAtomic,\n  blockquote: (children, { keys }) => (\n    <blockquote key={keys[0]}>{addBreaklines(children)}</blockquote>\n  ),\n  'header-one': (children, { keys }) =>\n    children.map((child, i) => <h1 key={keys[i]}>{child}</h1>),\n  'header-two': (children, { keys }) =>\n    children.map((child, i) => <h2 key={keys[i]}>{child}</h2>),\n  'header-three': (children, { keys }) =>\n    children.map((child, i) => <h3 key={keys[i]}>{child}</h3>),\n  'header-four': (children, { keys }) =>\n    children.map((child, i) => <h4 key={keys[i]}>{child}</h4>),\n  'header-five': (children, { keys }) =>\n    children.map((child, i) => <h5 key={keys[i]}>{child}</h5>),\n  'header-six': (children, { keys }) =>\n    children.map((child, i) => <h6 key={keys[i]}>{child}</h6>),\n  'code-block': (children, { keys }) => (\n    <pre key={keys[0]} style={styles.codeBlock}>\n      {addBreaklines(children)}\n    </pre>\n  ),\n  'unordered-list-item': getList(),\n  'ordered-list-item': getList(true),\n  callout: (children, { keys }) =>\n    children.map((child, i) => (\n      <p key={keys[i]} className=\"callout\">\n        {child}\n      </p>\n    )),\n};\n\nconst entities = {\n  LINK: (children, entity, { key }) => (\n    <a key={key} href={entity.url}>\n      {children}\n    </a>\n  ),\n};\n\nexport const options = {\n  cleanup: false,\n  // joinOutput: true,\n};\n\nconst renderers = {\n  inline,\n  blocks,\n  entities,\n};\n\nexport default renderers;\n","import { defineMessages } from 'react-intl';\n\nimport EditTitleTile from '../components/manage/Tiles/Title/Edit';\nimport EditDescriptionTile from '../components/manage/Tiles/Description/Edit';\nimport EditTextTile from '../components/manage/Tiles/Text/Edit';\nimport EditImageTile from '../components/manage/Tiles/Image/Edit';\nimport EditVideoTile from '../components/manage/Tiles/Video/Edit';\n\nconst customTiles = [];\n\nconst messagesTiles = defineMessages({\n  title: {\n    id: 'title',\n    defaultMessage: 'Title',\n  },\n  description: {\n    id: 'description',\n    defaultMessage: 'Description',\n  },\n  text: {\n    id: 'text',\n    defaultMessage: 'Text',\n  },\n  image: {\n    id: 'image',\n    defaultMessage: 'Image',\n  },\n  video: {\n    id: 'video',\n    defaultMessage: 'Video',\n  },\n});\n\nconst getDefaultEditTileView = type => {\n  switch (type) {\n    case 'title':\n      return EditTitleTile;\n    case 'description':\n      return EditDescriptionTile;\n    case 'text':\n      return EditTextTile;\n    case 'image':\n      return EditImageTile;\n    case 'video':\n      return EditVideoTile;\n    default:\n      break;\n  }\n};\n\nexport { customTiles, getDefaultEditTileView, messagesTiles };\n","import DocumentView from '../components/theme/View/DocumentView';\nimport FileView from '../components/theme/View/FileView';\nimport ImageView from '../components/theme/View/ImageView';\nimport ListingView from '../components/theme/View/ListingView';\nimport NewsItemView from '../components/theme/View/NewsItemView';\nimport SummaryView from '../components/theme/View/SummaryView';\nimport TabularView from '../components/theme/View/TabularView';\n\n// Layout View Registry\nexport const layoutViews = {\n  summary_view: SummaryView,\n  tabular_view: TabularView,\n  listing_view: ListingView,\n};\n\n// Content Types View Registry\nexport const contentTypesViews = {\n  'News Item': NewsItemView,\n  File: FileView,\n  Image: ImageView,\n};\n\n// Default view\nexport const defaultView = DocumentView;\n","// The Widgets are forced to be imported not from the index but from its own\n// full path due to circular import issues\nimport ArrayWidget from '../components/manage/Widgets/ArrayWidget';\nimport CheckboxWidget from '../components/manage/Widgets/CheckboxWidget';\nimport DatetimeWidget from '../components/manage/Widgets/DatetimeWidget';\nimport FileWidget from '../components/manage/Widgets/FileWidget';\nimport PasswordWidget from '../components/manage/Widgets/PasswordWidget';\nimport SchemaWidget from '../components/manage/Widgets/SchemaWidget';\nimport SelectWidget from '../components/manage/Widgets/SelectWidget';\nimport TextareaWidget from '../components/manage/Widgets/TextareaWidget';\nimport TextWidget from '../components/manage/Widgets/TextWidget';\nimport WysiwygWidget from '../components/manage/Widgets/WysiwygWidget';\n\n// Widgets mapping\nexport const widgetMapping = {\n  id: {\n    schema: SchemaWidget,\n  },\n  widget: {\n    richtext: WysiwygWidget,\n    textarea: TextareaWidget,\n    datetime: DatetimeWidget,\n    password: PasswordWidget,\n  },\n  vocabulary: {\n    'plone.app.vocabularies.Keywords': ArrayWidget,\n  },\n  choices: SelectWidget,\n  type: {\n    boolean: CheckboxWidget,\n    array: ArrayWidget,\n    object: FileWidget,\n    datetime: DatetimeWidget,\n  },\n};\n\n// Default Widget\nexport const defaultWidget = TextWidget;\n","/**\n * Config.\n * @module config\n */\n\nimport { defaultWidget, widgetMapping } from './Widgets';\nimport { layoutViews, contentTypesViews, defaultView } from './Views';\nimport { nonContentRoutes } from './NonContentRoutes';\nimport ToHTMLRenderers, {\n  options as ToHTMLOptions,\n} from './RichTextEditor/ToHTML';\nimport {\n  extendedBlockRenderMap,\n  blockStyleFn,\n  listBlockTypes,\n} from './RichTextEditor/Blocks';\nimport plugins, { inlineToolbarButtons } from './RichTextEditor/Plugins';\nimport FromHTMLCustomBlockFn from './RichTextEditor/FromHTML';\nimport { customTiles, getDefaultEditTileView, messagesTiles } from './Tiles';\n\nexport const settings = {\n  host: process.env.HOST || 'localhost',\n  port: process.env.PORT || '3000',\n  apiPath: process.env.API_PATH || 'http://localhost:8080/Plone', // for Plone\n  // apiPath: process.env.API_PATH || 'http://localhost:8081/db/web', // for guillotina\n  nonContentRoutes,\n  extendedBlockRenderMap,\n  blockStyleFn,\n  listBlockTypes,\n  FromHTMLCustomBlockFn,\n  richTextEditorInlineToolbarButtons: inlineToolbarButtons,\n  richTextEditorPlugins: plugins,\n  ToHTMLRenderers,\n  ToHTMLOptions,\n};\n\nexport const widgets = {\n  widgetMapping,\n  defaultWidget,\n};\n\nexport const views = {\n  layoutViews,\n  contentTypesViews,\n  defaultView,\n};\n\nexport const tiles = {\n  customTiles,\n  getDefaultEditTileView,\n  messagesTiles,\n};\n","/**\n * Action types.\n * @module constants/ActionTypes\n */\n\nexport const ADD_COMMENT = 'ADD_COMMENT';\nexport const ADD_MESSAGE = 'ADD_MESSAGE';\nexport const COPY = 'COPY';\nexport const COPY_CONTENT = 'COPY_CONTENT';\nexport const CREATE_CONTENT = 'CREATE_CONTENT';\nexport const CREATE_GROUP = 'CREATE_GROUP';\nexport const CREATE_USER = 'CREATE_USER';\nexport const CUT = 'CUT';\nexport const DELETE_COMMENT = 'DELETE_COMMENT';\nexport const DELETE_CONTENT = 'DELETE_CONTENT';\nexport const DELETE_GROUP = 'DELETE_GROUP';\nexport const DELETE_USER = 'DELETE_USER';\nexport const EMAIL_NOTIFICATION = 'EMAIL_NOTIFICATION';\nexport const INITIAL_PASSWORD = 'INITIAL_PASSWORD';\nexport const GET_BREADCRUMBS = 'GET_BREADCRUMBS';\nexport const GET_CONTENT = 'GET_CONTENT';\nexport const GET_CONTROLPANEL = 'GET_CONTROLPANEL';\nexport const GET_DIFF = 'GET_DIFF';\nexport const GET_GROUP = 'GET_GROUP';\nexport const GET_HISTORY = 'GET_HISTORY';\nexport const GET_NAVIGATION = 'GET_NAVIGATION';\nexport const GET_PRINCIPALS = 'GET_PRINCIPALS';\nexport const GET_SCHEMA = 'GET_SCHEMA';\nexport const GET_SHARING = 'GET_SHARING';\nexport const GET_TILES = 'GET_TILES';\nexport const GET_TYPES = 'GET_TYPES';\nexport const GET_USER = 'GET_USER';\nexport const GET_VOCABULARY = 'GET_VOCABULARY';\nexport const GET_WORKFLOW = 'GET_WORKFLOW';\nexport const GET_WORKFLOW_MULTIPLE = 'GET_WORKFLOW_MULTIPLE';\nexport const LIST_ACTIONS = 'LIST_ACTIONS';\nexport const LIST_COMMENTS = 'LIST_COMMENTS';\nexport const LIST_CONTROLPANELS = 'LIST_CONTROLPANELS';\nexport const LIST_GROUPS = 'LIST_GROUPS';\nexport const LIST_ROLES = 'LIST_ROLES';\nexport const LIST_USERS = 'LIST_USERS';\nexport const LOGIN = 'LOGIN';\nexport const LOGIN_RENEW = 'LOGIN_RENEW';\nexport const LOGOUT = 'LOGOUT';\nexport const ORDER_CONTENT = 'ORDER_CONTENT';\nexport const MOVE_CONTENT = 'MOVE_CONTENT';\nexport const REMOVE_MESSAGE = 'REMOVE_MESSAGE';\nexport const PURGE_MESSAGES = 'PURGE_MESSAGES';\nexport const RESET_SEARCH_CONTENT = 'RESET_SEARCH_CONTENT';\nexport const RESET_PASSWORD = 'RESET_PASSWORD';\nexport const REVERT_HISTORY = 'REVERT_HISTORY';\nexport const SEARCH_CONTENT = 'SEARCH_CONTENT';\nexport const TRANSITION_WORKFLOW = 'TRANSITION_WORKFLOW';\nexport const UPDATE_CONTENT = 'UPDATE_CONTENT';\nexport const UPDATE_CONTROLPANEL = 'UPDATE_CONTROLPANEL';\nexport const UPDATE_COMMENT = 'UPDATE_COMMENT';\nexport const UPDATE_GROUP = 'UPDATE_GROUP';\nexport const UPDATE_PASSWORD = 'UPDATE_PASSWORD';\nexport const UPDATE_SHARING = 'UPDATE_SHARING';\nexport const UPDATE_USER = 'UPDATE_USER';\n","/**\n * ControlpanelIcons icons.\n * @module constants/ControlpanelIcons\n */\n\nexport default {\n  'date-and-time': 'calendar',\n  language: 'translate',\n  mail: 'mail',\n  navigation: 'sitemap',\n  site: 'browser',\n  search: 'search',\n  socialmedia: 'announcement',\n  editing: 'write',\n  imaging: 'image',\n  markup: 'code',\n  'moderate-comments': 'comments',\n  security: 'lock',\n  users: 'users',\n};\n","/**\n * Layouts.\n * @module constants/Layouts\n */\n\nexport default {\n  sortable_title: { label: 'Title', type: 'string' },\n  ModificationDate: { label: 'Last modified', type: 'date' },\n  EffectiveDate: { label: 'Publication date', type: 'date' },\n  review_state: { label: 'Review state', type: 'string' },\n  id: { label: 'ID', type: 'string' },\n  ExpirationDate: { label: 'Expiration date', type: 'date' },\n  CreationDate: { label: 'Created on', type: 'date' },\n  Subject: { label: 'Tags', type: 'array' },\n  portal_type: { label: 'Type', type: 'string' },\n  is_folderish: { label: 'Folder', type: 'boolean' },\n  exclude_from_nav: { label: 'Excluded from navigation', type: 'boolean' },\n  getObjSize: { label: 'Object Size', type: 'string' },\n  last_comment_date: { label: 'Last comment date', type: 'date' },\n  total_comments: { label: 'Total comments', type: 'number' },\n  end: { label: 'End Date', type: 'date' },\n  Description: { label: 'Description', type: 'string' },\n  Creator: { label: 'Creator', type: 'string' },\n  location: { label: 'Location', type: 'string' },\n  UID: { label: 'UID', type: 'string' },\n  start: { label: 'Start Date', type: 'date' },\n  Type: { label: 'Type', type: 'string' },\n};\n","/**\n * Languages.\n * @module constants/Languages\n */\n\nexport default {\n  en: 'English',\n  de: 'Deutsch',\n  nl: 'Nederlands',\n};\n","/**\n * Layouts.\n * @module constants/Layouts\n */\n\nexport default {\n  album_view: 'Album view',\n  event_listing: 'Event listing',\n  full_view: 'All content',\n  listing_view: 'Listing view',\n  summary_view: 'Summary view',\n  tabular_view: 'Tabular view',\n  layout_view: 'Mosaic layout',\n  document_view: 'Document view',\n};\n","/**\n * Error Page.\n * @module Error\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Error page.\n * @function Error\n * @returns {string} Markup of the error page.\n */\nconst Error = ({ message, stackTrace }) => (\n  <div\n    style={{\n      fontFamily: __SERVER__ ? 'Helvetica, sans-serif' : null,\n      fontSize: __SERVER__ ? '20px' : '16px',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      height: __SERVER__ ? '100vh' : null,\n    }}\n  >\n    {/* TODO: Replace inline styling with a CSS class, inline style only for __SERVER__ */}\n    <h2>Sorry, something went wrong with your request&nbsp;</h2>\n    <strong style={{ color: 'red' }}>{message}</strong>\n    <pre>{stackTrace}</pre>\n    <span style={{ textAlign: 'center' }}>\n      <p>\n        {/* eslint-disable-next-line */}\n        <a href=\"javascript: history.back()\">Navigate back</a>\n      </p>\n      <p>\n        <a href=\"/\">return to the site root</a>\n      </p>\n      <p>or try a different page.</p>\n    </span>\n  </div>\n);\n\nError.propTypes = {\n  message: PropTypes.string.isRequired,\n  stackTrace: PropTypes.string,\n};\n\nError.defaultProps = {\n  stackTrace: null,\n};\n\nexport default Error;\n","/**\n * Api helper.\n * @module helpers/Api\n */\n\nimport superagent from 'superagent';\nimport cookie from 'react-cookie';\n\nimport { settings } from '~/config';\n\nconst methods = ['get', 'post', 'put', 'patch', 'del'];\n\n/**\n * Format the url.\n * @function formatUrl\n * @param {string} path Path to be formatted.\n * @returns {string} Formatted path.\n */\nfunction formatUrl(path) {\n  const adjustedPath = path[0] !== '/' ? `/${path}` : path;\n  return `${settings.apiPath}${adjustedPath}`;\n}\n\n/**\n * Api class.\n * @class Api\n */\nexport class Api {\n  /**\n   * Constructor\n   * @method constructor\n   * @constructs Api\n   */\n  constructor() {\n    methods.forEach(method => {\n      this[method] = (path, { params, data, type } = {}) =>\n        new Promise((resolve, reject) => {\n          const request = superagent[method](formatUrl(path));\n\n          if (params) {\n            request.query(params);\n          }\n\n          const authToken = cookie.load('auth_token');\n          if (authToken) {\n            request.set('Authorization', `Bearer ${authToken}`);\n          }\n\n          request.set('Accept', 'application/json');\n\n          if (type) {\n            request.type(type);\n          }\n\n          if (data) {\n            request.send(data);\n          }\n\n          request.end(\n            (err, { body } = {}) => (err ? reject(body || err) : resolve(body)),\n          );\n        });\n    });\n  }\n}\n","/**\n * AuthToken helper.\n * @module helpers/AuthToken\n */\n\nimport cookie from 'react-cookie';\nimport jwtDecode from 'jwt-decode';\nimport { Router } from 'react-router-dom';\n\nimport { loginRenew } from '../../actions';\n\n/**\n * Get auth token method.\n * @method getAuthToken\n * @returns {undefined}\n */\nexport function getAuthToken() {\n  return cookie.load('auth_token');\n}\n\n/**\n * Persist auth token method.\n * @method persistAuthToken\n * @param {object} store Redux store.\n * @returns {undefined}\n */\nexport function persistAuthToken(store) {\n  let currentValue = getAuthToken();\n\n  /**\n   * handleChange method.\n   * @method handleChange\n   * @param {bool} initial Initial call.\n   * @returns {undefined}\n   */\n  function handleChange(initial) {\n    const previousValue = currentValue;\n    const state = store.getState();\n    currentValue = state.userSession.token;\n    if (previousValue !== currentValue || initial) {\n      if (!currentValue) {\n        cookie.remove('auth_token', { path: '/' });\n      } else {\n        cookie.save('auth_token', currentValue, {\n          path: '/',\n          expires: new Date(jwtDecode(currentValue).exp * 1000),\n        });\n        setTimeout(() => {\n          if (store.getState().userSession.token) {\n            if (\n              jwtDecode(store.getState().userSession.token).exp * 1000 >\n              new Date().getTime()\n            ) {\n              store.dispatch(loginRenew());\n            } else {\n              // Logout\n              Router.push(\n                `/logout?return_url=${\n                  store.getState().routing.locationBeforeTransitions.pathname\n                }`,\n              );\n            }\n          }\n        }, (jwtDecode(store.getState().userSession.token).exp * 1000 - new Date().getTime()) * 0.9);\n      }\n    }\n  }\n\n  store.subscribe(handleChange);\n  handleChange(true);\n}\n","import { Component, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport withSideEffect from 'react-side-effect';\n\n/**\n * @export\n * @class BodyClass\n * @extends {Component}\n */\nclass BodyClass extends Component {\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.props.children) {\n      return Children.only(this.props.children);\n    }\n    return null;\n  }\n}\n\nBodyClass.propTypes = {\n  children: PropTypes.element,\n  className: PropTypes.string,\n};\n\nBodyClass.defaultProps = {\n  children: null,\n  className: null,\n};\n\n/**\n * reducePropsToState\n * @function reducePropsToState\n * @param {*} propsList propsList\n * @returns {List} classList\n */\nfunction reducePropsToState(propsList) {\n  let classList = [];\n  propsList.map(props => {\n    if (props.className) {\n      classList = classList.concat(props.className);\n    }\n  });\n  return classList;\n}\n\n/**\n * handleStateChangeOnClient\n * @function handleStateChangeOnClient\n * @param {*} classList classList\n * @returns {null} null\n */\nfunction handleStateChangeOnClient(classList) {\n  document.body.className = '';\n  classList.map(className => {\n    if (!document.body.classList.contains(className)) {\n      document.body.classList.add(className);\n    }\n  });\n}\n\nexport default withSideEffect(reducePropsToState, handleStateChangeOnClient)(\n  BodyClass,\n);\n","/**\n * Content helper.\n * @module helpers/Content\n */\n\nimport { omitBy, mapKeys, pickBy, map } from 'lodash';\n\n/**\n * Nest content.\n * @function nestContent\n * @param {Object} props Properties.\n * @return {string} Field name of the tiles\n */\nexport function nestContent(props) {\n  if (!props['@static_behaviors']) {\n    return props;\n  }\n\n  let nestedProps = props;\n\n  map(props['@static_behaviors'], behavior => {\n    const values = mapKeys(\n      pickBy(nestedProps, (value, key) => key.indexOf(behavior) !== -1),\n      (value, key) => key.replace(`${behavior}.`, ''),\n    );\n    nestedProps = omitBy(\n      nestedProps,\n      (value, key) => key.indexOf(behavior) !== -1,\n    );\n    nestedProps = {\n      ...nestedProps,\n      [behavior]: values,\n    };\n  });\n  return nestedProps;\n}\n","/**\n * Html helper.\n * @module helpers/Html\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport serialize from 'serialize-javascript';\nimport { join } from 'lodash';\nimport { BodyClass } from '../.';\n\n/**\n * Html class.\n * Wrapper component containing HTML metadata and boilerplate tags.\n * Used in server-side code only to wrap the string output of the\n * rendered route component.\n *\n * The only thing this component doesn't (and can't) include is the\n * HTML doctype declaration, which is added to the rendered output\n * by the server.js file.\n * @function Html\n * @param {Object} props Component properties.\n * @param {Object} props.assets Assets to be rendered.\n * @param {Object} props.component Content to be rendered as child node.\n * @param {Object} props.store Store object.\n * @returns {string} Markup of the not found page.\n */\nexport const Html = ({ assets, markup, store }) => {\n  const head = Helmet.rewind();\n  const bodyClass = join(BodyClass.rewind(), ' ');\n\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        {head.base.toComponent()}\n        {head.title.toComponent()}\n        {head.meta.toComponent()}\n        {head.link.toComponent()}\n        {head.script.toComponent()}\n\n        <link rel=\"shortcut icon\" href=\"/favicon.ico\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        {assets.client.css ? (\n          <link rel=\"stylesheet\" href={assets.client.css} />\n        ) : null}\n        {process.env.NODE_ENV === 'production' ? (\n          <script src={assets.client.js} defer />\n        ) : (\n          <script src={assets.client.js} defer crossOrigin=\"true\" />\n        )}\n      </head>\n      <body className={bodyClass}>\n        <div id=\"toolbar\" />\n        <div id=\"main\" dangerouslySetInnerHTML={{ __html: markup }} />\n        <script\n          dangerouslySetInnerHTML={{\n            __html: `window.__data=${serialize(store.getState())};`,\n          }}\n          charSet=\"UTF-8\"\n        />\n      </body>\n    </html>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nHtml.propTypes = {\n  assets: PropTypes.shape({\n    styles: PropTypes.object,\n    javascript: PropTypes.shape({\n      main: PropTypes.string,\n    }),\n  }).isRequired,\n  markup: PropTypes.string.isRequired,\n  store: PropTypes.shape({\n    getState: PropTypes.func,\n  }).isRequired,\n};\n","/**\n * Sitemap helper.\n * @module helpers/Sitemap\n */\n\nimport superagent from 'superagent';\nimport { map } from 'lodash';\nimport cookie from 'react-cookie';\nimport zlib from 'zlib';\n\nimport { settings } from '~/config';\n\n/**\n * Generate sitemap\n * @function generateSitemap\n * @param {Object} req Request object\n * @return {string} Generated sitemap\n */\nexport const generateSitemap = req =>\n  new Promise(resolve => {\n    const url = `${req.protocol}://${req.get('Host')}`;\n    const request = superagent.get(\n      `${settings.apiPath}/@search?metadata_fields=modified`,\n    );\n    request.set('Accept', 'application/json');\n    const authToken = cookie.load('auth_token');\n    if (authToken) {\n      request.set('Authorization', `Bearer ${authToken}`);\n    }\n    request.end((error, { body } = {}) => {\n      if (error) {\n        resolve(body || error);\n      } else {\n        const items = map(\n          body.items,\n          item =>\n            `  <url>\\n    <loc>${item['@id'].replace(\n              settings.apiPath,\n              url,\n            )}</loc>\\n    <lastmod>${item.modified}</lastmod>\\n  </url>`,\n        );\n        const result = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\">\\n${items.join(\n          '\\n',\n        )}\\n</urlset>`;\n        zlib.gzip(Buffer.from(result, 'utf8'), (err, buffer) => {\n          resolve(buffer);\n        });\n      }\n    });\n  });\n","/**\n * Tiles helper.\n * @module helpers/Tiles\n */\n\nimport { endsWith, find, keys } from 'lodash';\n\n/**\n * Get tiles field.\n * @function getTilesFieldname\n * @param {Object} props Properties.\n * @return {string} Field name of the tiles\n */\nexport function getTilesFieldname(props) {\n  return find(keys(props), key => endsWith(key, 'tiles')) || 'tiles';\n}\n\n/**\n * Get tiles layout field.\n * @function getTilesLayoutFieldname\n * @param {Object} props Properties.\n * @return {string} Field name of the tiles layout\n */\nexport function getTilesLayoutFieldname(props) {\n  return (\n    find(keys(props), key => endsWith(key, 'tiles_layout')) || 'tiles_layout'\n  );\n}\n\n/**\n * Has tiles data.\n * @function hasTilesData\n * @param {Object} props Properties.\n * @return {boolean} True if it has tiles data.\n */\nexport function hasTilesData(props) {\n  return find(keys(props), key => endsWith(key, 'tiles')) !== undefined;\n}\n","/**\n * Url helper.\n * @module helpers/Url\n */\n\nimport { last, memoize } from 'lodash';\nimport { settings } from '~/config';\n\n/**\n * Get base url.\n * @function getBaseUrl\n * @param {string} url Url to be parsed.\n * @return {string} Base url of content object.\n */\nexport const getBaseUrl = memoize(url => {\n  let adjustedUrl = settings.nonContentRoutes.reduce(\n    (acc, item) => acc.replace(item, ''),\n    url,\n  );\n\n  adjustedUrl = adjustedUrl || '/';\n  return adjustedUrl === '/' ? '' : adjustedUrl;\n});\n\n/**\n * Get view of an url.\n * @function getView\n * @param {string} url Url to be parsed.\n * @return {string} View of content object.\n */\nexport function getView(url) {\n  const view = last(url.replace(/\\?.*$/, '').split('/'));\n  if (\n    [\n      'add',\n      'layout',\n      'contents',\n      'edit',\n      'delete',\n      'diff',\n      'history',\n      'sharing',\n    ].indexOf(view) === -1\n  ) {\n    return 'view';\n  }\n  return view === 'layout' ? 'edit' : view;\n}\n\n/**\n * Get icon\n * @method getIcon\n * @param {string} type Type of the item.\n * @param {bool} isFolderish Is folderish.\n * @returns {string} Icon name.\n */\nexport function getIcon(type, isFolderish) {\n  switch (type) {\n    case 'Document':\n      return 'file text outline';\n    case 'Image':\n      return 'file image outline';\n    case 'File':\n      return 'attach';\n    case 'Link':\n      return 'linkify';\n    case 'Event':\n      return 'calendar';\n    default:\n      return isFolderish ? 'folder open outline' : 'file outline';\n  }\n}\n","/**\n * Point of contact for helper modules.\n * @module helpers\n * @example import { Api, Html } from 'helpers';\n */\n\nexport { Api } from './Api/Api';\nexport { Html } from './Html/Html';\nexport { getAuthToken, persistAuthToken } from './AuthToken/AuthToken';\nexport { getBaseUrl, getIcon, getView } from './Url/Url';\nexport { generateSitemap } from './Sitemap/Sitemap';\nexport { nestContent } from './Content/Content';\nexport {\n  getTilesFieldname,\n  getTilesLayoutFieldname,\n  hasTilesData,\n} from './Tiles/Tiles';\nexport BodyClass from './BodyClass/BodyClass';\n","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M14,28 L14,18 L21,18 C23.757,18 26,20.243 26,23 C26,25.757 23.757,28 21,28 L14,28 Z M20,8 C22,8 23.5,9.57 23.5,11.5 C23.5,13.43 22,15 20,15 L14,15 L14,8 L20,8 Z M29,23 C29,19.981 27.318,17.348 24.843,15.987 C25.907,14.819 26.5,13.24 26.5,11.5 C26.5,8.226 24.41,5.517 21,5.072 L21,5 L14,5 L11,5 L9,5 L9,8 L11,8 L11,28 L9,28 L9,31 L22,31 L22,30.931 C25.94,30.436 29,27.072 29,23 L29,23 Z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M6,11 C5.449,11 5,11.448 5,12 L5,26 C5,26.552 5.449,27 6,27 L30,27 C30.551,27 31,26.552 31,26 L31,12 C31,11.448 30.551,11 30,11 L25.382,11 L23.382,7 L12.618,7 L10.618,11 L6,11 Z M30,29 L6,29 C4.346,29 3,27.654 3,26 L3,12 C3,10.346 4.346,9 6,9 L9.382,9 L11.382,5 L24.618,5 L26.618,9 L30,9 C31.654,9 33,10.346 33,12 L33,26 C33,27.654 31.654,29 30,29 L30,29 Z\\\"/><path d=\\\"M18 13C15.243 13 13 15.243 13 18 13 20.757 15.243 23 18 23 20.757 23 23 20.757 23 18 23 15.243 20.757 13 18 13M18 25C14.14 25 11 21.859 11 18 11 14.141 14.14 11 18 11 21.86 11 25 14.141 25 18 25 21.859 21.86 25 18 25M29.5 14C29.5 14.828 28.828 15.5 28 15.5 27.172 15.5 26.5 14.828 26.5 14 26.5 13.172 27.172 12.5 28 12.5 28.828 12.5 29.5 13.172 29.5 14\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M19 9L17 9 17 17 9 17 9 19 17 19 17 27 19 27 19 19 27 19 27 17 19 17z\\\"/><path d=\\\"M18,31 C10.832,31 5,25.168 5,18 C5,10.832 10.832,5 18,5 C25.168,5 31,10.832 31,18 C31,25.168 25.168,31 18,31 M18,3 C9.729,3 3,9.729 3,18 C3,26.271 9.729,33 18,33 C26.271,33 33,26.271 33,18 C33,9.729 26.271,3 18,3\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M27.899 9.515L26.485 8.101 18 16.586 9.514 8.101 8.1 9.515 16.586 18 8.1 26.486 9.514 27.9 18 19.414 26.485 27.9 27.899 26.486 19.414 18z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M27,30 C27,30.552 26.551,31 26,31 L12,31 C11.449,31 11,30.552 11,30 L11,9 L27,9 L27,30 Z M19,5 C20.103,5 21,5.897 21,7 L17,7 C17,5.897 17.897,5 19,5 L19,5 Z M31,7 L23,7 C23,4.794 21.206,3 19,3 C16.794,3 15,4.794 15,7 L7,7 L7,9 L9,9 L9,30 C9,31.654 10.346,33 12,33 L26,33 C27.654,33 29,31.654 29,30 L29,9 L31,9 L31,7 Z\\\"/><path d=\\\"M15 28L17 28 17 12 15 12zM21 28L23 28 23 12 21 12z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path d=\\\"M13 16C11.897 16 11 16.897 11 18 11 19.103 11.897 20 13 20 14.103 20 15 19.103 15 18 15 16.897 14.103 16 13 16M13 22C10.794 22 9 20.206 9 18 9 15.794 10.794 14 13 14 15.206 14 17 15.794 17 18 17 20.206 15.206 22 13 22M23 16C21.897 16 21 16.897 21 18 21 19.103 21.897 20 23 20 24.103 20 25 19.103 25 18 25 16.897 24.103 16 23 16M23 22C20.794 22 19 20.206 19 18 19 15.794 20.794 14 23 14 25.206 14 27 15.794 27 18 27 20.206 25.206 22 23 22M13 26C11.897 26 11 26.897 11 28 11 29.103 11.897 30 13 30 14.103 30 15 29.103 15 28 15 26.897 14.103 26 13 26M13 32C10.794 32 9 30.206 9 28 9 25.794 10.794 24 13 24 15.206 24 17 25.794 17 28 17 30.206 15.206 32 13 32M23 26C21.897 26 21 26.897 21 28 21 29.103 21.897 30 23 30 24.103 30 25 29.103 25 28 25 26.897 24.103 26 23 26M23 32C20.794 32 19 30.206 19 28 19 25.794 20.794 24 23 24 25.206 24 27 25.794 27 28 27 30.206 25.206 32 23 32M13 6C11.897 6 11 6.897 11 8 11 9.103 11.897 10 13 10 14.103 10 15 9.103 15 8 15 6.897 14.103 6 13 6M13 12C10.794 12 9 10.206 9 8 9 5.794 10.794 4 13 4 15.206 4 17 5.794 17 8 17 10.206 15.206 12 13 12M23 6C21.897 6 21 6.897 21 8 21 9.103 21.897 10 23 10 24.103 10 25 9.103 25 8 25 6.897 24.103 6 23 6M23 12C20.794 12 19 10.206 19 8 19 5.794 20.794 4 23 4 25.206 4 27 5.794 27 8 27 10.206 25.206 12 23 12\\\" fill-rule=\\\"evenodd\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M3,5.0001 L3,29.0001 L33,29.0001 L33,9.0001 L17.414,9.0001 L13.414,5.0001 L3,5.0001 Z M5,7.0001 L12.586,7.0001 L16.585,11.0001 L31,11.0001 L31,15.0001 L5,15.0001 L5,7.0001 Z M5,27.0001 L31,27.0001 L31,17.0001 L5,17.0001 L5,27.0001 Z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path fill-rule=\\\"nonzero\\\" d=\\\"M7,13 L9,11 L9,25 L7,23 L29,23 L27,25 L27,11 L29,13 L7,13 Z M29,11 L29,25 L7,25 L7,11 L29,11 Z\\\"/><path d=\\\"M7 31L29 31 29 29 7 29zM7 7L29 7 29 5 7 5z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path fill-rule=\\\"nonzero\\\" d=\\\"M3,7 L5,5 L5,25 L3,23 L33,23 L31,25 L31,5 L33,7 L3,7 Z M33,5 L33,25 L3,25 L3,5 L33,5 Z\\\"/><path d=\\\"M7 31L29 31 29 29 7 29zM25.314 10.757L28.557 14 7.444 14 10.687 10.757 9.272 9.343 3.616 15 9.272 20.657 10.687 19.243 7.444 16 28.557 16 25.314 19.243 26.728 20.657 32.385 15 26.728 9.343z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M23 7L33 7 33 5 23 5z\\\"/><path fill-rule=\\\"nonzero\\\" d=\\\"M3,7 L5,5 L5,19 L3,17 L19,17 L17,19 L17,5 L19,7 L3,7 Z M19,5 L19,19 L3,19 L3,5 L19,5 Z\\\"/><path d=\\\"M23 13L33 13 33 11 23 11zM23 19L33 19 33 17 23 17zM3 31L33 31 33 29 3 29zM3 25L33 25 33 23 3 23z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M3 7L13 7 13 5 3 5z\\\"/><path fill-rule=\\\"nonzero\\\" d=\\\"M17,7 L19,5 L19,19 L17,17 L33,17 L31,19 L31,5 L33,7 L17,7 Z M33,5 L33,19 L17,19 L17,5 L33,5 Z\\\"/><path d=\\\"M3 13L13 13 13 11 3 11zM3 19L13 19 13 17 3 17zM3 31L33 31 33 29 3 29zM3 25L33 25 33 23 3 23z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M7,29 L29,29 L29,25 L7,25 L7,29 Z M7,23 L29,23 L29,7 L7,7 L7,23 Z M5,31 L31,31 L31,5 L5,5 L5,31 Z\\\"/><path d=\\\"M15.012 13.037L18.781 19.633 21.917 16.497 25.219 20.625 26.781 19.375 22.083 13.503 19.219 16.367 14.988 8.963 9.126 19.515 10.874 20.485z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M25 7L25 5 19 5 19 7 20.612 7 13.279 29 11 29 11 31 17 31 17 29 15.388 29 22.721 7z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M27.1318,7.333 C24.4028,4.604 19.9618,4.604 17.2328,7.333 L12.9898,11.576 C11.8428,12.723 11.1288,14.248 10.9778,15.871 C10.8228,17.541 11.2708,19.211 12.2378,20.576 C12.4818,20.919 12.7278,21.213 12.9888,21.475 C13.7848,22.271 14.7778,22.868 15.8608,23.202 C16.5498,23.415 17.2548,23.519 17.9518,23.518 C19.7808,23.518 21.5598,22.804 22.8888,21.475 L23.9498,20.414 L22.5358,19 L21.4748,20.061 C20.1648,21.371 18.2388,21.842 16.4498,21.291 C15.6668,21.049 14.9778,20.635 14.4038,20.061 C14.2218,19.879 14.0478,19.668 13.8698,19.418 C13.1778,18.443 12.8588,17.249 12.9688,16.056 C13.0768,14.896 13.5868,13.808 14.4038,12.99 L18.6468,8.747 C20.5958,6.798 23.7688,6.798 25.7178,8.747 C26.6568,9.687 27.1748,10.942 27.1748,12.283 C27.1748,13.623 26.6568,14.878 25.7178,15.818 L27.1318,17.232 C28.4488,15.915 29.1748,14.157 29.1748,12.283 C29.1748,10.408 28.4488,8.65 27.1318,7.333\\\"/><path d=\\\"M25.0107,16.5254 C24.2147,15.7294 23.2217,15.1324 22.1387,14.7984 C19.6417,14.0284 16.9477,14.6894 15.1107,16.5254 L14.0507,17.5864 L15.4647,19.0004 L16.5247,17.9394 C17.8357,16.6294 19.7587,16.1554 21.5497,16.7094 C22.3337,16.9514 23.0217,17.3644 23.5957,17.9394 C23.7777,18.1214 23.9527,18.3314 24.1307,18.5824 C24.8217,19.5564 25.1417,20.7514 25.0317,21.9444 C24.9237,23.1034 24.4137,24.1924 23.5957,25.0104 L19.3537,29.2534 C17.4047,31.2024 14.2317,31.2024 12.2817,29.2534 C11.3427,28.3134 10.8247,27.0574 10.8247,25.7174 C10.8247,24.3774 11.3427,23.1214 12.2817,22.1824 L10.8677,20.7684 C9.5507,22.0854 8.8247,23.8424 8.8247,25.7174 C8.8247,27.5924 9.5507,29.3504 10.8677,30.6674 C12.2327,32.0314 14.0257,32.7134 15.8177,32.7134 C17.6107,32.7134 19.4027,32.0314 20.7677,30.6674 L25.0107,26.4244 C26.1567,25.2774 26.8717,23.7524 27.0227,22.1294 C27.1777,20.4594 26.7297,18.7894 25.7617,17.4244 C25.5177,17.0814 25.2717,16.7874 25.0107,16.5254\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M11 11L33 11 33 8.999 11 8.999zM11 19L33 19 33 17 11 17zM11 27L33 27 33 25 11 25zM6 11.5C6.828 11.5 7.5 10.828 7.5 10 7.5 9.172 6.828 8.5 6 8.5 5.172 8.5 4.5 9.172 4.5 10 4.5 10.828 5.172 11.5 6 11.5M6 19.5C6.828 19.5 7.5 18.828 7.5 18 7.5 17.172 6.828 16.5 6 16.5 5.172 16.5 4.5 17.172 4.5 18 4.5 18.828 5.172 19.5 6 19.5M6 27.5C6.828 27.5 7.5 26.828 7.5 26 7.5 25.172 6.828 24.5 6 24.5 5.172 24.5 4.5 25.172 4.5 26 4.5 26.828 5.172 27.5 6 27.5\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M11 11L33 11 33 8.999 11 8.999zM11 19L33 19 33 17 11 17zM11 27L33 27 33 25 11 25zM6.835 13L6.835 8.245 6.773 8.245 5.416 9.199 5.416 8.008 6.835 7.002 8.096 7.002 8.096 13zM8.69463281 21L4.46538477 21 4.46538477 20.0869141 6.40776758 18.0449219C6.65402532 17.7626939 6.83525723 17.5109061 6.95146875 17.2895508 7.06768027 17.0681955 7.12578516 16.875896 7.12578516 16.7126465 7.12578516 16.4802234 7.06698854 16.2948412 6.94939355 16.1564941 6.83179857 16.0181471 6.65540873 15.9489746 6.42021875 15.9489746 6.20993124 15.9489746 6.044609 16.0382071 5.92424707 16.2166748 5.80388514 16.3951425 5.74370508 16.62272 5.74370508 16.8994141L4.37407617 16.8994141 4.36577539 16.8745117C4.35194069 16.3155897 4.53455605 15.8417581 4.91362695 15.4530029 5.29269786 15.0642477 5.7948901 14.869873 6.42021875 14.869873 7.08428457 14.869873 7.60238649 15.0331201 7.97454004 15.3596191 8.34669359 15.6861182 8.53276758 16.1329724 8.53276758 16.7001953 8.53276758 17.0820332 8.43385092 17.4195949 8.23601465 17.7128906 8.03817837 18.0061864 7.67363937 18.441973 7.14238672 19.0202637L6.32475977 19.8959961 6.33721094 19.9208984 8.69463281 19.9208984 8.69463281 21zM5.74370508 25.3933105L6.40361719 25.3933105C6.65540881 25.3933105 6.84909177 25.3255215 6.98467188 25.1899414 7.12025198 25.0543613 7.18804102 24.8662121 7.18804102 24.6254883 7.18804102 24.4345694 7.12716923 24.2740892 7.00542383 24.144043 6.88367843 24.0139967 6.70659687 23.9489746 6.47417383 23.9489746 6.29155573 23.9489746 6.13107556 24.0015457 5.99272852 24.1066895 5.85438147 24.2118332 5.78520898 24.3474113 5.78520898 24.5134277L4.42388086 24.5134277 4.41558008 24.4885254C4.39897843 24.0070777 4.58851104 23.6169449 4.98418359 23.3181152 5.37985615 23.0192856 5.85991319 22.869873 6.42436914 22.869873 7.08013414 22.869873 7.60446158 23.0199773 7.99736719 23.3201904 8.3902728 23.6204035 8.58672266 24.0458143 8.58672266 24.5964355 8.58672266 24.8703627 8.5016405 25.1228423 8.33147363 25.3538818 8.16130677 25.5849214 7.93372929 25.7654616 7.64873438 25.8955078 7.97246646 26.0144863 8.22563776 26.1950265 8.40825586 26.4371338 8.59087396 26.6792411 8.68218164 26.9690738 8.68218164 27.3066406 8.68218164 27.8600288 8.47051384 28.2951237 8.04717188 28.6119385 7.62382991 28.9287532 7.08290108 29.0871582 6.42436914 29.0871582 5.85714625 29.0871582 5.36117953 28.9384374 4.9364541 28.6409912 4.51172867 28.3435451 4.30628639 27.9126005 4.32012109 27.3481445L4.32842188 27.3232422 5.69805078 27.3232422C5.69805078 27.5169281 5.77344879 27.6794834 5.92424707 27.8109131 6.07504535 27.9423428 6.25835244 28.0080566 6.47417383 28.0080566 6.72043157 28.0080566 6.91688143 27.9388842 7.0635293 27.8005371 7.21017717 27.6621901 7.2835 27.4878754 7.2835 27.2775879 7.2835 26.9842922 7.20671854 26.7705492 7.05315332 26.6363525 6.8995881 26.5021559 6.68307822 26.4350586 6.40361719 26.4350586L5.74370508 26.4350586 5.74370508 25.3933105z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M31,25 L29,25 L29,24.18 L22.259,22.832 L13.196,21.02 L12.261,20.833 L7,19.78 L7,21 L5,21 L5,15 L7,15 L7,16.22 L29,11.82 L29,11 L31,11 L31,25 Z M20.502,25.868 C20.374,26.384 19.841,26.719 19.315,26.601 L14.221,25.469 C13.956,25.41 13.73,25.25 13.587,25.019 C13.445,24.787 13.402,24.514 13.468,24.25 L13.739,23.167 L20.823,24.584 L20.502,25.868 Z M27,9 L27,10.18 L9,13.78 L9,13 L3,13 L3,23 L9,23 L9,22.22 L11.776,22.775 L11.528,23.765 C11.33,24.557 11.457,25.375 11.886,26.07 C12.315,26.764 12.991,27.244 13.788,27.421 L18.881,28.553 C19.096,28.601 19.315,28.625 19.534,28.625 C20.912,28.625 22.108,27.691 22.443,26.353 L22.785,24.977 L27,25.82 L27,27 L33,27 L33,9 L27,9 Z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path d=\\\"M28 18L28 10 20 10 20 18 26 18C26 21.3137085 23.3137085 24 20 24L20 26C24.418278 26 28 22.418278 28 18L28 18zM26 12L26 16 22 16 22 12 26 12 26 12zM16 18L16 10 8 10 8 18 14 18C14 21.3137085 11.3137085 24 8 24L8 26C12.418278 26 16 22.418278 16 18L16 18zM14 12L14 16 10 16 10 12 14 12 14 12z\\\" fill-rule=\\\"evenodd\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M17 9L11 9 11 13 13 13 13 11 17 11 17 29 15 29 15 31 17 31 19 31 21 31 21 29 19 29 19 11 23 11 23 13 25 13 25 9 19 9z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M19 5L17 5 9 5 9 9 11 9 11 7 17 7 17 29 15 29 15 31 17 31 19 31 21 31 21 29 19 29 19 7 25 7 25 9 27 9 27 5z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M23 13C21.897 13 21 13.897 21 15 21 16.103 21.897 17 23 17 24.103 17 25 16.103 25 15 25 13.897 24.103 13 23 13M23 19C20.794 19 19 17.206 19 15 19 12.794 20.794 11 23 11 25.206 11 27 12.794 27 15 27 17.206 25.206 19 23 19M14 11C13.449 11 13 11.448 13 12 13 12.552 13.449 13 14 13 14.551 13 15 12.552 15 12 15 11.448 14.551 11 14 11M14 15C12.346 15 11 13.654 11 12 11 10.346 12.346 9 14 9 15.654 9 17 10.346 17 12 17 13.654 15.654 15 14 15\\\"/><path d=\\\"M17.9995,5 C10.8315,5 4.9995,10.832 4.9995,18 C4.9995,23.71 8.8185,28.835 14.2855,30.462 C14.3345,30.476 14.3805,30.483 14.4225,30.483 C14.6055,30.483 14.7315,30.337 14.7835,30.211 C14.8535,30.044 14.8215,29.893 14.6905,29.762 C13.6245,28.695 13.1025,27.217 13.2585,25.707 C13.4145,24.202 14.2365,22.859 15.5145,22.023 C17.4195,20.777 20.1945,21.123 21.8545,22.784 L26.0055,26.935 C26.3965,27.325 27.0785,27.309 27.4595,26.901 C30.2035,23.993 31.4415,20.031 30.8555,16.033 C30.0195,10.323 25.2375,5.718 19.4865,5.083 C18.9915,5.028 18.4915,5 17.9995,5 M14.4225,32.483 L14.4225,32.483 C14.1865,32.483 13.9485,32.448 13.7145,32.378 C7.4065,30.501 2.9995,24.589 2.9995,18 C2.9995,9.729 9.7285,3 17.9995,3 C18.5645,3 19.1385,3.032 19.7065,3.095 C26.3475,3.828 31.8685,9.148 32.8335,15.744 C33.5095,20.351 32.0805,24.918 28.9145,28.274 C27.7935,29.463 25.7435,29.503 24.5905,28.349 L20.4405,24.198 C19.4285,23.187 17.7465,22.956 16.6085,23.697 C15.8255,24.21 15.3425,24.996 15.2475,25.912 C15.1535,26.821 15.4665,27.708 16.1055,28.348 C16.8105,29.053 17.0115,30.06 16.6315,30.977 C16.2515,31.892 15.3845,32.483 14.4225,32.483\\\"/><path d=\\\"M10,20 C8.897,20 8,19.103 8,18 C8,16.897 8.897,16 10,16 C11.103,16 12,16.897 12,18 C12,19.103 11.103,20 10,20\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M21.0107,16.8418 C20.2147,16.0458 19.2217,15.4488 18.1387,15.1148 C15.6417,14.3438 12.9477,15.0058 11.1107,16.8418 L10.0507,17.9028 L11.4647,19.3168 L12.5247,18.2558 C13.8347,16.9448 15.7587,16.4718 17.5497,17.0258 C18.3337,17.2678 19.0217,17.6808 19.5957,18.2558 C19.7777,18.4378 19.9527,18.6478 20.1307,18.8988 C20.8217,19.8728 21.1417,21.0678 21.0317,22.2608 C20.9237,23.4198 20.4137,24.5088 19.5957,25.3268 L15.3537,29.5698 C13.4047,31.5188 10.2317,31.5188 8.2817,29.5698 C7.3427,28.6298 6.8247,27.3738 6.8247,26.0338 C6.8247,24.6938 7.3427,23.4378 8.2817,22.4988 L6.8677,21.0848 C5.5507,22.4018 4.8247,24.1588 4.8247,26.0338 C4.8247,27.9088 5.5507,29.6668 6.8677,30.9838 C8.2327,32.3478 10.0257,33.0298 11.8177,33.0298 C13.6107,33.0298 15.4027,32.3478 16.7677,30.9838 L21.0107,26.7408 C22.1567,25.5938 22.8717,24.0688 23.0227,22.4458 C23.1777,20.7758 22.7297,19.1058 21.7617,17.7408 C21.5177,17.3978 21.2717,17.1038 21.0107,16.8418\\\"/><path d=\\\"M10.1343 22.0127C10.4893 22.2367 10.8293 22.4137 11.1733 22.5567 12.0123 22.9047 12.9223 23.0837 13.8363 23.0837 14.0523 23.0837 14.2703 23.0737 14.4863 23.0537 16.3673 22.8777 18.1243 21.9367 19.3063 20.4717L17.7493 19.2167C16.9053 20.2627 15.6473 20.9357 14.3003 21.0617 13.4823 21.1387 12.6873 21.0197 11.9393 20.7087 11.7003 20.6107 11.4583 20.4827 11.1983 20.3197 10.1863 19.6837 9.4343 18.7027 9.0803 17.5577 8.7363 16.4457 8.7893 15.2447 9.2323 14.1767L11.5283 8.6327C12.5833 6.0857 15.5133 4.8707 18.0613 5.9267L18.8263 4.0787C15.2603 2.6027 11.1583 4.3027 9.6803 7.8667L7.3843 13.4107C6.7633 14.9087 6.6873 16.5927 7.1693 18.1487 7.6653 19.7507 8.7183 21.1227 10.1343 22.0127M25 15.316L31 15.316 31 13.316 25 13.316zM24.949 3.633L23.052 3 21.052 9 22.949 9.633zM31.581 7.13L30.419 5.502 23.419 10.502 24.581 12.13zM24.553 18.211L28.553 20.211 29.448 18.422 25.448 16.422z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path d=\\\"M3 27L23 27 23 9 3 9 3 27zM5 24.999L21 24.999 21 11 5 11 5 24.999zM24.9996 15.4644L24.9996 20.5354 32.9996 25.8684 32.9996 10.1314 24.9996 15.4644zM27.0006 19.4654L27.0006 16.5354 30.9996 13.8684 30.9996 22.1314 27.0006 19.4654z\\\" fill-rule=\\\"evenodd\\\"/>\"}","import start from './start-server';\n\nstart();\n","/**\n * Api middleware.\n * @module middleware/api\n */\n\n/**\n * Api middleware.\n * @function\n * @param {Object} api Api object.\n * @returns {Promise} Action promise.\n */\nexport default api => ({ dispatch, getState }) => next => action => {\n  if (typeof action === 'function') {\n    return action(dispatch, getState);\n  }\n\n  const { request, type, ...rest } = action;\n\n  if (!request) {\n    return next(action);\n  }\n\n  next({ ...rest, type: `${type}_PENDING` });\n\n  const actionPromise = Array.isArray(request)\n    ? Promise.all(\n        request.map(item => api[item.op](item.path, { data: item.data })),\n      )\n    : api[request.op](request.path, { data: request.data });\n  actionPromise.then(\n    result => next({ ...rest, result, type: `${type}_SUCCESS` }),\n    error => next({ ...rest, error, type: `${type}_FAIL` }),\n  );\n\n  return actionPromise;\n};\n","import Raven from 'raven-js';\n\nconst crashReporter = store => next => action => {\n  try {\n    return next(action);\n  } catch (error) {\n    if (__CLIENT__ && process.env.SENTRY_DSN) {\n      Raven.captureException(error, {\n        extra: {\n          action,\n          state: store.getState(),\n        },\n      });\n    }\n    throw error;\n  }\n};\n\nexport default crashReporter;\n","/**\n * Point of contact for middleware modules.\n * @module middleware\n * @example import { api } from 'middleware';\n */\n\nexport api from './api';\nexport crashReporter from './crashReporter';\n","/**\n * Actions reducer.\n * @module reducers/actions/actions\n */\n\nimport { LIST_ACTIONS } from '../../constants/ActionTypes';\n\nconst initialState = {\n  error: null,\n  actions: {\n    object: [],\n    object_buttons: [],\n    site_actions: [],\n    user: [],\n    document_actions: [],\n    portal_tabs: [],\n  },\n  loaded: false,\n  loading: false,\n};\n\n/**\n * Actions reducer.\n * @function actions\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function actions(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${LIST_ACTIONS}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loaded: false,\n        loading: true,\n      };\n    case `${LIST_ACTIONS}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        actions: action.result,\n        loaded: true,\n        loading: false,\n      };\n    case `${LIST_ACTIONS}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        actions: {},\n        loaded: false,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Breadcrumbs reducer.\n * @module reducers/breadcrumbs/breadcrumbs\n */\n\nimport { map } from 'lodash';\nimport { settings } from '~/config';\n\nimport { GET_BREADCRUMBS } from '../../constants/ActionTypes';\n\nconst initialState = {\n  error: null,\n  items: [],\n  loaded: false,\n  loading: false,\n};\n\n/**\n * Breadcrumbs reducer.\n * @function breadcrumbs\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function breadcrumbs(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${GET_BREADCRUMBS}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loaded: false,\n        loading: true,\n      };\n    case `${GET_BREADCRUMBS}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        items: map(action.result.items, item => ({\n          title: item.title,\n          url: item['@id'].replace(settings.apiPath, ''),\n        })),\n        loaded: true,\n        loading: false,\n      };\n    case `${GET_BREADCRUMBS}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        items: [],\n        loaded: false,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Clipboard reducer.\n * @module reducers/clipboard/clipboard\n */\n\nimport {\n  COPY,\n  CUT,\n  COPY_CONTENT,\n  MOVE_CONTENT,\n} from '../../constants/ActionTypes';\n\nconst initialState = {\n  action: null,\n  source: null,\n  request: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n};\n\n/**\n * Clipboard reducer.\n * @function clipboard\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function clipboard(state = initialState, action = {}) {\n  switch (action.type) {\n    case COPY:\n      return {\n        ...state,\n        action: 'copy',\n        source: action.source,\n      };\n    case CUT:\n      return {\n        ...state,\n        action: 'cut',\n        source: action.source,\n      };\n    case `${COPY_CONTENT}_PENDING`:\n    case `${MOVE_CONTENT}_PENDING`:\n      return {\n        ...state,\n        request: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n    case `${COPY_CONTENT}_SUCCESS`:\n    case `${MOVE_CONTENT}_SUCCESS`:\n      return {\n        ...state,\n        request: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${COPY_CONTENT}_FAIL`:\n    case `${MOVE_CONTENT}_FAIL`:\n      return {\n        ...state,\n        request: {\n          loading: false,\n          loaded: false,\n          error: action.error.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Comments reducer.\n * @module reducers/comments/comments\n */\n\nimport {\n  ADD_COMMENT,\n  DELETE_COMMENT,\n  UPDATE_COMMENT,\n  LIST_COMMENTS,\n} from '../../constants/ActionTypes';\n\nconst initialState = {\n  add: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  delete: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  update: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  list: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  items: [],\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Comments reducer.\n * @function comments\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function comments(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${ADD_COMMENT}_PENDING`:\n    case `${DELETE_COMMENT}_PENDING`:\n    case `${UPDATE_COMMENT}_PENDING`:\n    case `${LIST_COMMENTS}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n    case `${LIST_COMMENTS}_SUCCESS`:\n      return {\n        ...state,\n        items: action.result.items,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${ADD_COMMENT}_SUCCESS`:\n    case `${DELETE_COMMENT}_SUCCESS`:\n    case `${UPDATE_COMMENT}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${ADD_COMMENT}_FAIL`:\n    case `${LIST_COMMENTS}_FAIL`:\n      return {\n        ...state,\n        items: [],\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Content reducer.\n * @module reducers/content/content\n */\n\nimport { omit, map, mapKeys } from 'lodash';\n\nimport { settings } from '~/config';\n\nimport {\n  CREATE_CONTENT,\n  DELETE_CONTENT,\n  UPDATE_CONTENT,\n  GET_CONTENT,\n  ORDER_CONTENT,\n} from '../../constants/ActionTypes';\n\nconst initialState = {\n  create: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  delete: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  update: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  get: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  order: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  data: null,\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Content reducer.\n * @function content\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function content(state = initialState, action = {}) {\n  let { result } = action;\n  switch (action.type) {\n    case `${CREATE_CONTENT}_PENDING`:\n    case `${DELETE_CONTENT}_PENDING`:\n    case `${UPDATE_CONTENT}_PENDING`:\n    case `${GET_CONTENT}_PENDING`:\n    case `${ORDER_CONTENT}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n    case `${CREATE_CONTENT}_SUCCESS`:\n    case `${GET_CONTENT}_SUCCESS`:\n      if (result['@static_behaviors']) {\n        map(result['@static_behaviors'], behavior => {\n          result = {\n            ...omit(result, behavior),\n            ...mapKeys(result[behavior], (value, key) => `${behavior}.${key}`),\n          };\n        });\n      }\n      return {\n        ...state,\n        data: {\n          ...result,\n          items:\n            action.result &&\n            action.result.items &&\n            action.result.items.map(item => ({\n              ...item,\n              url: item['@id'].replace(settings.apiPath, ''),\n            })),\n        },\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${UPDATE_CONTENT}_SUCCESS`:\n    case `${DELETE_CONTENT}_SUCCESS`:\n    case `${ORDER_CONTENT}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${CREATE_CONTENT}_FAIL`:\n    case `${DELETE_CONTENT}_FAIL`:\n    case `${UPDATE_CONTENT}_FAIL`:\n    case `${GET_CONTENT}_FAIL`:\n    case `${ORDER_CONTENT}_FAIL`:\n      return {\n        ...state,\n        data: null,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Controlpanels reducer.\n * @module reducers/controlpanels/controlpanels\n */\nimport { settings } from '~/config';\nimport {\n  GET_CONTROLPANEL,\n  LIST_CONTROLPANELS,\n  UPDATE_CONTROLPANEL,\n} from '../../constants/ActionTypes';\n\nconst initialState = {\n  get: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  list: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  update: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  controlpanel: null,\n  controlpanels: [],\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Controlpanels reducer.\n * @function controlpanels\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function controlpanels(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${GET_CONTROLPANEL}_PENDING`:\n    case `${LIST_CONTROLPANELS}_PENDING`:\n    case `${UPDATE_CONTROLPANEL}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n    case `${GET_CONTROLPANEL}_SUCCESS`:\n      return {\n        ...state,\n        controlpanel: {\n          ...action.result,\n          '@id': action.result['@id'].replace(settings.apiPath, ''),\n        },\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${UPDATE_CONTROLPANEL}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${LIST_CONTROLPANELS}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n        controlpanels: action.result,\n      };\n    case `${GET_CONTROLPANEL}_FAIL`:\n      return {\n        ...state,\n        controlpanel: null,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    case `${LIST_CONTROLPANELS}_FAIL`:\n      return {\n        ...state,\n        controlpanels: [],\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    case `${UPDATE_CONTROLPANEL}_FAIL`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Diff reducer.\n * @module reducers/diff/diff\n */\n\nimport { GET_DIFF } from '../../constants/ActionTypes';\n\nconst initialState = {\n  error: null,\n  data: [],\n  loaded: false,\n  loading: false,\n};\n\n/**\n * Diff reducer.\n * @function diff\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function diff(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${GET_DIFF}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loaded: false,\n        loading: true,\n      };\n    case `${GET_DIFF}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        data: action.result,\n        loaded: true,\n        loading: false,\n      };\n    case `${GET_DIFF}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        data: [],\n        loaded: false,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * emailNotification reducer.\n * @module reducers/emailNotification/emailNotification\n */\n\nimport { EMAIL_NOTIFICATION } from '../../constants/ActionTypes';\n\nconst initialState = {\n  error: null,\n  loaded: false,\n  loading: false,\n};\n\n/**\n * emailNotification reducer.\n * @function emailNotification\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function emailNotification(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${EMAIL_NOTIFICATION}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loaded: false,\n        loading: true,\n      };\n    case `${EMAIL_NOTIFICATION}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        loaded: true,\n        loading: false,\n      };\n    case `${EMAIL_NOTIFICATION}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        loaded: false,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Form reducer.\n * This reducer is prepopulated on the server based on post data.\n * @module reducers/form/form\n */\n\nconst initialState = {};\n\n/**\n * Form reducer.\n * @function form\n * @param {Object} state Current state.\n * @returns {Object} New state.\n */\nexport default function form(state = initialState) {\n  return state;\n}\n","/**\n * Groups reducer.\n * @module reducers/groups/groups\n */\n\nimport {\n  CREATE_GROUP,\n  DELETE_GROUP,\n  GET_GROUP,\n  LIST_GROUPS,\n  UPDATE_GROUP,\n} from '../../constants/ActionTypes';\n\nconst initialState = {\n  create: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  delete: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  get: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  list: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  update: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  groups: [],\n  group: {},\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Groups reducer.\n * @function groups\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function groups(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${CREATE_GROUP}_PENDING`:\n    case `${DELETE_GROUP}_PENDING`:\n    case `${GET_GROUP}_PENDING`:\n    case `${LIST_GROUPS}_PENDING`:\n    case `${UPDATE_GROUP}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n    case `${GET_GROUP}_SUCCESS`:\n      return {\n        ...state,\n        group: action.result,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${LIST_GROUPS}_SUCCESS`:\n      return {\n        ...state,\n        groups: action.result,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${CREATE_GROUP}_SUCCESS`:\n    case `${DELETE_GROUP}_SUCCESS`:\n    case `${UPDATE_GROUP}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${CREATE_GROUP}_FAIL`:\n    case `${DELETE_GROUP}_FAIL`:\n    case `${UPDATE_GROUP}_FAIL`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    case `${GET_GROUP}_FAIL`:\n      return {\n        ...state,\n        group: {},\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    case `${LIST_GROUPS}_FAIL`:\n      return {\n        ...state,\n        groups: [],\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * History reducer.\n * @module reducers/history/history\n */\n\nimport { GET_HISTORY, REVERT_HISTORY } from '../../constants/ActionTypes';\n\nconst initialState = {\n  entries: [],\n  get: {\n    error: null,\n    loaded: false,\n    loading: false,\n  },\n  revert: {\n    error: null,\n    loaded: false,\n    loading: false,\n  },\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * History reducer.\n * @function history\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function history(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${GET_HISTORY}_PENDING`:\n    case `${REVERT_HISTORY}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n    case `${GET_HISTORY}_SUCCESS`:\n      return {\n        ...state,\n        entries: action.result,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${REVERT_HISTORY}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${GET_HISTORY}_FAIL`:\n    case `${REVERT_HISTORY}_FAIL`:\n      return {\n        ...state,\n        entries: [],\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Root reducer.\n * @module reducers/root\n */\n\nimport { reducer as reduxAsyncConnect } from 'redux-connect';\nimport { intlReducer } from 'react-intl-redux';\n\nimport actions from './actions/actions';\nimport breadcrumbs from './breadcrumbs/breadcrumbs';\nimport comments from './comments/comments';\nimport content from './content/content';\nimport controlpanels from './controlpanels/controlpanels';\nimport clipboard from './clipboard/clipboard';\nimport diff from './diff/diff';\nimport emailNotification from './emailNotification/emailNotification';\nimport form from './form/form';\nimport history from './history/history';\nimport groups from './groups/groups';\nimport messages from './messages/messages';\nimport navigation from './navigation/navigation';\nimport roles from './roles/roles';\nimport schema from './schema/schema';\nimport search from './search/search';\nimport sharing from './sharing/sharing';\nimport tiles from './tiles/tiles';\nimport types from './types/types';\nimport users from './users/users';\nimport userSession from './userSession/userSession';\nimport vocabularies from './vocabularies/vocabularies';\nimport workflow from './workflow/workflow';\n\n/**\n * Root reducer.\n * @function\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nconst reducers = {\n  intl: intlReducer,\n  reduxAsyncConnect,\n  actions,\n  breadcrumbs,\n  comments,\n  content,\n  controlpanels,\n  clipboard,\n  diff,\n  emailNotification,\n  form,\n  groups,\n  history,\n  messages,\n  navigation,\n  roles,\n  schema,\n  search,\n  sharing,\n  tiles,\n  types,\n  users,\n  userSession,\n  vocabularies,\n  workflow,\n};\n\nexport default reducers;\n","/**\n * Messages reducer.\n * @module reducers/messages/messages\n */\nimport { map, concat, filter } from 'lodash';\n\nimport {\n  ADD_MESSAGE,\n  REMOVE_MESSAGE,\n  PURGE_MESSAGES,\n} from '../../constants/ActionTypes';\n\nconst initialState = {\n  messages: [],\n};\n\n/**\n * Messages reducer.\n * @function messages\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function messages(state = initialState, action = {}) {\n  switch (action.type) {\n    case ADD_MESSAGE:\n      return {\n        messages: concat(\n          [\n            {\n              id: action.id,\n              title: action.title,\n              body: action.body,\n              level: action.level,\n              show: action.show,\n            },\n          ],\n          state.messages,\n        ),\n      };\n    case REMOVE_MESSAGE:\n      return {\n        messages: filter(\n          state.messages,\n          (message, index) =>\n            action.index === -1\n              ? index !== state.messages.length - 1\n              : index !== action.index,\n        ),\n      };\n    case PURGE_MESSAGES:\n      return {\n        messages: map(\n          filter(state.messages, message => message.show),\n          message => ({\n            ...message,\n            show: false,\n          }),\n        ),\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Navigation reducer.\n * @module reducers/navigation/navigation\n */\n\nimport { map } from 'lodash';\nimport { settings } from '~/config';\n\nimport { GET_NAVIGATION } from '../../constants/ActionTypes';\n\nconst initialState = {\n  error: null,\n  items: [],\n  loaded: false,\n  loading: false,\n};\n\n/**\n * Navigation reducer.\n * @function navigation\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function navigation(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${GET_NAVIGATION}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loaded: false,\n        loading: true,\n      };\n    case `${GET_NAVIGATION}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        items: map(action.result.items, item => ({\n          title: item.title,\n          url: item['@id'].replace(settings.apiPath, ''),\n        })),\n        loaded: true,\n        loading: false,\n      };\n    case `${GET_NAVIGATION}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        items: [],\n        loaded: false,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Roles reducer.\n * @module reducers/roles/roles\n */\n\nimport { LIST_ROLES } from '../../constants/ActionTypes';\n\nconst initialState = {\n  error: null,\n  roles: [],\n  loaded: false,\n  loading: false,\n};\n\n/**\n * Roles reducer.\n * @function roles\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function roles(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${LIST_ROLES}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loaded: false,\n        loading: true,\n      };\n    case `${LIST_ROLES}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        roles: action.result,\n        loaded: true,\n        loading: false,\n      };\n    case `${LIST_ROLES}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        roles: [],\n        loaded: false,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Schema reducer.\n * @module reducers/schema/schema\n */\n\nimport { flatten, keys, pickBy, isArray, map, mapKeys, merge } from 'lodash';\n\nimport { GET_SCHEMA } from '../../constants/ActionTypes';\n\nconst initialState = {\n  error: null,\n  loaded: false,\n  loading: false,\n  schema: null,\n};\n\n/**\n * Schema reducer.\n * @function schema\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function schema(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${GET_SCHEMA}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loading: true,\n        loaded: false,\n      };\n    case `${GET_SCHEMA}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        loading: false,\n        loaded: true,\n        schema: {\n          ...action.result,\n          required: [\n            ...action.result.required,\n            ...flatten(\n              map(keys(pickBy(action.result.properties, isArray)), fieldset =>\n                map(\n                  action.result.definitions[fieldset].required,\n                  required => `${fieldset}.${required}`,\n                ),\n              ),\n            ),\n          ],\n          properties: {\n            ...action.result.properties,\n            ...merge(\n              ...map(\n                keys(pickBy(action.result.properties, isArray)),\n                fieldset =>\n                  mapKeys(\n                    action.result.definitions[fieldset].properties,\n                    (value, key) => `${fieldset}.${key}`,\n                  ),\n              ),\n            ),\n          },\n        },\n      };\n    case `${GET_SCHEMA}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        loading: false,\n        loaded: false,\n        schema: null,\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Search reducer.\n * @module reducers/search/search\n */\n\nimport { map } from 'lodash';\nimport { settings } from '~/config';\n\nimport {\n  RESET_SEARCH_CONTENT,\n  SEARCH_CONTENT,\n} from '../../constants/ActionTypes';\n\nconst initialState = {\n  error: null,\n  items: [],\n  total: 0,\n  loaded: false,\n  loading: false,\n  batching: {},\n};\n\n/**\n * Search reducer.\n * @function search\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function search(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${SEARCH_CONTENT}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loading: true,\n        loaded: false,\n      };\n    case `${SEARCH_CONTENT}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        items: map(action.result.items, item => ({\n          ...item,\n          '@id': item['@id'].replace(settings.apiPath, ''),\n        })),\n        total: action.result.items_total,\n        loaded: true,\n        loading: false,\n        batching: { ...action.result.batching },\n      };\n    case `${SEARCH_CONTENT}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        items: [],\n        total: 0,\n        loading: false,\n        loaded: false,\n        batching: {},\n      };\n    case RESET_SEARCH_CONTENT:\n      return {\n        ...state,\n        error: null,\n        items: [],\n        total: 0,\n        loading: false,\n        loaded: false,\n        batching: {},\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Sharing reducer.\n * @module reducers/sharing/sharing\n */\n\nimport { UPDATE_SHARING, GET_SHARING } from '../../constants/ActionTypes';\n\nconst initialState = {\n  update: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  get: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  data: {\n    available_roles: [],\n    entries: [],\n    inherit: null,\n  },\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Sharing reducer.\n * @function sharing\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function sharing(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${UPDATE_SHARING}_PENDING`:\n    case `${GET_SHARING}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n    case `${UPDATE_SHARING}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${GET_SHARING}_SUCCESS`:\n      return {\n        ...state,\n        data: action.result,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${UPDATE_SHARING}_FAIL`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    case `${GET_SHARING}_FAIL`:\n      return {\n        ...state,\n        data: initialState.data,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Tiles reducer.\n * @module reducers/tiles/tiles\n */\n\nimport { GET_TILES } from '../../constants/ActionTypes';\n\nconst initialState = {\n  error: null,\n  tiles: [],\n  loaded: false,\n  loading: false,\n};\n\n/**\n * Tiles reducer.\n * @function tiles\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function tiles(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${GET_TILES}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loaded: false,\n        loading: true,\n      };\n    case `${GET_TILES}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        tiles: action.result.tiles,\n        loaded: true,\n        loading: false,\n      };\n    case `${GET_TILES}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        tiles: [],\n        loaded: false,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Types reducer.\n * @module reducers/types/types\n */\n\nimport { GET_TYPES } from '../../constants/ActionTypes';\n\nconst initialState = {\n  error: null,\n  loaded: false,\n  loading: false,\n  types: [],\n};\n\n/**\n * Types reducer.\n * @function types\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function types(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${GET_TYPES}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loading: true,\n        loaded: false,\n      };\n    case `${GET_TYPES}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        loading: false,\n        loaded: true,\n        types: action.result,\n      };\n    case `${GET_TYPES}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        loading: false,\n        loaded: false,\n        types: [],\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * User session reducer.\n * @module reducers/userSession/userSession\n */\n\nimport { LOGIN, LOGIN_RENEW, LOGOUT } from '../../constants/ActionTypes';\n\nconst initialState = {\n  token: null,\n  login: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n};\n\n/**\n * User session reducer.\n * @function userSession\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function userSession(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${LOGIN}_PENDING`:\n      return {\n        ...state,\n        token: null,\n        login: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n    case `${LOGIN}_SUCCESS`:\n    case `${LOGIN_RENEW}_SUCCESS`:\n      return {\n        ...state,\n        token: action.result.token,\n        login: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${LOGIN}_FAIL`:\n    case `${LOGIN_RENEW}_FAIL`:\n      return {\n        ...state,\n        token: null,\n        login: {\n          loading: false,\n          loaded: false,\n          error: action.error.error,\n        },\n      };\n    case LOGOUT:\n      return {\n        ...state,\n        token: null,\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Users reducer.\n * @module reducers/users/users\n */\n\nimport { startsWith } from 'lodash';\n\nimport {\n  CREATE_USER,\n  DELETE_USER,\n  GET_USER,\n  LIST_USERS,\n  UPDATE_PASSWORD,\n  UPDATE_USER,\n  INITIAL_PASSWORD,\n  RESET_PASSWORD,\n} from '../../constants/ActionTypes';\n\nconst initialState = {\n  user: {},\n  users: [],\n  create: {\n    error: null,\n    loaded: false,\n    loading: false,\n  },\n  get: {\n    error: null,\n    loaded: false,\n    loading: false,\n  },\n  list: {\n    error: null,\n    loaded: false,\n    loading: false,\n  },\n  delete: {\n    error: null,\n    loaded: false,\n    loading: false,\n  },\n  update: {\n    error: null,\n    loaded: false,\n    loading: false,\n  },\n  update_password: {\n    error: null,\n    loaded: false,\n    loading: false,\n  },\n  password: {\n    error: null,\n    loaded: false,\n    loading: false,\n  },\n  initial: {\n    error: null,\n    loaded: false,\n    loading: false,\n  },\n  reset: {\n    error: null,\n    loaded: false,\n    loading: false,\n  },\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  if (startsWith(actionType, 'UPDATE_PASSWORD')) {\n    return 'update_password';\n  }\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Users reducer.\n * @function users\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function users(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${CREATE_USER}_PENDING`:\n    case `${DELETE_USER}_PENDING`:\n    case `${GET_USER}_PENDING`:\n    case `${LIST_USERS}_PENDING`:\n    case `${UPDATE_USER}_PENDING`:\n    case `${UPDATE_PASSWORD}_PENDING`:\n    case `${INITIAL_PASSWORD}_PENDING`:\n    case `${RESET_PASSWORD}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n    case `${GET_USER}_SUCCESS`:\n      return {\n        ...state,\n        user: action.result,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${LIST_USERS}_SUCCESS`:\n      return {\n        ...state,\n        users: action.result,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${CREATE_USER}_SUCCESS`:\n    case `${DELETE_USER}_SUCCESS`:\n    case `${UPDATE_USER}_SUCCESS`:\n    case `${UPDATE_PASSWORD}_SUCCESS`:\n    case `${INITIAL_PASSWORD}_SUCCESS`:\n    case `${RESET_PASSWORD}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${GET_USER}_FAIL`:\n      return {\n        ...state,\n        user: {},\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error.error,\n        },\n      };\n    case `${LIST_USERS}_FAIL`:\n      return {\n        ...state,\n        users: [],\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error.error,\n        },\n      };\n    case `${CREATE_USER}_FAIL`:\n    case `${DELETE_USER}_FAIL`:\n    case `${UPDATE_USER}_FAIL`:\n    case `${UPDATE_PASSWORD}_FAIL`:\n    case `${INITIAL_PASSWORD}_FAIL`:\n    case `${RESET_PASSWORD}_FAIL`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Vocabularies reducer.\n * @module reducers/vocabularies/vocabularies\n */\n\nimport { GET_VOCABULARY } from '../../constants/ActionTypes';\n\nconst initialState = {};\n\n/**\n * Vocabularies reducer.\n * @function vocabularies\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function vocabularies(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${GET_VOCABULARY}_PENDING`:\n      return {\n        ...state,\n        [action.vocabulary]: {\n          error: null,\n          loaded: false,\n          loading: true,\n          terms: [],\n        },\n      };\n    case `${GET_VOCABULARY}_SUCCESS`:\n      return {\n        ...state,\n        [action.vocabulary]: {\n          error: null,\n          loaded: true,\n          loading: false,\n          terms: action.result.terms,\n        },\n      };\n    case `${GET_VOCABULARY}_FAIL`:\n      return {\n        ...state,\n        [action.vocabulary]: {\n          error: action.error,\n          loaded: false,\n          loading: false,\n        },\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Workflow reducer.\n * @module reducers/workflow/workflow\n */\n\nimport {\n  TRANSITION_WORKFLOW,\n  GET_WORKFLOW,\n  GET_WORKFLOW_MULTIPLE,\n} from '../../constants/ActionTypes';\n\nconst initialState = {\n  get: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  transition: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  history: [],\n  transitions: [],\n  multiple: [],\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Content reducer.\n * @function content\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function content(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${GET_WORKFLOW}_PENDING`:\n    case `${GET_WORKFLOW_MULTIPLE}_PENDING`:\n    case `${TRANSITION_WORKFLOW}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n    case `${GET_WORKFLOW}_SUCCESS`:\n    case `${TRANSITION_WORKFLOW}_SUCCESS`:\n      return {\n        ...state,\n        history: action.result.history ? action.result.history : state.history,\n        transitions: action.result.transitions\n          ? action.result.transitions\n          : state.transitions,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${GET_WORKFLOW_MULTIPLE}_SUCCESS`:\n      return {\n        ...state,\n        multiple: action.result,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${GET_WORKFLOW}_FAIL`:\n    case `${TRANSITION_WORKFLOW}_FAIL`:\n      return {\n        ...state,\n        history: [],\n        transitions: [],\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    case `${GET_WORKFLOW_MULTIPLE}_FAIL`:\n      return {\n        ...state,\n        multiple: [],\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Routes.\n * @module routes\n */\nimport {\n  Add,\n  App,\n  ChangePassword,\n  Contents,\n  Controlpanel,\n  Controlpanels,\n  Edit,\n  Diff,\n  Delete,\n  History,\n  View,\n  NotFound,\n  Layout,\n  Login,\n  Logout,\n  ModerateComments,\n  PasswordReset,\n  PersonalInformation,\n  PersonalPreferences,\n  Register,\n  RequestPasswordReset,\n  Search,\n  Sharing,\n  UsersControlpanel,\n} from './components';\n\n/**\n * Default routes array.\n * @array\n * @returns {array} Routes.\n */\nexport const defaultRoutes = [\n  {\n    path: '/',\n    component: View,\n    exact: true,\n  },\n  {\n    path: '/login',\n    component: Login,\n  },\n  {\n    path: '/logout',\n    component: Logout,\n  },\n  {\n    path: '/search',\n    component: Search,\n  },\n  {\n    path: '/controlpanel',\n    component: Controlpanels,\n    routes: [\n      {\n        path: '/controlpanel/moderate-comments',\n        component: ModerateComments,\n      },\n      {\n        path: '/controlpanel/users',\n        component: UsersControlpanel,\n      },\n      {\n        path: '/controlpanel/:id',\n        component: Controlpanel,\n      },\n    ],\n  },\n  {\n    path: '/change-password',\n    component: ChangePassword,\n  },\n  {\n    path: '/personal-information',\n    component: PersonalInformation,\n  },\n  {\n    path: '/personal-preferences',\n    component: PersonalPreferences,\n  },\n  {\n    path: '/add',\n    component: Add,\n  },\n  {\n    path: '/contents',\n    component: Contents,\n  },\n  {\n    path: '/sharing',\n    component: Sharing,\n  },\n  {\n    path: '/**/add',\n    component: Add,\n  },\n  {\n    path: '/**/contents',\n    component: Contents,\n  },\n  {\n    path: '/**/sharing',\n    component: Sharing,\n  },\n  {\n    path: '/**/delete',\n    component: Delete,\n  },\n  {\n    path: '/**/diff',\n    component: Diff,\n  },\n  {\n    path: '/**/edit',\n    component: Edit,\n  },\n  {\n    path: '/**/history',\n    component: History,\n  },\n  {\n    path: '/**/layout',\n    component: Layout,\n  },\n  {\n    path: '/**/sharing',\n    component: Sharing,\n  },\n  {\n    path: '/register',\n    component: Register,\n  },\n  {\n    path: '/password-reset',\n    component: RequestPasswordReset,\n    routes: [\n      {\n        path: '/password-reset/:token',\n        component: PasswordReset,\n      },\n    ],\n  },\n  {\n    path: '/**',\n    component: View,\n  },\n  {\n    path: '*',\n    component: NotFound,\n  },\n];\n\n/**\n * Routes array.\n * @array\n * @returns {array} Routes.\n */\nconst routes = [\n  {\n    path: '/',\n    component: App,\n    routes: defaultRoutes,\n  },\n];\n\nexport default routes;\n","import React from 'react';\nimport { StaticRouter } from 'react-router-dom';\nimport { Provider } from 'react-intl-redux';\nimport express from 'express';\nimport { renderToString } from 'react-dom/server';\nimport { createMemoryHistory } from 'history';\nimport { ReduxAsyncConnect, loadOnServer } from 'redux-connect';\nimport { Html, Api, persistAuthToken, generateSitemap } from './helpers';\nimport { parse as parseUrl } from 'url';\nimport { keys } from 'lodash';\nimport Raven from 'raven';\n\nimport userSession from './reducers/userSession/userSession';\n\nimport cookie, { plugToRequest } from 'react-cookie';\nimport ErrorPage from './error';\n\nimport locale from 'locale';\n\nimport routes from '~/routes';\nimport languages from './constants/Languages';\nimport nlLocale from '~/../locales/nl.json';\nimport deLocale from '~/../locales/de.json';\nimport enLocale from '~/../locales/en.json';\n\nimport configureStore from './store';\n\nconst assets = require(process.env.RAZZLE_ASSETS_MANIFEST);\n\nconst supported = new locale.Locales(keys(languages), 'en');\nconst locales = {\n  en: enLocale,\n  nl: nlLocale,\n  de: deLocale,\n};\n\nconst server = express();\nserver\n  .disable('x-powered-by')\n  .use(express.static(process.env.RAZZLE_PUBLIC_DIR))\n  .get('/*', (req, res) => {\n    plugToRequest(req, res);\n    const api = new Api(req);\n\n    const url = req.originalUrl || req.url;\n    const location = parseUrl(url);\n\n    const lang = new locale.Locales(\n      cookie.load('lang') || req.headers['accept-language'],\n    )\n      .best(supported)\n      .toString();\n\n    const authToken = cookie.load('auth_token');\n\n    const initialState = {\n      userSession: { ...userSession(), token: authToken },\n      form: req.body,\n      intl: {\n        defaultLocale: 'en',\n        locale: lang,\n        messages: locales[lang],\n      },\n    };\n    const history = createMemoryHistory({\n      initialEntries: [req.url],\n    });\n\n    // Create a new Redux store instance\n    const store = configureStore(initialState, history, api);\n\n    persistAuthToken(store);\n\n    if (req.path === '/sitemap.xml.gz') {\n      generateSitemap(req).then(sitemap => {\n        res.header('Content-Type: application/x-gzip');\n        res.header('Content-Encoding: gzip');\n        res.header(\n          'Content-Disposition: attachment; filename=\"sitemap.xml.gz\"',\n        );\n        res.send(sitemap);\n      });\n    } else {\n      loadOnServer({ store, location, routes, api })\n        .then(() => {\n          const context = {};\n          const markup = renderToString(\n            <Provider store={store}>\n              <StaticRouter context={context} location={req.url}>\n                <ReduxAsyncConnect routes={routes} helpers={api} />\n              </StaticRouter>\n            </Provider>,\n          );\n\n          if (context.url) {\n            res.redirect(context.url);\n          } else {\n            res.status(200).send(\n              `<!doctype html>\n                ${renderToString(\n                  <Html assets={assets} markup={markup} store={store} />,\n                )}\n              `,\n            );\n          }\n        })\n        .catch(error => {\n          const errorPage = <ErrorPage message={error.message} />;\n\n          if (process.env.SENTRY_DSN) {\n            Raven.captureException(error.message, {\n              extra: JSON.stringify(error),\n            });\n          }\n          res.set({\n            'Cache-Control': 'public, max-age=60, no-transform',\n          });\n          res.status(500).send(`<!doctype html> ${renderToString(errorPage)}`);\n        });\n    }\n  });\n\nexport default server;\n","import http from 'http';\n\nimport app from './server';\n\nexport default () => {\n  const server = http.createServer(app);\n\n  let currentApp = app;\n\n  server.listen(process.env.PORT || 3000, error => {\n    if (error) {\n      console.log(error);\n    }\n\n    console.log('🚀 started');\n  });\n\n  if (module.hot) {\n    console.log('✅  Server-side HMR Enabled!');\n\n    module.hot.accept('./server', () => {\n      console.log('🔁  HMR Reloading `./server`...');\n      server.removeListener('request', currentApp);\n      const newApp = require('./server').default; // eslint-disable-line global-require\n      server.on('request', newApp);\n      currentApp = newApp;\n    });\n  }\n};\n","import { combineReducers, createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\n\nimport reducers from '~/reducers';\n\nimport { api, crashReporter } from './middleware';\n\nconst configureStore = (initialState, history, apiHelper) => {\n  const middlewares = composeWithDevTools(\n    applyMiddleware(\n      routerMiddleware(history),\n      crashReporter,\n      thunk,\n      api(apiHelper),\n    ),\n  );\n  const store = createStore(\n    connectRouter(history)(combineReducers(reducers)),\n    initialState,\n    middlewares,\n  );\n\n  return store;\n};\n\nexport default configureStore;\n","module.exports = require(\"babel-runtime/core-js/json/stringify\");","module.exports = require(\"babel-runtime/core-js/object/assign\");","module.exports = require(\"babel-runtime/core-js/object/get-prototype-of\");","module.exports = require(\"babel-runtime/core-js/promise\");","module.exports = require(\"babel-runtime/helpers/classCallCheck\");","module.exports = require(\"babel-runtime/helpers/createClass\");","module.exports = require(\"babel-runtime/helpers/defineProperty\");","module.exports = require(\"babel-runtime/helpers/extends\");","module.exports = require(\"babel-runtime/helpers/inherits\");","module.exports = require(\"babel-runtime/helpers/objectWithoutProperties\");","module.exports = require(\"babel-runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"babel-runtime/helpers/slicedToArray\");","module.exports = require(\"babel-runtime/helpers/toConsumableArray\");","module.exports = require(\"connected-react-router\");","module.exports = require(\"decorate-component-with-props\");","module.exports = require(\"diff\");","module.exports = require(\"draft-js\");","module.exports = require(\"draft-js-block-breakout-plugin\");","module.exports = require(\"draft-js-buttons/lib/utils/createBlockStyleButton\");","module.exports = require(\"draft-js-buttons/lib/utils/createInlineStyleButton\");","module.exports = require(\"draft-js-import-html\");","module.exports = require(\"draft-js-inline-toolbar-plugin\");","module.exports = require(\"draft-js-plugins-editor\");","module.exports = require(\"draft-js-plugins-utils\");","module.exports = require(\"express\");","module.exports = require(\"filesize\");","module.exports = require(\"history\");","module.exports = require(\"http\");","module.exports = require(\"immutable\");","module.exports = require(\"jwt-decode\");","module.exports = require(\"locale\");","module.exports = require(\"lodash\");","module.exports = require(\"lodash-move\");","module.exports = require(\"moment\");","module.exports = require(\"prepend-http\");","module.exports = require(\"promise-file-reader\");","module.exports = require(\"prop-types\");","module.exports = require(\"query-string\");","module.exports = require(\"raven\");","module.exports = require(\"raven-js\");","module.exports = require(\"razzle-dev-utils/prettyNodeErrors\");","module.exports = require(\"react\");","module.exports = require(\"react-cookie\");","module.exports = require(\"react-dnd\");","module.exports = require(\"react-dnd-html5-backend\");","module.exports = require(\"react-dom\");","module.exports = require(\"react-dom/server\");","module.exports = require(\"react-dropzone\");","module.exports = require(\"react-helmet\");","module.exports = require(\"react-intl\");","module.exports = require(\"react-intl-redux\");","module.exports = require(\"react-portal\");","module.exports = require(\"react-redux\");","module.exports = require(\"react-router-config/renderRoutes\");","module.exports = require(\"react-router-dom\");","module.exports = require(\"react-share\");","module.exports = require(\"react-side-effect\");","module.exports = require(\"redraft\");","module.exports = require(\"redux\");","module.exports = require(\"redux-connect\");","module.exports = require(\"redux-devtools-extension/developmentOnly\");","module.exports = require(\"redux-thunk\");","module.exports = require(\"semantic-ui-react\");","module.exports = require(\"semantic-ui-react/dist/commonjs/lib\");","module.exports = require(\"serialize-javascript\");","module.exports = require(\"superagent\");","module.exports = require(\"tlds\");","module.exports = require(\"union-class-names\");","module.exports = require(\"url\");","module.exports = require(\"uuid\");","module.exports = require(\"zlib\");"],"mappingsuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAEA;;;;;;;;;;;;;;ACvCA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AAMA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AAFA;AAIA;;;;;;;;;;;;ACxEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AAMA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;;;;;;;;;;;;AC9EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AAOA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AAAA;AAHA;AAMA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AAGA;AAAA;AALA;AAOA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAHA;AAAA;AALA;AAWA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;;;;;;;;;;;;ACzHA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AAKA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;;;;;;;;;;;;AC1DA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAPA;AAaA;;;;;;;;;;;;AC7BA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAHA;AAFA;AAaA;;;;;;;;;;;;AC9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AAOA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;;;;;;;;;;;;AC7FA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;;;;;;;;;;;;ACvzDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAIA;AACA;AACA;AACA;AAKA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;;AAKA;AACA;AACA;AADA;AAGA;;;;;;;;;;;;ACrDA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;AACA;AAIA;;;;;;;AAOA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;;;;;AAKA;AACA;AACA;AADA;AAGA;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;;;;;;;AAOA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;;;;;;;;;;;;ACxCA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;;;;;AAKA;AACA;AACA;AADA;AAGA;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AAUA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AAFA;AAMA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAHA;AAFA;AAWA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAHA;AAFA;AAWA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;;;;;;;;;;;;ACxJA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAHA;AAQA;;;;;;;;;;;;ACtBA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AAKA;;;;;;AAMA;AACA;AACA;AACA;AAGA;AAAA;AALA;AAOA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AAGA;AAAA;AALA;AAOA;;;;;;;;;;;;ACzrGA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAOA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AA7BA;AACA;AAuDA;;;;;AAKA;AAxBA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAOA;AAGA;AACA;AACA;AACA;AACA;AALA;AAFA;;;AAqDA;;;;;;;AAnCA;;;;;AAyCA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AARA;AAWA;AACA;AACA;;;;;;;AA9BA;;;;;;;;;AAmCA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AAGA;AADA;AAKA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AAGA;AADA;AAKA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AAIA;AACA;AACA;AAIA;AACA;AAKA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAJA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AANA;AASA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAlDA;AAoDA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AALA;AAAA;AAAA;AAAA;AAAA;AAzDA;AAVA;AAkFA;;;;AA1OA;AAOA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAyBA;AACA;AACA;AAHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvHA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAjBA;AACA;AAoCA;;;;;AAKA;AAhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AASA;AAAA;AAOA;AACA;AAwCA;;;;;;;AAxCA;;;;;AA8CA;AAAA;AACA;AADA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAPA;AAQA;AACA;AACA;;;;;;;AA5BA;;;;;;;AA7BA;AAAA;AAAA;AA+DA;AACA;AACA;AACA;;;;;;;AAlEA;AAAA;AAAA;AAyEA;AAKA;AAIA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;;;;;;;AA5FA;AAAA;AAAA;AAmGA;AAEA;AAGA;AALA;AAOA;AACA;AACA;;;;;;AA5GA;AAAA;AAAA;AAkHA;AACA;AACA;AACA;;;;;;AArHA;AAAA;AAAA;AA2HA;AACA;AADA;AAGA;AACA;AACA;;;;;;AAhIA;AAAA;AAAA;AAqIA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AADA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAoBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AADA;AAQA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AADA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AADA;AAtBA;AAHA;AAAA;AAAA;AAAA;AAAA;AADA;AA1BA;AAkEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA5MA;AACA;AADA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AApBA;AA6BA;AACA;AACA;AACA;AAJA;AACA;AA4KA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AACA;AAGA;AAFA;AAKA;AACA;AACA;AAbA;;;;;;;;;;;;;;;;;;AC7RA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAOA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrCA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;;;;;AAKA;AAXA;AACA;AADA;AAAA;AAGA;AAAA;;;AAgCA;;;;;;AAMA;AAAA;AACA;AADA;AACA;AADA;AA6DA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAGA;AACA;AACA;AACA;AAzEA;AA+EA;AAAA;AACA;AA9EA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AATA;AAUA;AACA;AACA;;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;;;;AAMA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAqBA;;;;;;;;;;AAOA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAKA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;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KA;AApCA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;AAeA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAFA;;;AAqFA;;;;;;;AA/DA;;;;;AAqEA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAFA;AAAA;AAIA;AANA;AAbA;AArCA;AA2DA;AACA;AACA;;;;;;;AA9EA;;;;;;;;;AAmFA;AACA;AACA;AACA;AACA;;;;;;;;;AAMA;AACA;AAOA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;;;;;;;;;;AAOA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;;;AAOA;AAAA;AACA;AAAA;AACA;AAEA;AAGA;AAAA;AAEA;AAFA;AAAA;AALA;AADA;AAaA;AACA;AACA;;;;;;;;;;AAOA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AADA;AAGA;AAAA;AAEA;AACA;AACA;;;;;;;;;;AAOA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AADA;AAGA;AAAA;AAEA;AACA;AACA;;;;;;;;;;AAOA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AAFA;AAIA;AAAA;AAEA;AACA;AACA;;;;;;;;;;AAOA;AACA;AACA;AAEA;AAFA;AADA;AAMA;AACA;AACA;;;;;;;;;;AAOA;AACA;AAIA;AAAA;AAEA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;;;AAOA;AAAA;AACA;AAAA;AACA;AAKA;AACA;AACA;;;;;;;;;;AAOA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;AAOA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;;;;;;;;;;AAOA;AAAA;AACA;AAAA;AACA;AACA;AAKA;AACA;AACA;;;;;;;;;;AAOA;AAAA;AACA;AAAA;AACA;AACA;AAKA;AACA;AACA;;;;;;;;;;AAOA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AAIA;AACA;AACA;AAIA;AACA;AAKA;AACA;AACA;;;;;;;;AAKA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AADA;AAQA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AADA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AADA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AADA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AADA;AAnBA;AA4BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AADA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AADA;AAMA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAJA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AADA;AAtBA;AA6BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAVA;AAYA;AAAA;AAAA;AAAA;AAAA;AAbA;AADA;AAlEA;AAoFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AALA;AAOA;AACA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAKA;AALA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAbA;AATA;AA6BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAVA;AADA;AADA;AANA;AADA;AA9BA;AAwfA;AALA;AADA;AAqDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAQA;AATA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAoBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AANA;AADA;AADA;AAhCA;AApBA;AADA;AAoEA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAHA;AAKA;AAEA;AAGA;AACA;AAGA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAFA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AADA;AA9IA;AADA;AAuJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAxJA;AAoLA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAjUA;AADA;AAvDA;AADA;AAsYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AADA;AAHA;AAAA;AAAA;AAAA;AAAA;AADA;AAxYA;AAyZA;;;;AAxjCA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AA5CA;AAqDA;AACA;AACA;AAHA;;;;;;;;;;;;;;;;;;;;;;AC7PA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAkBA;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AAJA;AATA;AACA;AAiBA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AADA;AAAA;AAOA;AACA;AACA;AACA;AAFA;AAIA;AANA;AAQA;AACA;AACA;AAFA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChGA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAFA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AADA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AADA;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAOA;AAPA;AAJA;AADA;AAmvCA;AAlBA;AACA;AAsGA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AACA;AA2BA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AADA;AAAA;AAOA;AACA;AACA;AACA;AAFA;AAIA;AANA;AAQA;AACA;AACA;AACA;AAHA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3LA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AApDA;AACA;AAiEA;;;;;AAKA;AAVA;AACA;AADA;AAAA;AAGA;AAAA;;;AA0BA;;;;;;AAMA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAGA;AACA;AACA;;;;;;;AA7BA;;;;;;;;;AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;;;;;;;;AAKA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAYA;AACA;AACA;AAGA;AACA;AACA;AANA;AAQA;AACA;AAGA;AACA;AACA;AANA;AAQA;AACA;AAGA;AACA;AACA;AANA;AAQA;AACA;AAGA;AACA;AALA;AAOA;AACA;AACA;AAGA;AAGA;AARA;AAhCA;AA2CA;AAzDA;AALA;AAAA;AAAA;AAAA;AAAA;AAmEA;;;;AAtIA;AAOA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAVA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5FA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAjBA;AACA;AA6BA;;;;;AAKA;AAVA;AACA;AADA;AAAA;AAGA;AAAA;;;AAgCA;;;;;;AAMA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAGA;AACA;AACA;;;;;;;AAnCA;;;;;;;;;AAyCA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAAA;AAKA;AACA;AACA;;;;;;;;AAKA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAJA;AAWA;AACA;AACA;AADA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AANA;AAeA;AA7BA;AAXA;AAAA;AAAA;AAAA;AAAA;AA6CA;;;;AArHA;AAOA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAhBA;;;;;;;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AACA;AAGA;AADA;AAKA;AARA;AAcA;AACA;AACA;;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAOA;AAGA;AADA;AAXA;AAgBA;AAjBA;AACA;AAmBA;AACA;AACA;AACA;;;;;;;;;AAMA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AADA;AAIA;AACA;AACA;AACA;AACA;AAGA;AACA;AA1BA;AA4BA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAFA;AADA;AAYA;AACA;AACA;;;;;;;;AAKA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AADA;AANA;AAFA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AA8BA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAUA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AADA;AA3BA;AAwCA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAnBA;AA1EA;AALA;AADA;AAoHA;;;;AApcA;AAOA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AA5BA;AAqCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AACA;AACA;AA2ZA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtgBA;;;;;AAKA;AACA;AACA;AACA;AAQA;AACA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAjBA;AACA;AAuBA;;;;;AAKA;;;AAuCA;;;;;;;AAtCA;;;;;AA4CA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AATA;AAUA;AACA;AACA;;;;;;;;;AA9BA;;;;;;;;;AAqCA;AACA;AACA;AADA;AAMA;AACA;AACA;;;;;;;;;AAMA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AADA;AAIA;AACA;AACA;AACA;AACA;AAGA;AACA;AA1BA;AA4BA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AA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;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAJA;AAHA;AAAA;AAAA;AAAA;AAAA;AADA;AARA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAZA;AA1EA;AA5BA;AA+HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AADA;AAHA;AAAA;AAAA;AAAA;AAAA;AADA;AAjIA;AAkJA;;;;AAhVA;AAOA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AArBA;AA8BA;AACA;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChHA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AAMA;AACA;AACA;AADA;AADA;AACA;AAKA;AACA;AAEA;;;;;AAKA;;;AAkBA;;;;;;AAMA;AAAA;AACA;AADA;AACA;AAEA,iDASA;AACA;AACA;AAdA;AAeA;AACA;AACA;;;;;;;AAxCA;;;;;;;;;AA8CA;AACA;AAKA;AACA;AACA;AADA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAMA;AAAA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;;;;;;;;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;A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;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAMA;AACA;AAMA;AAEA;AAFA;AAIA;AACA;AACA;;;;;AAeA;;;;;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAJA;AACA;AACA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAjCA;AAAA;AAAA;AAAA;AAAA;AAmxBA;AAmCA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AADA;AANA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAXA;AADA;AADA;AADA;AAoBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AANA;AApHA;AA+HA;;;;AAzQA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;;;;;;;;;;;;;AC5CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AAAA;AAAA;AAAA;AACA;AACA;;;;;AAKA;AACA;AADA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AANA;AACA;AAQA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5CA;AACA;AAqDA;;;;;AAKA;AAZA;AACA;AADA;AAAA;AAGA;AACA;AACA;AAFA;AAAA;;;;;;;;;;;;;AA2BA;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAOA;AACA;AAIA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAPA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBA;AAqBA;AAtEA;;;;;;;;;AADA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5FA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AAMA;AACA;AACA;AADA;AADA;AACA;AAKA;AACA;AAEA;;;;;AAKA;;;AAkBA;;;;;;AAMA;AAAA;AACA;AADA;AACA;AAEA,iDASA;AACA;AACA;AAdA;AAeA;AACA;AACA;;;;;;;AAxCA;;;;;;;;;AA8CA;AACA;AAKA;AACA;AACA;AADA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAMA;AAAA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;;;;;;;;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAgBA;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A;AAFA;AAIA;AACA;AACA;AADA;AArBA;AAyBA;AAGA;AA/CA;AAmDA;AACA;AACA;AACA;;;;;;;;;AAMA;AACA;AAEA;AAIA;AAJA;AAFA;AAUA;AACA;AACA;AACA;;;;;;;;;AAMA;AACA;AAEA;AAFA;AAQA;AACA;AACA;AACA;;;;;;;;;AAMA;AAAA;AACA;AAAA;AAEA;AAIA;AAEA;AAAA;AANA;AAWA;AAOA;AApBA;AA0BA;AACA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AAIA;AANA;AAWA;AACA;AACA;AACA;;;;;;;;AAKA;AACA;AAEA;AAIA;AAJA;AAWA;AAbA;AAeA;AACA;AACA;AACA;;;;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;;AAMA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;;;;;;;;;;AAOA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;;;AAOA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;;AAMA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;;;AAOA;AACA;AAEA;AAIA;AAJA;AAFA;AAeA;AACA;AACA;;;;;;;;;;AAOA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;;;;;;;;AAKA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AADA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AA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;AAAA;AACA;AACA;AACA;AACA;AASA;AACA;AAdA;AAAA;AAHA;AAAA;AAHA;AAAA;AADA;AA0BA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AALA;AAhCA;AAwCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnDA;AAoDA;AACA;AACA;;;;;;;AApIA;;;;;;;;;AAyIA;AACA;AACA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;;;;;;AAUA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AARA;AAUA;AACA;AACA;;;;;;;;;;;AAQA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAIA;AACA;AAIA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAHA;AAUA;AAjEA;AACA;AAmEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAoBA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;;;;AAQA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AANA;AAQA;AACA;AACA;;;;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;;;;AAQA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AARA;AAJA;AAJA;AAsBA;AACA;AADA;AAGA;AACA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAXA;AAcA;;;;AAhkBA;AAOA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAHA;AAFA;AAFA;AADA;AA2BA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AAJA;AARA;AAFA;AAqBA;AAEA;AACA;AAEA;AAEA;AACA;AAJA;AAHA;AAYA;AACA;AAEA;AAEA;AACA;AAJA;AAHA;AAbA;AA2BA;AAEA;AACA;AAEA;AAEA;AACA;AAJA;AAHA;AAFA;AAhDA;AADA;;;;;;;;;;;;;;;;;;;;;;;;ACvEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAhBA;AADA;AAbA;AACA;AA0CA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AACA;AAaA;;;;;AAKA;AACA;AADA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpGA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AAAA;AACA;AAGA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAIA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAQA;AAEA;AAAA;AAAA;AAGA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AArBA;AAlBA;AACA;AAkDA;;;;;AAKA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AApDA;AACA;AAsDA;;;;;AAKA;AACA;AADA;AACA;AAGA;AAGA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAlCA;AAoCA;AACA;AADA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAXA;AAaA;AACA;AACA;AACA;AAHA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzNA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;;;;;AAKA;AATA;AACA;AACA;AAFA;AAAA;;;;;;;;;;;;;AAkCA;;;;;;AAxBA;;;;;AA6BA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAXA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAdA;AAoBA;AACA;AAzCA;;;;;;;;;AAbA;AAOA;AACA;AACA;AADA;AAFA;AAaA;AACA;AACA;AADA;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzCA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;;;;;AAKA;AARA;AAAA;AACA;AAAA;AAOA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAYA;AACA;AACA;AAHA;AAXA;AACA;;;;;;;AADA;AAAA;AACA;AACA;AAeA;;;;;;;AAjBA;AAyBA,mBAEA;AACA;AACA;AACA;;;;;;AA9BA;AAAA;AAAA;AAoCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AA7CA;AAAA;AAAA;AAqDA;AACA,mBAEA;AACA;AACA;AACA;;;;;;AA3DA;AAAA;AAAA;AAiEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAHA;AADA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBA;AAoBA;AAzFA;AACA;AADA;AAAA;AAOA;AACA;AAFA;AACA;AAqFA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrJA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AAaA;;;;;AAKA;AAVA;AACA;AADA;AAAA;AAGA;AAAA;;;;;;;;;;;;;AAyBA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;;;AA1BA;;;;;;;;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AALA;AAOA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAPA;AARA;AADA;AADA;AA0BA;;;;AAxEA;AAOA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AATA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzCA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AATA;AACA;AAqBA;;;;;AAKA;AAVA;AACA;AADA;AAAA;AAGA;AAAA;;;AAqCA;;;;;;;AA7BA;;;;;AAmCA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAGA;AACA;AACA;;;;;;;;AArBA;;;;;;;;;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;;;AAKA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAfA;AANA;AAAA;AAAA;AAAA;AAAA;AA0BA;;;;AAjGA;AAOA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAXA;AAoBA;AACA;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClEA;;;;;AAKA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAXA;AACA;AA0BA;;;;;AAKA;AAbA;AACA;AACA;AACA;AAHA;AAAA;AAKA;AAAA;;;AA0CA;;;;;;AAMA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAPA;AAYA;AACA;AACA;;;;;;AArDA;;;;;;;;;AA0DA;AACA;AACA;AACA;AACA;;;;;;;;;AAMA;AACA;AAKA;AACA;AACA;AACA;AACA;;;;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;;;;;AAOA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;AAOA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;;;;;;;;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AACA;AAAA;AAAA;AAAA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;AADA;AADA;AACA;AAOA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AAHA;AACA;AAKA;;;;;;;;;;;;ACtHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAjBA;AACA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAJA;AAdA;AACA;AAqBA;AACA;;;;;;;;;;;;ACrCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;AACA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AACA;AAeA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AAHA;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC3DA;AAAA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;;;;;;;;;;;;ACLA;AAAA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;;;;;;;;;;;;ACLA;AAAA;;;;;AAKA;AACA;AACA;AACA;AAHA;;;;;;;;;;;;ACLA;AAAA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;;;;;;;;;;;;;;;;;;ACLA;;;;;AAKA;AACA;AACA;AACA;;;;;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AADA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARA;AAfA;AADA;AACA;AA4BA;AACA;AACA;AAFA;AACA;AAIA;AACA;AADA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;ACnDA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;;;;AAKA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAEA;AA1BA;AA2BA;AACA;;;;;;;;;;;;AC/DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAIA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtEA;AACA;AACA;AACA;AACA;;;;;;AAKA;;;;;;;;;;;;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;;;AAXA;AACA;AAaA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAFA;AACA;AAIA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA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;AACA;AARA;AAUA;AACA;AAEA;AACA;AACA;AACA;AALA;AAOA;AACA;AA5BA;AA8BA;;;;;;;;;;;;;;;;;;ACvDA;;;;;AAKA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AACA;AASA;;;;;;;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AA5CA;AA8CA;;;;;;;;;;;;;;;;;;;;;AC5EA;;;;;AAKA;AACA;AAMA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AArBA;AACA;AAuBA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AAHA;AAMA;AACA;AA9CA;AAgDA;;;;;;;;;;;;;;;;;;;;;;;;ACtGA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AA1BA;AACA;AA4BA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AAGA;AAEA;AAFA;AAAA;AALA;AAFA;AAaA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AAHA;AAMA;AACA;AApEA;AAsEA;;;;;;;;;;;;;;;;;;;;;;ACvIA;;;;AAIA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAjBA;AACA;AAmBA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AAAA;AACA;AADA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAEA;AAFA;AAFA;AAOA;AACA;AACA;AAHA;AAMA;AACA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AAGA;AACA;AACA;AAHA;AAOA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AAHA;AAMA;AACA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AA1EA;AA4EA;;;;;;;;;;;;;;;;;;AC7HA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;;;;;;;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AAEA;AACA;AACA;AACA;AALA;AAOA;AACA;AAEA;AACA;AACA;AACA;AALA;AAOA;AACA;AAzBA;AA2BA;;;;;;;;;;;;;;;;;;ACjDA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;;;;;;;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AAvBA;AAyBA;;;;;;;;;;;;AC9CA;AAAA;AAAA;;;;;;AAMA;AACA;AACA;;;;;;AAMA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;AChBA;;;;;AAKA;AACA;AAOA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AA3BA;AACA;AA6BA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AAHA;AAMA;AACA;AA7EA;AA+EA;;;;;;;;;;;;;;;;;;;;;AC5IA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAPA;AACA;AAaA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AAHA;AAMA;AACA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AAHA;AAMA;AACA;AA1CA;AA4CA;;;;;;;;;;;;ACnFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AACA;AA2BA;;;;;;;;;;;;;;;;;;;;ACnEA;;;;AAIA;AACA;AACA;AACA;AAKA;AACA;AADA;AACA;AAGA;;;;;;;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AALA;AAHA;AAcA;AACA;AACA;AAEA;AAAA;AAHA;AASA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAFA;AAAA;AAHA;AASA;AACA;AArCA;AAuCA;;;;;;;;;;;;;;;;;;;;;AC/DA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;;;;;;;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AAIA;AACA;AARA;AAUA;AACA;AAEA;AACA;AACA;AACA;AALA;AAOA;AACA;AA5BA;AA8BA;;;;;;;;;;;;;;;;;;ACvDA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;;;;;;;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AAEA;AACA;AACA;AACA;AALA;AAOA;AACA;AAEA;AACA;AACA;AACA;AALA;AAOA;AACA;AAzBA;AA2BA;;;;;;;;;;;;;;;;;;;;;;;ACjDA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;;;;;;;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AAGA;AAAA;AAHA;AAQA;AAKA;AAGA;AAAA;AAHA;AAlBA;AALA;AAiCA;AACA;AAEA;AACA;AACA;AACA;AALA;AAOA;AACA;AAnDA;AAqDA;;;;;;;;;;;;;;;;;;;;;AC7EA;;;;;AAKA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;;;;;;;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AAEA;AACA;AAAA;AAEA;AAFA;AAAA;AAIA;AACA;AACA;AACA;AAVA;AAYA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AA1CA;AA4CA;;;;;;;;;;;;;;;;;;;;;AC1EA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAXA;AACA;AAiBA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AAHA;AAMA;AACA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AAHA;AAMA;AACA;AAlDA;AAoDA;;;;;;;;;;;;;;;;;;AC/FA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;;;;;;;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AAEA;AACA;AACA;AACA;AALA;AAOA;AACA;AAEA;AACA;AACA;AACA;AALA;AAOA;AACA;AAzBA;AA2BA;;;;;;;;;;;;;;;;;;ACjDA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;;;;;;;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AAEA;AACA;AACA;AACA;AALA;AAOA;AACA;AAEA;AACA;AACA;AACA;AALA;AAOA;AACA;AAzBA;AA2BA;;;;;;;;;;;;;;;;;;ACjDA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAQA;;;;;;;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAHA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAHA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAHA;AASA;AACA;AAEA;AAFA;AAIA;AACA;AAvCA;AAyCA;;;;;;;;;;;;;;;;;;;;;;;ACjEA;;;;;AAKA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AA3CA;AACA;AAiDA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AAtFA;AAwFA;;;;;;;;;;;;;;;;;;;;;ACjLA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AA/BA;AAiCA;;;;;;;;;;;;;;;;;;;;;AClDA;;;;;AAKA;AACA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAbA;AACA;AAeA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AACA;AAHA;AAOA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AAHA;AAMA;AACA;AA3DA;AA6DA;;;;;;;;;;;;AC1GA;AAAA;AAAA;AAAA;;;;AAIA;AACA;AA0BA;;;;;AAKA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAZA;AAmBA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AAFA;AAJA;AAWA;AACA;AAFA;AAKA;AACA;AAFA;AACA;AAKA;;;;;AAKA;AAEA;AACA;AACA;AAHA;AACA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AASA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AACA;AAMA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAIA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC1HA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAKA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC3BA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}